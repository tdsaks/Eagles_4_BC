{"ast":null,"code":"/*\n * JavaScript Load Image Exif Parser\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require, DataView */\n\n/* eslint-disable no-console */\n;\n\n(function (factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image', './load-image-meta'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'), require('./load-image-meta'));\n  } else {\n    // Browser globals:\n    factory(window.loadImage);\n  }\n})(function (loadImage) {\n  'use strict';\n\n  loadImage.ExifMap = function () {\n    return this;\n  };\n\n  loadImage.ExifMap.prototype.map = {\n    Orientation: 0x0112\n  };\n\n  loadImage.ExifMap.prototype.get = function (id) {\n    return this[id] || this[this.map[id]];\n  };\n\n  loadImage.getExifThumbnail = function (dataView, offset, length) {\n    if (!length || offset + length > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid thumbnail data.');\n      return;\n    }\n\n    return loadImage.createObjectURL(new Blob([dataView.buffer.slice(offset, offset + length)]));\n  };\n\n  loadImage.exifTagTypes = {\n    // byte, 8-bit unsigned int:\n    1: {\n      getValue: function (dataView, dataOffset) {\n        return dataView.getUint8(dataOffset);\n      },\n      size: 1\n    },\n    // ascii, 8-bit byte:\n    2: {\n      getValue: function (dataView, dataOffset) {\n        return String.fromCharCode(dataView.getUint8(dataOffset));\n      },\n      size: 1,\n      ascii: true\n    },\n    // short, 16 bit int:\n    3: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getUint16(dataOffset, littleEndian);\n      },\n      size: 2\n    },\n    // long, 32 bit int:\n    4: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getUint32(dataOffset, littleEndian);\n      },\n      size: 4\n    },\n    // rational = two long values, first is numerator, second is denominator:\n    5: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getUint32(dataOffset, littleEndian) / dataView.getUint32(dataOffset + 4, littleEndian);\n      },\n      size: 8\n    },\n    // slong, 32 bit signed int:\n    9: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getInt32(dataOffset, littleEndian);\n      },\n      size: 4\n    },\n    // srational, two slongs, first is numerator, second is denominator:\n    10: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getInt32(dataOffset, littleEndian) / dataView.getInt32(dataOffset + 4, littleEndian);\n      },\n      size: 8\n    }\n  }; // undefined, 8-bit byte, value depending on field:\n\n  loadImage.exifTagTypes[7] = loadImage.exifTagTypes[1];\n\n  loadImage.getExifValue = function (dataView, tiffOffset, offset, type, length, littleEndian) {\n    var tagType = loadImage.exifTagTypes[type];\n    var tagSize;\n    var dataOffset;\n    var values;\n    var i;\n    var str;\n    var c;\n\n    if (!tagType) {\n      console.log('Invalid Exif data: Invalid tag type.');\n      return;\n    }\n\n    tagSize = tagType.size * length; // Determine if the value is contained in the dataOffset bytes,\n    // or if the value at the dataOffset is a pointer to the actual data:\n\n    dataOffset = tagSize > 4 ? tiffOffset + dataView.getUint32(offset + 8, littleEndian) : offset + 8;\n\n    if (dataOffset + tagSize > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid data offset.');\n      return;\n    }\n\n    if (length === 1) {\n      return tagType.getValue(dataView, dataOffset, littleEndian);\n    }\n\n    values = [];\n\n    for (i = 0; i < length; i += 1) {\n      values[i] = tagType.getValue(dataView, dataOffset + i * tagType.size, littleEndian);\n    }\n\n    if (tagType.ascii) {\n      str = ''; // Concatenate the chars:\n\n      for (i = 0; i < values.length; i += 1) {\n        c = values[i]; // Ignore the terminating NULL byte(s):\n\n        if (c === '\\u0000') {\n          break;\n        }\n\n        str += c;\n      }\n\n      return str;\n    }\n\n    return values;\n  };\n\n  loadImage.parseExifTag = function (dataView, tiffOffset, offset, littleEndian) {\n    return {\n      number: dataView.getUint16(offset, littleEndian),\n      value: loadImage.getExifValue(dataView, tiffOffset, offset, dataView.getUint16(offset + 2, littleEndian), // tag type\n      dataView.getUint32(offset + 4, littleEndian), // tag length\n      littleEndian)\n    };\n  };\n\n  loadImage.parseExifTags = function (dataView, tiffOffset, dirOffset, littleEndian, data) {\n    var tagsNumber, dirEndOffset, i, tagOffset, tag;\n\n    if (dirOffset + 6 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid directory offset.');\n      return;\n    }\n\n    tagsNumber = dataView.getUint16(dirOffset, littleEndian);\n    dirEndOffset = dirOffset + 2 + 12 * tagsNumber;\n\n    if (dirEndOffset + 4 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid directory size.');\n      return;\n    }\n\n    for (i = 0; i < tagsNumber; i += 1) {\n      tagOffset = dirOffset + 2 + 12 * i;\n      tag = this.parseExifTag(dataView, tiffOffset, tagOffset, littleEndian, data);\n      data.exif[tag.number] = tag.value;\n\n      if (data.exifOffsets) {\n        data.exifOffsets[tag.number] = tagOffset;\n      }\n    } // Return the offset to the next directory:\n\n\n    return dataView.getUint32(dirEndOffset, littleEndian);\n  };\n\n  loadImage.parseExifData = function (dataView, offset, length, data, options) {\n    if (options.disableExif) {\n      return;\n    }\n\n    var tiffOffset = offset + 10;\n    var littleEndian;\n    var dirOffset;\n    var thumbnailData; // Check for the ASCII code for \"Exif\" (0x45786966):\n\n    if (dataView.getUint32(offset + 4) !== 0x45786966) {\n      // No Exif data, might be XMP data instead\n      return;\n    }\n\n    if (tiffOffset + 8 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid segment size.');\n      return;\n    } // Check for the two null bytes:\n\n\n    if (dataView.getUint16(offset + 8) !== 0x0000) {\n      console.log('Invalid Exif data: Missing byte alignment offset.');\n      return;\n    } // Check the byte alignment:\n\n\n    switch (dataView.getUint16(tiffOffset)) {\n      case 0x4949:\n        littleEndian = true;\n        break;\n\n      case 0x4d4d:\n        littleEndian = false;\n        break;\n\n      default:\n        console.log('Invalid Exif data: Invalid byte alignment marker.');\n        return;\n    } // Check for the TIFF tag marker (0x002A):\n\n\n    if (dataView.getUint16(tiffOffset + 2, littleEndian) !== 0x002a) {\n      console.log('Invalid Exif data: Missing TIFF marker.');\n      return;\n    } // Retrieve the directory offset bytes, usually 0x00000008 or 8 decimal:\n\n\n    dirOffset = dataView.getUint32(tiffOffset + 4, littleEndian); // Create the exif object to store the tags:\n\n    data.exif = new loadImage.ExifMap();\n\n    if (!options.disableExifOffsets) {\n      data.exifOffsets = new loadImage.ExifMap();\n      data.exifTiffOffset = tiffOffset;\n      data.exifLittleEndian = littleEndian;\n    } // Parse the tags of the main image directory and retrieve the\n    // offset to the next directory, usually the thumbnail directory:\n\n\n    dirOffset = loadImage.parseExifTags(dataView, tiffOffset, tiffOffset + dirOffset, littleEndian, data);\n\n    if (dirOffset && !options.disableExifThumbnail) {\n      thumbnailData = {\n        exif: {}\n      };\n      dirOffset = loadImage.parseExifTags(dataView, tiffOffset, tiffOffset + dirOffset, littleEndian, thumbnailData); // Check for JPEG Thumbnail offset:\n\n      if (thumbnailData.exif[0x0201]) {\n        data.exif.Thumbnail = loadImage.getExifThumbnail(dataView, tiffOffset + thumbnailData.exif[0x0201], thumbnailData.exif[0x0202] // Thumbnail data length\n        );\n      }\n    } // Check for Exif Sub IFD Pointer:\n\n\n    if (data.exif[0x8769] && !options.disableExifSub) {\n      loadImage.parseExifTags(dataView, tiffOffset, tiffOffset + data.exif[0x8769], // directory offset\n      littleEndian, data);\n    } // Check for GPS Info IFD Pointer:\n\n\n    if (data.exif[0x8825] && !options.disableExifGps) {\n      loadImage.parseExifTags(dataView, tiffOffset, tiffOffset + data.exif[0x8825], // directory offset\n      littleEndian, data);\n    }\n  }; // Registers the Exif parser for the APP1 JPEG meta data segment:\n\n\n  loadImage.metaDataParsers.jpeg[0xffe1].push(loadImage.parseExifData);\n  loadImage.exifWriters = {\n    // Orientation writer:\n    0x0112: function (buffer, data, value) {\n      var view = new DataView(buffer, data.exifOffsets[0x0112] + 8, 2);\n      view.setUint16(0, value, data.exifLittleEndian);\n      return buffer;\n    }\n  };\n\n  loadImage.writeExifData = function (buffer, data, id, value) {\n    loadImage.exifWriters[data.exif.map[id]](buffer, data, value);\n  }; // Adds the following properties to the parseMetaData callback data:\n  // * exif: The parsed Exif tags\n  // * exifOffsets: The parsed Exif tag offsets\n  // * exifTiffOffset: TIFF header offset (used for offset pointers)\n  // * exifLittleEndian: little endian order if true, big endian if false\n  // Adds the following options to the parseMetaData method:\n  // * disableExif: Disables Exif parsing.\n  // * disableExifThumbnail: Disables parsing of the Exif Thumbnail.\n  // * disableExifSub: Disables parsing of the Exif Sub IFD.\n  // * disableExifGps: Disables parsing of the Exif GPS Info IFD.\n  // * disableExifOffsets: Disables storing Exif tag offsets\n\n});","map":{"version":3,"sources":["/Users/tommysuh/Desktop/WebDeisgn/creative-project-adam-esther-tommy/node_modules/blueimp-load-image/js/load-image-exif.js"],"names":["factory","define","amd","module","exports","require","window","loadImage","ExifMap","prototype","map","Orientation","get","id","getExifThumbnail","dataView","offset","length","byteLength","console","log","createObjectURL","Blob","buffer","slice","exifTagTypes","getValue","dataOffset","getUint8","size","String","fromCharCode","ascii","littleEndian","getUint16","getUint32","getInt32","getExifValue","tiffOffset","type","tagType","tagSize","values","i","str","c","parseExifTag","number","value","parseExifTags","dirOffset","data","tagsNumber","dirEndOffset","tagOffset","tag","exif","exifOffsets","parseExifData","options","disableExif","thumbnailData","disableExifOffsets","exifTiffOffset","exifLittleEndian","disableExifThumbnail","Thumbnail","disableExifSub","disableExifGps","metaDataParsers","jpeg","push","exifWriters","view","DataView","setUint16","writeExifData"],"mappings":"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","sourcesContent":["/*\n * JavaScript Load Image Exif Parser\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require, DataView */\n\n/* eslint-disable no-console */\n\n;(function (factory) {\n  'use strict'\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image', './load-image-meta'], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'), require('./load-image-meta'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n})(function (loadImage) {\n  'use strict'\n\n  loadImage.ExifMap = function () {\n    return this\n  }\n\n  loadImage.ExifMap.prototype.map = {\n    Orientation: 0x0112\n  }\n\n  loadImage.ExifMap.prototype.get = function (id) {\n    return this[id] || this[this.map[id]]\n  }\n\n  loadImage.getExifThumbnail = function (dataView, offset, length) {\n    if (!length || offset + length > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid thumbnail data.')\n      return\n    }\n    return loadImage.createObjectURL(\n      new Blob([dataView.buffer.slice(offset, offset + length)])\n    )\n  }\n\n  loadImage.exifTagTypes = {\n    // byte, 8-bit unsigned int:\n    1: {\n      getValue: function (dataView, dataOffset) {\n        return dataView.getUint8(dataOffset)\n      },\n      size: 1\n    },\n    // ascii, 8-bit byte:\n    2: {\n      getValue: function (dataView, dataOffset) {\n        return String.fromCharCode(dataView.getUint8(dataOffset))\n      },\n      size: 1,\n      ascii: true\n    },\n    // short, 16 bit int:\n    3: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getUint16(dataOffset, littleEndian)\n      },\n      size: 2\n    },\n    // long, 32 bit int:\n    4: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getUint32(dataOffset, littleEndian)\n      },\n      size: 4\n    },\n    // rational = two long values, first is numerator, second is denominator:\n    5: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return (\n          dataView.getUint32(dataOffset, littleEndian) /\n          dataView.getUint32(dataOffset + 4, littleEndian)\n        )\n      },\n      size: 8\n    },\n    // slong, 32 bit signed int:\n    9: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getInt32(dataOffset, littleEndian)\n      },\n      size: 4\n    },\n    // srational, two slongs, first is numerator, second is denominator:\n    10: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return (\n          dataView.getInt32(dataOffset, littleEndian) /\n          dataView.getInt32(dataOffset + 4, littleEndian)\n        )\n      },\n      size: 8\n    }\n  }\n  // undefined, 8-bit byte, value depending on field:\n  loadImage.exifTagTypes[7] = loadImage.exifTagTypes[1]\n\n  loadImage.getExifValue = function (\n    dataView,\n    tiffOffset,\n    offset,\n    type,\n    length,\n    littleEndian\n  ) {\n    var tagType = loadImage.exifTagTypes[type]\n    var tagSize\n    var dataOffset\n    var values\n    var i\n    var str\n    var c\n    if (!tagType) {\n      console.log('Invalid Exif data: Invalid tag type.')\n      return\n    }\n    tagSize = tagType.size * length\n    // Determine if the value is contained in the dataOffset bytes,\n    // or if the value at the dataOffset is a pointer to the actual data:\n    dataOffset =\n      tagSize > 4\n        ? tiffOffset + dataView.getUint32(offset + 8, littleEndian)\n        : offset + 8\n    if (dataOffset + tagSize > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid data offset.')\n      return\n    }\n    if (length === 1) {\n      return tagType.getValue(dataView, dataOffset, littleEndian)\n    }\n    values = []\n    for (i = 0; i < length; i += 1) {\n      values[i] = tagType.getValue(\n        dataView,\n        dataOffset + i * tagType.size,\n        littleEndian\n      )\n    }\n    if (tagType.ascii) {\n      str = ''\n      // Concatenate the chars:\n      for (i = 0; i < values.length; i += 1) {\n        c = values[i]\n        // Ignore the terminating NULL byte(s):\n        if (c === '\\u0000') {\n          break\n        }\n        str += c\n      }\n      return str\n    }\n    return values\n  }\n\n  loadImage.parseExifTag = function (\n    dataView,\n    tiffOffset,\n    offset,\n    littleEndian\n  ) {\n    return {\n      number: dataView.getUint16(offset, littleEndian),\n      value: loadImage.getExifValue(\n        dataView,\n        tiffOffset,\n        offset,\n        dataView.getUint16(offset + 2, littleEndian), // tag type\n        dataView.getUint32(offset + 4, littleEndian), // tag length\n        littleEndian\n      )\n    }\n  }\n\n  loadImage.parseExifTags = function (\n    dataView,\n    tiffOffset,\n    dirOffset,\n    littleEndian,\n    data\n  ) {\n    var tagsNumber, dirEndOffset, i, tagOffset, tag\n    if (dirOffset + 6 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid directory offset.')\n      return\n    }\n    tagsNumber = dataView.getUint16(dirOffset, littleEndian)\n    dirEndOffset = dirOffset + 2 + 12 * tagsNumber\n    if (dirEndOffset + 4 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid directory size.')\n      return\n    }\n    for (i = 0; i < tagsNumber; i += 1) {\n      tagOffset = dirOffset + 2 + 12 * i\n      tag = this.parseExifTag(\n        dataView,\n        tiffOffset,\n        tagOffset,\n        littleEndian,\n        data\n      )\n      data.exif[tag.number] = tag.value\n      if (data.exifOffsets) {\n        data.exifOffsets[tag.number] = tagOffset\n      }\n    }\n    // Return the offset to the next directory:\n    return dataView.getUint32(dirEndOffset, littleEndian)\n  }\n\n  loadImage.parseExifData = function (dataView, offset, length, data, options) {\n    if (options.disableExif) {\n      return\n    }\n    var tiffOffset = offset + 10\n    var littleEndian\n    var dirOffset\n    var thumbnailData\n    // Check for the ASCII code for \"Exif\" (0x45786966):\n    if (dataView.getUint32(offset + 4) !== 0x45786966) {\n      // No Exif data, might be XMP data instead\n      return\n    }\n    if (tiffOffset + 8 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid segment size.')\n      return\n    }\n    // Check for the two null bytes:\n    if (dataView.getUint16(offset + 8) !== 0x0000) {\n      console.log('Invalid Exif data: Missing byte alignment offset.')\n      return\n    }\n    // Check the byte alignment:\n    switch (dataView.getUint16(tiffOffset)) {\n      case 0x4949:\n        littleEndian = true\n        break\n      case 0x4d4d:\n        littleEndian = false\n        break\n      default:\n        console.log('Invalid Exif data: Invalid byte alignment marker.')\n        return\n    }\n    // Check for the TIFF tag marker (0x002A):\n    if (dataView.getUint16(tiffOffset + 2, littleEndian) !== 0x002a) {\n      console.log('Invalid Exif data: Missing TIFF marker.')\n      return\n    }\n    // Retrieve the directory offset bytes, usually 0x00000008 or 8 decimal:\n    dirOffset = dataView.getUint32(tiffOffset + 4, littleEndian)\n    // Create the exif object to store the tags:\n    data.exif = new loadImage.ExifMap()\n    if (!options.disableExifOffsets) {\n      data.exifOffsets = new loadImage.ExifMap()\n      data.exifTiffOffset = tiffOffset\n      data.exifLittleEndian = littleEndian\n    }\n    // Parse the tags of the main image directory and retrieve the\n    // offset to the next directory, usually the thumbnail directory:\n    dirOffset = loadImage.parseExifTags(\n      dataView,\n      tiffOffset,\n      tiffOffset + dirOffset,\n      littleEndian,\n      data\n    )\n    if (dirOffset && !options.disableExifThumbnail) {\n      thumbnailData = { exif: {} }\n      dirOffset = loadImage.parseExifTags(\n        dataView,\n        tiffOffset,\n        tiffOffset + dirOffset,\n        littleEndian,\n        thumbnailData\n      )\n      // Check for JPEG Thumbnail offset:\n      if (thumbnailData.exif[0x0201]) {\n        data.exif.Thumbnail = loadImage.getExifThumbnail(\n          dataView,\n          tiffOffset + thumbnailData.exif[0x0201],\n          thumbnailData.exif[0x0202] // Thumbnail data length\n        )\n      }\n    }\n    // Check for Exif Sub IFD Pointer:\n    if (data.exif[0x8769] && !options.disableExifSub) {\n      loadImage.parseExifTags(\n        dataView,\n        tiffOffset,\n        tiffOffset + data.exif[0x8769], // directory offset\n        littleEndian,\n        data\n      )\n    }\n    // Check for GPS Info IFD Pointer:\n    if (data.exif[0x8825] && !options.disableExifGps) {\n      loadImage.parseExifTags(\n        dataView,\n        tiffOffset,\n        tiffOffset + data.exif[0x8825], // directory offset\n        littleEndian,\n        data\n      )\n    }\n  }\n\n  // Registers the Exif parser for the APP1 JPEG meta data segment:\n  loadImage.metaDataParsers.jpeg[0xffe1].push(loadImage.parseExifData)\n\n  loadImage.exifWriters = {\n    // Orientation writer:\n    0x0112: function (buffer, data, value) {\n      var view = new DataView(buffer, data.exifOffsets[0x0112] + 8, 2)\n      view.setUint16(0, value, data.exifLittleEndian)\n      return buffer\n    }\n  }\n\n  loadImage.writeExifData = function (buffer, data, id, value) {\n    loadImage.exifWriters[data.exif.map[id]](buffer, data, value)\n  }\n\n  // Adds the following properties to the parseMetaData callback data:\n  // * exif: The parsed Exif tags\n  // * exifOffsets: The parsed Exif tag offsets\n  // * exifTiffOffset: TIFF header offset (used for offset pointers)\n  // * exifLittleEndian: little endian order if true, big endian if false\n\n  // Adds the following options to the parseMetaData method:\n  // * disableExif: Disables Exif parsing.\n  // * disableExifThumbnail: Disables parsing of the Exif Thumbnail.\n  // * disableExifSub: Disables parsing of the Exif Sub IFD.\n  // * disableExifGps: Disables parsing of the Exif GPS Info IFD.\n  // * disableExifOffsets: Disables storing Exif tag offsets\n})\n"]},"metadata":{},"sourceType":"script"}