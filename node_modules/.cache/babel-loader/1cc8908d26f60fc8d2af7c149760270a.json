{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _typeof from '@babel/runtime/helpers/typeof';\nimport axios from 'axios';\nimport uuidv4 from 'uuid/v4';\nimport Immutable from 'seamless-immutable';\nimport isoWS from 'isomorphic-ws';\nimport { fromByteArray } from 'base64-js';\nimport fetch, { Headers } from 'cross-fetch';\nimport FormData from 'form-data';\n/**\n * ChannelState - A container class for the channel state.\n */\n\nfunction byDate(a, b) {\n  return a.created_at - b.created_at;\n}\n\nvar ChannelState = /*#__PURE__*/function () {\n  function ChannelState(channel) {\n    _classCallCheck(this, ChannelState);\n\n    _defineProperty(this, \"removeMessageFromArray\", function (msgArray, msg) {\n      var removed = false;\n      var result = msgArray.flatMap(function (message) {\n        var idMatch = message.id && msg.id && message.id === msg.id;\n\n        if (idMatch) {\n          removed = true;\n          return [];\n        } else {\n          return message;\n        }\n      });\n      return {\n        removed: removed,\n        result: result\n      };\n    });\n\n    this._channel = channel;\n    this.watcher_count = 0;\n    this.typing = Immutable({});\n    this.read = Immutable({});\n    this.messages = Immutable([]);\n    this.threads = Immutable({}); // a list of users to hide messages from\n\n    this.mutedUsers = Immutable([]);\n    this.watchers = Immutable({});\n    this.members = Immutable({});\n    this.membership = Immutable({});\n    this.last_message_at = channel.last_message_at != null ? new Date(channel.last_message_at) : null;\n  }\n  /**\n   * addMessageSorted - Add a message to the state\n   *\n   * @param {object} newMessage A new message\n   *\n   */\n\n\n  _createClass(ChannelState, [{\n    key: \"addMessageSorted\",\n    value: function addMessageSorted(newMessage) {\n      return this.addMessagesSorted([newMessage]);\n    }\n    /**\n     * messageToImmutable - Takes the message object. Parses the dates, sets __html\n     * and sets the status to received if missing. Returns an immutable message object\n     *\n     * @param {object} message an Immutable message object\n     *\n     */\n\n  }, {\n    key: \"messageToImmutable\",\n    value: function messageToImmutable(message) {\n      message.__html = message.html; // parse the date..\n\n      message.created_at = new Date(message.created_at);\n      message.updated_at = new Date(message.updated_at);\n\n      if (!message.status) {\n        message.status = 'received';\n      }\n\n      return Immutable(message);\n    }\n    /**\n     * addMessagesSorted - Add the list of messages to state and resorts the messages\n     *\n     * @param {array}   newMessages    A list of messages\n     * @param {boolean} initializing   Weather channel is being initialized.\n     *\n     */\n\n  }, {\n    key: \"addMessagesSorted\",\n    value: function addMessagesSorted(newMessages) {\n      var initializing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; // parse all the new message dates and add __html for react\n\n      var parsedMessages = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = newMessages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var message = _step.value;\n\n          if (initializing && this.threads[message.id]) {\n            // If we are initializing the state of channel (e.g., in case of connection recovery),\n            // then in that case we remove thread related to this message from threads object.\n            // This way we can ensure that we don't have any stale data in thread object\n            // and consumer can refetch the replies.\n            this.threads = Immutable.without(this.threads, message.id);\n          }\n\n          var parsedMsg = this.messageToImmutable(message);\n          parsedMessages.push(parsedMsg);\n\n          if (parsedMsg.created_at > this.last_message_at) {\n            this.last_message_at = parsedMsg.created_at;\n          }\n        } // update or append the messages...\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var updatedThreads = [];\n\n      for (var _i = 0, _parsedMessages = parsedMessages; _i < _parsedMessages.length; _i++) {\n        var _message = _parsedMessages[_i];\n        var isThreadReply = _message.parent_id && !_message.show_in_channel; // add to the main message list\n\n        if (!isThreadReply) {\n          this.messages = this._addToMessageList(this.messages, _message);\n        } // add to the thread if applicable..\n\n\n        var parentID = _message.parent_id;\n\n        if (parentID) {\n          var thread = this.threads[parentID] || Immutable([]);\n\n          var threadMessages = this._addToMessageList(thread, _message);\n\n          this.threads = this.threads.set(parentID, threadMessages);\n          updatedThreads.push(parentID);\n        }\n      } // Resort the main messages and the threads that changed...\n\n\n      var messages = _toConsumableArray(this.messages);\n\n      messages.sort(byDate);\n      this.messages = Immutable(messages);\n\n      for (var _i2 = 0, _updatedThreads = updatedThreads; _i2 < _updatedThreads.length; _i2++) {\n        var _parentID = _updatedThreads[_i2];\n\n        var _threadMessages = this.threads[_parentID] ? _toConsumableArray(this.threads[_parentID]) : [];\n\n        _threadMessages.sort(byDate);\n\n        this.threads = this.threads.set(_parentID, _threadMessages);\n      }\n    }\n  }, {\n    key: \"addReaction\",\n    value: function addReaction(reaction, message) {\n      var messages = this.messages;\n      if (!message) return;\n      var parent_id = message.parent_id,\n          show_in_channel = message.show_in_channel;\n\n      if (parent_id && this.threads[parent_id]) {\n        var thread = this.threads[parent_id];\n\n        for (var i = 0; i < thread.length; i++) {\n          var _message2 = thread[i];\n          _message2 = this._addReactionToMessage(_message2, reaction);\n\n          if (!_message2) {\n            continue;\n          }\n\n          this.threads = this.threads.set(parent_id, thread.set(i, _message2));\n          break;\n        }\n      }\n\n      if (!show_in_channel && !parent_id || show_in_channel) {\n        for (var _i3 = 0; _i3 < messages.length; _i3++) {\n          var _message3 = messages[_i3];\n          _message3 = this._addReactionToMessage(_message3, reaction);\n\n          if (!_message3) {\n            continue;\n          }\n\n          this.messages = messages.set(_i3, _message3);\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"_addReactionToMessage\",\n    value: function _addReactionToMessage(message, reaction) {\n      var idMatch = message.id && message.id === reaction.message_id;\n\n      if (!idMatch) {\n        return false;\n      }\n\n      message = this._removeReactionFromMessage(message, reaction);\n\n      if (this._channel.getClient().userID === reaction.user.id) {\n        message = message.update('own_reactions', function () {\n          var old = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n          return old.concat([reaction]);\n        });\n      }\n\n      message = message.update('latest_reactions', function () {\n        var old = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        return old.concat([reaction]);\n      });\n      message = message.updateIn(['reaction_counts', reaction.type], function (old) {\n        return old ? old + 1 : 1;\n      });\n      return message;\n    }\n  }, {\n    key: \"_removeReactionFromMessage\",\n    value: function _removeReactionFromMessage(message, reaction) {\n      var filterReaction = function filterReaction(old) {\n        return old.filter(function (item) {\n          return item.type !== reaction.type || item.user.id !== reaction.user.id;\n        });\n      };\n\n      message = message.update('own_reactions', filterReaction);\n      message = message.update('latest_reactions', filterReaction);\n      return message;\n    }\n  }, {\n    key: \"removeReaction\",\n    value: function removeReaction(reaction, message) {\n      var messages = this.messages;\n      if (!message) return;\n      var parent_id = message.parent_id,\n          show_in_channel = message.show_in_channel;\n\n      if (parent_id && this.threads[parent_id]) {\n        var thread = this.threads[parent_id];\n\n        for (var i = 0; i < thread.length; i++) {\n          var _message4 = thread[i];\n          var idMatch = _message4.id && _message4.id === reaction.message_id;\n\n          if (!idMatch) {\n            continue;\n          }\n\n          _message4 = this._removeReactionFromMessage(_message4, reaction);\n          _message4 = _message4.updateIn(['reaction_counts', reaction.type], function (old) {\n            return old ? old - 1 : 0;\n          });\n          this.threads = this.threads.set(parent_id, thread.set(i, _message4));\n          break;\n        }\n      }\n\n      if (!show_in_channel && !parent_id || show_in_channel) {\n        for (var _i4 = 0; _i4 < messages.length; _i4++) {\n          var _message5 = messages[_i4];\n\n          var _idMatch = _message5.id && _message5.id === reaction.message_id;\n\n          if (!_idMatch) {\n            continue;\n          }\n\n          _message5 = this._removeReactionFromMessage(_message5, reaction);\n          _message5 = _message5.updateIn(['reaction_counts', reaction.type], function (old) {\n            return old ? old - 1 : 0;\n          });\n          this.messages = messages.set(_i4, _message5);\n          break;\n        }\n      }\n    }\n    /**\n     * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isnt found\n     *\n     * @param {array} messages A list of messages\n     * @param {object} newMessage The new message\n     *\n     */\n\n  }, {\n    key: \"_addToMessageList\",\n    value: function _addToMessageList(messages, newMessage) {\n      var updated = false;\n\n      for (var i = 0; i < messages.length; i++) {\n        var message = messages[i];\n        var idMatch = message.id && newMessage.id && message.id === newMessage.id;\n\n        if (idMatch) {\n          messages = messages.set(i, newMessage);\n          updated = true;\n        }\n      }\n\n      if (!updated) {\n        messages = messages.concat([newMessage]);\n      }\n\n      return messages;\n    }\n    /**\n     * removeMessage - Description\n     *\n     * @param {type} messageToRemove Object of the message to remove. Needs to have at id specified.\n     *\n     * @return {boolean} Returns if the message was removed\n     */\n\n  }, {\n    key: \"removeMessage\",\n    value: function removeMessage(messageToRemove) {\n      var isRemoved = false;\n\n      if (messageToRemove.parent_id && this.threads[messageToRemove.parent_id]) {\n        var _this$removeMessageFr = this.removeMessageFromArray(this.threads[messageToRemove.parent_id], messageToRemove),\n            removed = _this$removeMessageFr.removed,\n            threadMessages = _this$removeMessageFr.result;\n\n        this.threads = this.threads[messageToRemove.parent_id].set(messageToRemove.parent_id, threadMessages);\n        isRemoved = removed;\n      } else {\n        var _this$removeMessageFr2 = this.removeMessageFromArray(this.messages, messageToRemove),\n            _removed = _this$removeMessageFr2.removed,\n            messages = _this$removeMessageFr2.result;\n\n        this.messages = messages;\n        isRemoved = _removed;\n      }\n\n      return isRemoved;\n    }\n  }, {\n    key: \"filterErrorMessages\",\n\n    /**\n     * filterErrorMessages - Removes error messages from the channel state.\n     *\n     */\n    value: function filterErrorMessages() {\n      var filteredMessages = this.messages.flatMap(function (message) {\n        if (message.type !== 'error') {\n          return message;\n        } else {\n          return [];\n        }\n      });\n      this.messages = Immutable(filteredMessages);\n    }\n    /**\n     * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds\n     */\n\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      var now = new Date(); // prevent old users from showing up as typing\n\n      for (var _i5 = 0, _Object$entries = Object.entries(this.typing); _i5 < _Object$entries.length; _i5++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i5], 2),\n            userID = _Object$entries$_i[0],\n            lastEvent = _Object$entries$_i[1];\n\n        var since = now - new Date(lastEvent.received_at);\n\n        if (since > 7000) {\n          this.typing = this.typing.without(userID);\n\n          this._channel.getClient().dispatchEvent({\n            type: 'typing.stop',\n            user: {\n              id: userID\n            },\n            cid: this._channel.cid\n          });\n        }\n      }\n    }\n  }, {\n    key: \"clearMessages\",\n    value: function clearMessages() {\n      this.messages = Immutable([]);\n    }\n  }]);\n\n  return ChannelState;\n}();\n\nvar EVENT_MAP = {\n  'user.presence.changed': true,\n  'user.watching.start': true,\n  'user.watching.stop': true,\n  'user.updated': true,\n  'typing.start': true,\n  'typing.stop': true,\n  'message.new': true,\n  'message.updated': true,\n  'message.deleted': true,\n  'message.read': true,\n  'reaction.new': true,\n  'reaction.deleted': true,\n  'member.added': true,\n  'member.updated': true,\n  'member.removed': true,\n  'channel.updated': true,\n  'channel.muted': true,\n  'channel.unmuted': true,\n  'channel.deleted': true,\n  'channel.truncated': true,\n  'channel.created': true,\n  'channel.hidden': true,\n  'health.check': true,\n  'notification.message_new': true,\n  'notification.mark_read': true,\n  'notification.invited': true,\n  'notification.invite_accepted': true,\n  'notification.added_to_channel': true,\n  'notification.removed_from_channel': true,\n  'notification.mutes_updated': true,\n  'notification.channel_deleted': true,\n  'notification.channel_truncated': true,\n  'notification.channel_mutes_updated': true,\n  // local events\n  'connection.changed': true,\n  'connection.recovered': true\n};\n\nfunction isValidEventType(eventType) {\n  if (eventType === 'all') {\n    return true;\n  }\n\n  return EVENT_MAP[eventType] || false;\n}\n/**\n * logChatPromiseExecution - utility function for logging the execution of a promise..\n *  use this when you want to run the promise and handle errors by logging a warning\n *\n * @param {type} promise The promise you want to run and log\n * @param {type} name    A descriptive name of what the promise does for log output\n *\n */\n\n\nfunction logChatPromiseExecution(promise, name) {\n  promise.then(function () {// do nothing...\n  }).catch(function (error) {\n    console.warn(\"failed to do \".concat(name, \", ran into error: \"), error);\n  });\n}\n\nvar sleep = function sleep(m) {\n  return new Promise(function (r) {\n    return setTimeout(r, m);\n  });\n};\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * Channel - The Channel class manages it's own state.\n */\n\n\nvar Channel = /*#__PURE__*/function () {\n  /**\n   * constructor - Create a channel\n   *\n   * @param {Client} client the chat client\n   * @param {string} type  the type of channel\n   * @param {string} [id]  the id of the chat\n   * @param {type} custom any additional custom params\n   *\n   * @return {Channel} Returns a new uninitialized channel\n   */\n  function Channel(client, type, id, data) {\n    var _this = this;\n\n    _classCallCheck(this, Channel);\n\n    _defineProperty(this, \"create\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var options;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = {\n                watch: false,\n                state: false,\n                presence: false\n              };\n              _context.next = 3;\n              return _this.query(options);\n\n            case 3:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(this, \"_callChannelListeners\", function (event) {\n      var channel = _this; // gather and call the listeners\n\n      var listeners = [];\n\n      if (channel.listeners.all) {\n        listeners.push.apply(listeners, _toConsumableArray(channel.listeners.all));\n      }\n\n      if (channel.listeners[event.type]) {\n        listeners.push.apply(listeners, _toConsumableArray(channel.listeners[event.type]));\n      } // call the event and send it to the listeners\n\n\n      for (var _i = 0, _listeners = listeners; _i < _listeners.length; _i++) {\n        var listener = _listeners[_i];\n        listener(event);\n      }\n    });\n\n    _defineProperty(this, \"_channelURL\", function () {\n      if (!_this.id) {\n        throw new Error('channel id is not defined');\n      }\n\n      return \"\".concat(_this.getClient().baseURL, \"/channels/\").concat(_this.type, \"/\").concat(_this.id);\n    });\n\n    var validTypeRe = /^[\\w_-]+$/;\n    var validIDRe = /^[\\w!_-]+$/;\n\n    if (!validTypeRe.test(type)) {\n      throw new Error(\"Invalid chat type \".concat(type, \", letters, numbers and \\\"_-\\\" are allowed\"));\n    }\n\n    if (!validIDRe.test(id)) {\n      throw new Error(\"Invalid chat id \".concat(id, \", letters, numbers and \\\"!-_\\\" are allowed\"));\n    }\n\n    this._client = client;\n    this.type = type;\n    this.id = id; // used by the frontend, gets updated:\n\n    this.data = data; // this._data is used for the requests...\n\n    this._data = _objectSpread({}, data);\n    this.cid = \"\".concat(type, \":\").concat(id);\n    this.listeners = {}; // perhaps the state variable should be private\n\n    this.state = new ChannelState(this);\n    this.initialized = false;\n    this.lastTypingEvent = null;\n    this.isTyping = false;\n    this.disconnected = false;\n  }\n  /**\n   * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error\n   *\n   * @return {object}\n   */\n\n\n  _createClass(Channel, [{\n    key: \"getClient\",\n    value: function getClient() {\n      if (this.disconnected === true) {\n        throw Error(\"You can't use a channel after client.disconnect() was called\");\n      }\n\n      return this._client;\n    }\n    /**\n     * getConfig - Get the configs for this channel type\n     *\n     * @return {object}\n     */\n\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var client = this.getClient();\n      return client.configs[this.type];\n    }\n    /**\n     * sendMessage - Send a message to this channel\n     *\n     * @param {object} message The Message object\n     *\n     * @return {object} The Server Response\n     */\n\n  }, {\n    key: \"sendMessage\",\n    value: function () {\n      var _sendMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(message) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getClient().post(this._channelURL() + '/message', {\n                  message: message\n                });\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function sendMessage(_x) {\n        return _sendMessage.apply(this, arguments);\n      }\n\n      return sendMessage;\n    }()\n  }, {\n    key: \"sendFile\",\n    value: function sendFile(uri, name, contentType, user) {\n      return this.getClient().sendFile(\"\".concat(this._channelURL(), \"/file\"), uri, name, contentType, user);\n    }\n  }, {\n    key: \"sendImage\",\n    value: function sendImage(uri, name, contentType, user) {\n      return this.getClient().sendFile(\"\".concat(this._channelURL(), \"/image\"), uri, name, contentType, user);\n    }\n  }, {\n    key: \"deleteFile\",\n    value: function deleteFile(url) {\n      return this.getClient().delete(\"\".concat(this._channelURL(), \"/file\"), {\n        url: url\n      });\n    }\n  }, {\n    key: \"deleteImage\",\n    value: function deleteImage(url) {\n      return this.getClient().delete(\"\".concat(this._channelURL(), \"/image\"), {\n        url: url\n      });\n    }\n    /**\n     * sendEvent - Send an event on this channel\n     *\n     * @param {object} event for example {type: 'message.read'}\n     *\n     * @return {object} The Server Response\n     */\n\n  }, {\n    key: \"sendEvent\",\n    value: function () {\n      var _sendEvent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this._checkInitialized();\n\n                _context3.next = 3;\n                return this.getClient().post(this._channelURL() + '/event', {\n                  event: event\n                });\n\n              case 3:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function sendEvent(_x2) {\n        return _sendEvent.apply(this, arguments);\n      }\n\n      return sendEvent;\n    }()\n    /**\n     * search - Query messages\n     *\n     * @param {object|string}  message search query or object MongoDB style filters\n     * @param {object} options       Option object, {user_id: 'tommaso'}\n     *\n     * @return {object} search messages response\n     */\n\n  }, {\n    key: \"search\",\n    value: function () {\n      var _search = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(query) {\n        var options,\n            payload,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {}; // Return a list of channels\n\n                payload = _objectSpread({\n                  filter_conditions: {\n                    cid: this.cid\n                  }\n                }, options);\n\n                if (!(typeof query === 'string')) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                payload.query = query;\n                _context4.next = 11;\n                break;\n\n              case 6:\n                if (!(_typeof(query) === 'object')) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                payload.message_filter_conditions = query;\n                _context4.next = 11;\n                break;\n\n              case 10:\n                throw Error(\"Invalid type \".concat(_typeof(query), \" for query parameter\"));\n\n              case 11:\n                _context4.next = 13;\n                return this.wsPromise;\n\n              case 13:\n                _context4.next = 15;\n                return this.getClient().get(this.getClient().baseURL + '/search', {\n                  payload: payload\n                });\n\n              case 15:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 16:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function search(_x3) {\n        return _search.apply(this, arguments);\n      }\n\n      return search;\n    }()\n    /**\n     * sendReaction - Send a reaction about a message\n     *\n     * @param {string} messageID the message id\n     * @param {object} reaction the reaction object for instance {type: 'love'}\n     * @param {string} user_id the id of the user (used only for server side request) default null\n     *\n     * @return {object} The Server Response\n     */\n\n  }, {\n    key: \"sendReaction\",\n    value: function () {\n      var _sendReaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(messageID, reaction, user_id) {\n        var body;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (messageID) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                throw Error(\"Message id is missing\");\n\n              case 2:\n                if (!(!reaction || Object.keys(reaction).length === 0)) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                throw Error(\"Reaction object is missing\");\n\n              case 4:\n                body = {\n                  reaction: reaction\n                };\n\n                if (user_id != null) {\n                  body.reaction = _objectSpread({}, reaction, {\n                    user: {\n                      id: user_id\n                    }\n                  });\n                }\n\n                _context5.next = 8;\n                return this.getClient().post(this.getClient().baseURL + \"/messages/\".concat(messageID, \"/reaction\"), body);\n\n              case 8:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function sendReaction(_x4, _x5, _x6) {\n        return _sendReaction.apply(this, arguments);\n      }\n\n      return sendReaction;\n    }()\n    /**\n     * deleteReaction - Delete a reaction by user and type\n     *\n     * @param {string} messageID the id of the message from which te remove the reaction\n     * @param {string} reactionType the type of reaction that should be removed\n     * @param {string} user_id the id of the user (used only for server side request) default null\n     *\n     * @return {object} The Server Response\n     */\n\n  }, {\n    key: \"deleteReaction\",\n    value: function deleteReaction(messageID, reactionType, user_id) {\n      this._checkInitialized();\n\n      if (!reactionType || !messageID) {\n        throw Error('Deleting a reaction requires specifying both the message and reaction type');\n      }\n\n      var url = this.getClient().baseURL + \"/messages/\".concat(messageID, \"/reaction/\").concat(reactionType); //provided when server side request\n\n      if (user_id) {\n        return this.getClient().delete(url, {\n          user_id: user_id\n        });\n      }\n\n      return this.getClient().delete(url);\n    }\n    /**\n     * update - Edit the channel's custom properties\n     *\n     * @param {object} channelData The object to update the custom properties of this channel with\n     * @param {object} updateMessage Optional message object for channel members notification\n     * @return {type} The server response\n     */\n\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(channelData, updateMessage) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.getClient().post(this._channelURL(), {\n                  message: updateMessage,\n                  data: channelData\n                });\n\n              case 2:\n                data = _context6.sent;\n                this.data = data.channel;\n                return _context6.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function update(_x7, _x8) {\n        return _update.apply(this, arguments);\n      }\n\n      return update;\n    }()\n    /**\n     * delete - Delete the channel. Messages are permanently removed.\n     *\n     * @return {object} The server response\n     */\n\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.getClient().delete(this._channelURL());\n\n              case 2:\n                return _context7.abrupt(\"return\", _context7.sent);\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n    /**\n     * truncate - Removes all messages from the channel\n     *\n     * @return {object} The server response\n     */\n\n  }, {\n    key: \"truncate\",\n    value: function () {\n      var _truncate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.getClient().post(this._channelURL() + '/truncate');\n\n              case 2:\n                return _context8.abrupt(\"return\", _context8.sent);\n\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function truncate() {\n        return _truncate.apply(this, arguments);\n      }\n\n      return truncate;\n    }()\n    /**\n     * acceptInvite - accept invitation to the channel\n     *\n     * @param {object} options The object to update the custom properties of this channel with\n     *\n     * @return {type} The server response\n     */\n\n  }, {\n    key: \"acceptInvite\",\n    value: function () {\n      var _acceptInvite = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var options,\n            data,\n            _args9 = arguments;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                options = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};\n                _context9.next = 3;\n                return this.getClient().post(this._channelURL(), _objectSpread({\n                  accept_invite: true\n                }, options));\n\n              case 3:\n                data = _context9.sent;\n                this.data = data.channel;\n                return _context9.abrupt(\"return\", data);\n\n              case 6:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function acceptInvite() {\n        return _acceptInvite.apply(this, arguments);\n      }\n\n      return acceptInvite;\n    }()\n    /**\n     * acceptInvite - reject invitation to the channel\n     *\n     * @param {object} options The object to update the custom properties of this channel with\n     *\n     * @return {type} The server response\n     */\n\n  }, {\n    key: \"rejectInvite\",\n    value: function () {\n      var _rejectInvite = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var options,\n            data,\n            _args10 = arguments;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                options = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};\n                _context10.next = 3;\n                return this.getClient().post(this._channelURL(), _objectSpread({\n                  reject_invite: true\n                }, options));\n\n              case 3:\n                data = _context10.sent;\n                this.data = data.channel;\n                return _context10.abrupt(\"return\", data);\n\n              case 6:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function rejectInvite() {\n        return _rejectInvite.apply(this, arguments);\n      }\n\n      return rejectInvite;\n    }()\n    /**\n     * addMembers - add members to the channel\n     *\n     * @param {array} members An array of member identifiers\n     * @param {object} message Optional message object for channel members notification\n     * @return {type} The server response\n     */\n\n  }, {\n    key: \"addMembers\",\n    value: function () {\n      var _addMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(members, message) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.getClient().post(this._channelURL(), {\n                  add_members: members,\n                  message: message\n                });\n\n              case 2:\n                data = _context11.sent;\n                this.data = data.channel;\n                return _context11.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function addMembers(_x9, _x10) {\n        return _addMembers.apply(this, arguments);\n      }\n\n      return addMembers;\n    }()\n    /**\n     * addModerators - add moderators to the channel\n     *\n     * @param {array} members An array of member identifiers\n     * @param {object} message Optional message object for channel members notification\n     * @return {type} The server response\n     */\n\n  }, {\n    key: \"addModerators\",\n    value: function () {\n      var _addModerators = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(members, message) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this.getClient().post(this._channelURL(), {\n                  add_moderators: members,\n                  message: message\n                });\n\n              case 2:\n                data = _context12.sent;\n                this.data = data.channel;\n                return _context12.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function addModerators(_x11, _x12) {\n        return _addModerators.apply(this, arguments);\n      }\n\n      return addModerators;\n    }()\n    /**\n     * inviteMembers - invite members to the channel\n     *\n     * @param {array} members An array of member identifiers\n     * @param {object} message Optional message object for channel members notification\n     * @return {type} The server response\n     */\n\n  }, {\n    key: \"inviteMembers\",\n    value: function () {\n      var _inviteMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(members, message) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.getClient().post(this._channelURL(), {\n                  invites: members,\n                  message: message\n                });\n\n              case 2:\n                data = _context13.sent;\n                this.data = data.channel;\n                return _context13.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function inviteMembers(_x13, _x14) {\n        return _inviteMembers.apply(this, arguments);\n      }\n\n      return inviteMembers;\n    }()\n    /**\n     * removeMembers - remove members from channel\n     *\n     * @param {array} members An array of member identifiers\n     * @param {object} message Optional message object for channel members notification\n     * @return {type} The server response\n     */\n\n  }, {\n    key: \"removeMembers\",\n    value: function () {\n      var _removeMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(members, message) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.getClient().post(this._channelURL(), {\n                  remove_members: members,\n                  message: message\n                });\n\n              case 2:\n                data = _context14.sent;\n                this.data = data.channel;\n                return _context14.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function removeMembers(_x15, _x16) {\n        return _removeMembers.apply(this, arguments);\n      }\n\n      return removeMembers;\n    }()\n    /**\n     * demoteModerators - remove moderator role from channel members\n     *\n     * @param {array} members An array of member identifiers\n     * @param {object} message Optional message object for channel members notification\n     * @return {type} The server response\n     */\n\n  }, {\n    key: \"demoteModerators\",\n    value: function () {\n      var _demoteModerators = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(members, message) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.getClient().post(this._channelURL(), {\n                  demote_moderators: members,\n                  message: message\n                });\n\n              case 2:\n                data = _context15.sent;\n                this.data = data.channel;\n                return _context15.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function demoteModerators(_x17, _x18) {\n        return _demoteModerators.apply(this, arguments);\n      }\n\n      return demoteModerators;\n    }()\n    /**\n     * mute - mutes the current channel\n     * @param {object} \t\t\t\topts expiration or user_id\n     * @return {object} \t\t\tThe server response\n     *\n     * example with expiration:\n     * await channel.mute({expiration: moment.duration(2, 'weeks')});\n     *\n     * example server side:\n     * await channel.mute({user_id: userId});\n     *\n     */\n\n  }, {\n    key: \"mute\",\n    value: function () {\n      var _mute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n        var opts,\n            _args16 = arguments;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                opts = _args16.length > 0 && _args16[0] !== undefined ? _args16[0] : {};\n                _context16.next = 3;\n                return this.getClient().post(this.getClient().baseURL + '/moderation/mute/channel', _objectSpread({\n                  channel_cid: this.cid\n                }, opts));\n\n              case 3:\n                return _context16.abrupt(\"return\", _context16.sent);\n\n              case 4:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function mute() {\n        return _mute.apply(this, arguments);\n      }\n\n      return mute;\n    }()\n    /**\n     * unmute - mutes the current channel\n     * @param {object} opts user_id\n     * @return {object} \t\t\tThe server response\n     *\n     * example server side:\n     * await channel.unmute({user_id: userId});\n     */\n\n  }, {\n    key: \"unmute\",\n    value: function () {\n      var _unmute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n        var opts,\n            _args17 = arguments;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                opts = _args17.length > 0 && _args17[0] !== undefined ? _args17[0] : {};\n                _context17.next = 3;\n                return this.getClient().post(this.getClient().baseURL + '/moderation/unmute/channel', _objectSpread({\n                  channel_cid: this.cid\n                }, opts));\n\n              case 3:\n                return _context17.abrupt(\"return\", _context17.sent);\n\n              case 4:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function unmute() {\n        return _unmute.apply(this, arguments);\n      }\n\n      return unmute;\n    }()\n    /**\n     * muteStatus - returns the mute status for the current channel\n     * @return {object} { muted: true | false, createdAt: Date | null, expiresAt: Date | null}\n     */\n\n  }, {\n    key: \"muteStatus\",\n    value: function muteStatus() {\n      this._checkInitialized();\n\n      return this.getClient()._muteStatus(this.cid);\n    }\n  }, {\n    key: \"sendAction\",\n    value: function sendAction(messageID, formData) {\n      this._checkInitialized();\n\n      if (!messageID) {\n        throw Error(\"Message id is missing\");\n      }\n\n      return this.getClient().post(this.getClient().baseURL + \"/messages/\".concat(messageID, \"/action\"), {\n        message_id: messageID,\n        form_data: formData,\n        id: this.id,\n        type: this.type\n      });\n    }\n    /**\n     * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.\n     *  Call this on every keystroke\n     */\n\n  }, {\n    key: \"keystroke\",\n    value: function () {\n      var _keystroke = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {\n        var now, diff;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                if (this.getConfig().typing_events) {\n                  _context18.next = 2;\n                  break;\n                }\n\n                return _context18.abrupt(\"return\");\n\n              case 2:\n                now = new Date();\n                diff = now - this.lastTypingEvent;\n                this.lastKeyStroke = now;\n                this.isTyping = true; // send a typing.start every 2 seconds\n\n                if (!(diff > 2000)) {\n                  _context18.next = 10;\n                  break;\n                }\n\n                this.lastTypingEvent = new Date();\n                _context18.next = 10;\n                return this.sendEvent({\n                  type: 'typing.start'\n                });\n\n              case 10:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function keystroke() {\n        return _keystroke.apply(this, arguments);\n      }\n\n      return keystroke;\n    }()\n    /**\n     * stopTyping - Sets last typing to null and sends the typing.stop event\n     */\n\n  }, {\n    key: \"stopTyping\",\n    value: function () {\n      var _stopTyping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                if (this.getConfig().typing_events) {\n                  _context19.next = 2;\n                  break;\n                }\n\n                return _context19.abrupt(\"return\");\n\n              case 2:\n                this.lastTypingEvent = null;\n                this.isTyping = false;\n                _context19.next = 6;\n                return this.sendEvent({\n                  type: 'typing.stop'\n                });\n\n              case 6:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function stopTyping() {\n        return _stopTyping.apply(this, arguments);\n      }\n\n      return stopTyping;\n    }()\n    /**\n     * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted\n     *\n     * @return {type} Description\n     */\n\n  }, {\n    key: \"lastMessage\",\n    value: function lastMessage() {\n      // get last 5 messages, sort, return the latest\n      // get a slice of the last 5\n      var min = this.state.messages.length - 5;\n\n      if (min < 0) {\n        min = 0;\n      }\n\n      var max = this.state.messages.length + 1;\n      var messageSlice = this.state.messages.slice(min, max).asMutable(); // sort by pk desc\n\n      messageSlice.sort(function (a, b) {\n        return b.created_at - a.created_at;\n      });\n      var lastMessage;\n\n      if (messageSlice.length > 0) {\n        lastMessage = messageSlice[0];\n      }\n\n      return lastMessage;\n    }\n    /**\n     * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled\n     *\n     * @return {Promise} Description\n     */\n\n  }, {\n    key: \"markRead\",\n    value: function () {\n      var _markRead = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {\n        var data,\n            _args20 = arguments;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                data = _args20.length > 0 && _args20[0] !== undefined ? _args20[0] : {};\n\n                this._checkInitialized();\n\n                if (this.getConfig().read_events) {\n                  _context20.next = 4;\n                  break;\n                }\n\n                return _context20.abrupt(\"return\", Promise.resolve(null));\n\n              case 4:\n                _context20.next = 6;\n                return this.getClient().post(this._channelURL() + '/read', _objectSpread({}, data));\n\n              case 6:\n                return _context20.abrupt(\"return\", _context20.sent);\n\n              case 7:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function markRead() {\n        return _markRead.apply(this, arguments);\n      }\n\n      return markRead;\n    }()\n    /**\n     * clean - Cleans the channel state and fires stop typing if needed\n     */\n\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      if (this.lastKeyStroke) {\n        var now = new Date();\n        var diff = now - this.lastKeyStroke;\n\n        if (diff > 1000 && this.isTyping) {\n          logChatPromiseExecution(this.stopTyping(), 'stop typing event');\n        }\n      }\n\n      this.state.clean();\n    }\n    /**\n     * watch - Loads the initial channel state and watches for changes\n     *\n     * @param {object} options additional options for the query endpoint\n     *\n     * @return {object} The server response\n     */\n\n  }, {\n    key: \"watch\",\n    value: function () {\n      var _watch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(options) {\n        var defaultOptions, combined, state;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                defaultOptions = {\n                  state: true,\n                  watch: true,\n                  presence: false\n                }; // Make sure we wait for the connect promise if there is a pending one\n\n                _context21.next = 3;\n                return this.getClient().wsPromise;\n\n              case 3:\n                if (!this.getClient()._hasConnectionID()) {\n                  defaultOptions.watch = false;\n                }\n\n                combined = _objectSpread({}, defaultOptions, {}, options);\n                _context21.next = 7;\n                return this.query(combined);\n\n              case 7:\n                state = _context21.sent;\n                this.initialized = true;\n\n                this._initializeState(state);\n\n                this.data = state.channel;\n\n                this._client.logger('info', \"channel:watch() - started watching channel \".concat(this.cid), {\n                  tags: ['channel'],\n                  channel: this\n                });\n\n                return _context21.abrupt(\"return\", state);\n\n              case 13:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function watch(_x19) {\n        return _watch.apply(this, arguments);\n      }\n\n      return watch;\n    }()\n    /**\n     * stopwatching - Stops watching the channel\n     *\n     * @return {object} The server response\n     */\n\n  }, {\n    key: \"stopWatching\",\n    value: function () {\n      var _stopWatching = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return this.getClient().post(this._channelURL() + '/stop-watching', {});\n\n              case 2:\n                response = _context22.sent;\n\n                this._client.logger('info', \"channel:watch() - stopped watching channel \".concat(this.cid), {\n                  tags: ['channel'],\n                  channel: this\n                });\n\n                return _context22.abrupt(\"return\", response);\n\n              case 5:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function stopWatching() {\n        return _stopWatching.apply(this, arguments);\n      }\n\n      return stopWatching;\n    }()\n    /**\n     * getReplies - List the message replies for a parent message\n     *\n     * @param {type} parent_id The message parent id, ie the top of the thread\n     * @param {type} options   Pagination params, ie {limit:10, idlte: 10}\n     *\n     * @return {type} A response with a list of messages\n     */\n\n  }, {\n    key: \"getReplies\",\n    value: function () {\n      var _getReplies = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(parent_id, options) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                _context23.next = 2;\n                return this.getClient().get(this.getClient().baseURL + \"/messages/\".concat(parent_id, \"/replies\"), _objectSpread({}, options));\n\n              case 2:\n                data = _context23.sent; // add any messages to our thread state\n\n                if (data.messages) {\n                  this.state.addMessagesSorted(data.messages);\n                }\n\n                return _context23.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function getReplies(_x20, _x21) {\n        return _getReplies.apply(this, arguments);\n      }\n\n      return getReplies;\n    }()\n    /**\n     * getReactions - List the reactions, supports pagination\n     *\n     * @param {string} message_id The message id\n     * @param {object} options    The pagination options\n     *\n     * @return {object} Server response\n     */\n\n  }, {\n    key: \"getReactions\",\n    value: function getReactions(message_id, options) {\n      return this.getClient().get(this.getClient().baseURL + \"/messages/\".concat(message_id, \"/reactions\"), _objectSpread({}, options));\n    }\n    /**\n     * getMessagesById - Retrieves a list of messages by ID\n     *\n     * @param {string} messageIds The ids of the messages to retrieve from this channel\n     *\n     * @return {object} Server response\n     */\n\n  }, {\n    key: \"getMessagesById\",\n    value: function getMessagesById(messageIds) {\n      return this.getClient().get(this._channelURL() + '/messages', {\n        ids: messageIds.join(',')\n      });\n    }\n    /**\n     * lastRead - returns the last time the user marked the channel as read if the user never marked the channel as read, this will return null\n     * @return {date}\n     */\n\n  }, {\n    key: \"lastRead\",\n    value: function lastRead() {\n      this._checkInitialized();\n\n      return this.state.read[this.getClient().userID] ? this.state.read[this.getClient().userID].last_read : null;\n    }\n    /**\n     * countUnread - Count the number of messages with a date thats newer than the last read timestamp\n     *\n     * @param [date] lastRead the time that the user read a message, defaults to current user's read state\n     *\n     * @return {int} Unread count\n     */\n\n  }, {\n    key: \"countUnread\",\n    value: function countUnread(lastRead) {\n      if (lastRead == null) {\n        lastRead = this.lastRead();\n      }\n\n      var count = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.state.messages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var m = _step.value;\n\n          if (this.getClient().userID === m.user.id) {\n            continue;\n          }\n\n          if (lastRead == null) {\n            count++;\n            continue;\n          }\n\n          if (m.created_at > lastRead) {\n            count++;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return count;\n    }\n    /**\n     * countUnread - Count the number of unread messages mentioning the current user\n     *\n     * @return {int} Unread mentions count\n     */\n\n  }, {\n    key: \"countUnreadMentions\",\n    value: function countUnreadMentions() {\n      var _this2 = this;\n\n      var lastRead = this.lastRead();\n      var count = 0;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.state.messages[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var m = _step2.value;\n\n          if (this.getClient().userID === m.user.id) {\n            continue;\n          }\n\n          if (lastRead == null) {\n            count++;\n            continue;\n          }\n\n          if (m.created_at > lastRead) {\n            (function () {\n              var userID = _this2.getClient().userID;\n\n              if (m.mentioned_users.findIndex(function (u) {\n                return u.id === userID;\n              }) !== -1) {\n                count++;\n              }\n            })();\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return count;\n    }\n    /**\n     * create - Creates a new channel\n     *\n     * @return {type} The Server Response\n     */\n\n  }, {\n    key: \"query\",\n\n    /**\n     * query - Query the API, get messages, members or other channel fields\n     *\n     * @param {object} options The query options\n     *\n     * @return {object} Returns a query response\n     */\n    value: function () {\n      var _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(options) {\n        var queryURL, state;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return this.getClient().wsPromise;\n\n              case 2:\n                queryURL = \"\".concat(this.getClient().baseURL, \"/channels/\").concat(this.type);\n\n                if (this.id) {\n                  queryURL += \"/\".concat(this.id);\n                }\n\n                _context24.next = 6;\n                return this.getClient().post(queryURL + '/query', _objectSpread({\n                  data: this._data,\n                  state: true\n                }, options));\n\n              case 6:\n                state = _context24.sent; // update the channel id if it was missing\n\n                if (!this.id) {\n                  this.id = state.channel.id;\n                  this.cid = state.channel.cid; // set the channel as active...\n\n                  if (!(this.cid in this.getClient().activeChannels)) {\n                    this.getClient().activeChannels[this.cid] = this;\n                  }\n                }\n\n                this.getClient()._addChannelConfig(state); // add any messages to our channel state\n\n\n                this._initializeState(state);\n\n                return _context24.abrupt(\"return\", state);\n\n              case 11:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function query(_x22) {\n        return _query.apply(this, arguments);\n      }\n\n      return query;\n    }()\n    /**\n     * banUser - Bans a user from a channel\n     *\n     * @param targetUserID\n     * @param options\n     * @returns {Promise<*>}\n     */\n\n  }, {\n    key: \"banUser\",\n    value: function () {\n      var _banUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(targetUserID, options) {\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                this._checkInitialized();\n\n                _context25.next = 3;\n                return this.getClient().banUser(targetUserID, _objectSpread({}, options, {\n                  type: this.type,\n                  id: this.id\n                }));\n\n              case 3:\n                return _context25.abrupt(\"return\", _context25.sent);\n\n              case 4:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function banUser(_x23, _x24) {\n        return _banUser.apply(this, arguments);\n      }\n\n      return banUser;\n    }()\n    /**\n     * hides the channel from queryChannels for the user until a message is added\n     * If clearHistory is set to true - all messages will be removed for the user\n     *\n     * @param userId\n     * @param clearHistory\n     * @returns {Promise<*>}\n     */\n\n  }, {\n    key: \"hide\",\n    value: function () {\n      var _hide = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26() {\n        var userId,\n            clearHistory,\n            _args26 = arguments;\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                userId = _args26.length > 0 && _args26[0] !== undefined ? _args26[0] : null;\n                clearHistory = _args26.length > 1 && _args26[1] !== undefined ? _args26[1] : false;\n\n                this._checkInitialized();\n\n                _context26.next = 5;\n                return this.getClient().post(\"\".concat(this._channelURL(), \"/hide\"), {\n                  user_id: userId,\n                  clear_history: clearHistory\n                });\n\n              case 5:\n                return _context26.abrupt(\"return\", _context26.sent);\n\n              case 6:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function hide() {\n        return _hide.apply(this, arguments);\n      }\n\n      return hide;\n    }()\n    /**\n     * removes the hidden status for a channel\n     *\n     * @param userId\n     * @returns {Promise<*>}\n     */\n\n  }, {\n    key: \"show\",\n    value: function () {\n      var _show = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27() {\n        var userId,\n            _args27 = arguments;\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                userId = _args27.length > 0 && _args27[0] !== undefined ? _args27[0] : null;\n\n                this._checkInitialized();\n\n                _context27.next = 4;\n                return this.getClient().post(\"\".concat(this._channelURL(), \"/show\"), {\n                  user_id: userId\n                });\n\n              case 4:\n                return _context27.abrupt(\"return\", _context27.sent);\n\n              case 5:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function show() {\n        return _show.apply(this, arguments);\n      }\n\n      return show;\n    }()\n    /**\n     * banUser - Removes the bans for a user on a channel\n     *\n     * @param targetUserID\n     * @returns {Promise<*>}\n     */\n\n  }, {\n    key: \"unbanUser\",\n    value: function () {\n      var _unbanUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(targetUserID) {\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                this._checkInitialized();\n\n                _context28.next = 3;\n                return this.getClient().unbanUser(targetUserID, {\n                  type: this.type,\n                  id: this.id\n                });\n\n              case 3:\n                return _context28.abrupt(\"return\", _context28.sent);\n\n              case 4:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n\n      function unbanUser(_x25) {\n        return _unbanUser.apply(this, arguments);\n      }\n\n      return unbanUser;\n    }()\n    /**\n     * on - Listen to events on this channel.\n     *\n     * channel.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n     * or\n     * channel.on(event => {console.log(event.type)})\n     *\n     * @param {string} callbackOrString  The event type to listen for (optional)\n     * @param {function} callbackOrNothing The callback to call\n     *\n     * @return {type} Description\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(callbackOrString, callbackOrNothing) {\n      var key = callbackOrNothing ? callbackOrString : 'all';\n      var valid = isValidEventType(key);\n\n      if (!valid) {\n        throw Error(\"Invalid event type \".concat(key));\n      }\n\n      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\n      if (!(key in this.listeners)) {\n        this.listeners[key] = [];\n      }\n\n      this._client.logger('info', \"Attaching listener for \".concat(key, \" event on channel \").concat(this.cid), {\n        tags: ['event', 'channel'],\n        channel: this\n      });\n\n      this.listeners[key].push(callback);\n    }\n    /**\n     * off - Remove the event handler\n     *\n     */\n\n  }, {\n    key: \"off\",\n    value: function off(callbackOrString, callbackOrNothing) {\n      var key = callbackOrNothing ? callbackOrString : 'all';\n      var valid = isValidEventType(key);\n\n      if (!valid) {\n        throw Error(\"Invalid event type \".concat(key));\n      }\n\n      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\n      if (!(key in this.listeners)) {\n        this.listeners[key] = [];\n      }\n\n      this._client.logger('info', \"Removing listener for \".concat(key, \" event from channel \").concat(this.cid), {\n        tags: ['event', 'channel'],\n        channel: this\n      });\n\n      this.listeners[key] = this.listeners[key].filter(function (value) {\n        return value !== callback;\n      });\n    }\n  }, {\n    key: \"_handleChannelEvent\",\n    value: function _handleChannelEvent(event) {\n      var channel = this;\n\n      this._client.logger('info', \"channel:_handleChannelEvent - Received event of type { \".concat(event.type, \" } on \").concat(this.cid), {\n        tags: ['event', 'channel'],\n        channel: this\n      });\n\n      var s = channel.state;\n\n      switch (event.type) {\n        case 'typing.start':\n          s.typing = s.typing.set(event.user.id, Immutable(event));\n          break;\n\n        case 'typing.stop':\n          s.typing = s.typing.without(event.user.id);\n          break;\n\n        case 'message.read':\n          s.read = s.read.set(event.user.id, Immutable({\n            user: _objectSpread({}, event.user),\n            last_read: event.received_at\n          }));\n          break;\n\n        case 'user.watching.start':\n        case 'user.updated':\n          s.watchers = s.watchers.set(event.user.id, Immutable(event.user));\n          break;\n\n        case 'user.watching.stop':\n          s.watchers = s.watchers.without(event.user.id);\n          break;\n\n        case 'message.new':\n        case 'message.updated':\n        case 'message.deleted':\n          s.addMessageSorted(event.message);\n          break;\n\n        case 'channel.truncated':\n          s.clearMessages();\n          break;\n\n        case 'member.added':\n        case 'member.updated':\n          s.members = s.members.set(event.member.user_id, Immutable(event.member));\n          break;\n\n        case 'member.removed':\n          s.members = s.members.without(event.user.id);\n          break;\n\n        case 'channel.updated':\n          channel.data = Immutable(event.channel);\n          break;\n\n        case 'reaction.new':\n          s.addReaction(event.reaction, event.message);\n          break;\n\n        case 'reaction.deleted':\n          s.removeReaction(event.reaction, event.message);\n          break;\n\n        case 'channel.hidden':\n          if (event.clear_history) {\n            s.clearMessages();\n          }\n\n          break;\n\n        default:\n      } // any event can send over the online count\n\n\n      if (event.watcher_count !== undefined) {\n        channel.state.watcher_count = event.watcher_count;\n      }\n    }\n  }, {\n    key: \"_checkInitialized\",\n    value: function _checkInitialized() {\n      if (!this.initialized && !this.getClient()._isUsingServerAuth()) {\n        throw Error(\"Channel \".concat(this.cid, \" hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve\"));\n      }\n    }\n  }, {\n    key: \"_initializeState\",\n    value: function _initializeState(state) {\n      // add the Users\n      if (state.members) {\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = state.members[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var m = _step3.value;\n            this.getClient().state.updateUserReference(m.user, this.cid);\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n      }\n\n      this.state.membership = Immutable(state.membership ? state.membership : {});\n\n      if (state.watchers) {\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = state.watchers[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var w = _step4.value;\n            this.getClient().state.updateUserReference(w.user, this.cid);\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n      } // immutable list of maps\n\n\n      var messages = state.messages || [];\n\n      if (!this.state.messages) {\n        this.state.messages = Immutable([]);\n      }\n\n      this.state.addMessagesSorted(messages, true);\n      this.state.watcher_count = state.watcher_count; // convert the arrays into objects for easier syncing...\n\n      if (state.watchers) {\n        var _iteratorNormalCompletion5 = true;\n        var _didIteratorError5 = false;\n        var _iteratorError5 = undefined;\n\n        try {\n          for (var _iterator5 = state.watchers[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n            var watcher = _step5.value;\n            this.state.watchers = this.state.watchers.set(watcher.id, watcher);\n          }\n        } catch (err) {\n          _didIteratorError5 = true;\n          _iteratorError5 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n              _iterator5.return();\n            }\n          } finally {\n            if (_didIteratorError5) {\n              throw _iteratorError5;\n            }\n          }\n        }\n      } // initialize read state to last message or current time if the channel is empty\n      // if the user is a member, this value will be overwritten later on otherwise this ensures\n      // that eveything up to this point is not marked as unread\n\n\n      if (this.getClient().userID != null) {\n        var last_read = this.state.last_message_at != null ? this.state.last_message_at : new Date();\n        this.state.read = this.state.read.set(this.getClient().user.id, {\n          last_read: last_read\n        });\n      } // apply read state if part of the state\n\n\n      if (state.read) {\n        var _iteratorNormalCompletion6 = true;\n        var _didIteratorError6 = false;\n        var _iteratorError6 = undefined;\n\n        try {\n          for (var _iterator6 = state.read[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n            var read = _step6.value;\n\n            var parsedRead = _extends(_objectSpread({}, read));\n\n            parsedRead.last_read = new Date(read.last_read);\n            this.state.read = this.state.read.set(read.user.id, parsedRead);\n          }\n        } catch (err) {\n          _didIteratorError6 = true;\n          _iteratorError6 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n              _iterator6.return();\n            }\n          } finally {\n            if (_didIteratorError6) {\n              throw _iteratorError6;\n            }\n          }\n        }\n      }\n\n      if (state.members) {\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n          for (var _iterator7 = state.members[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n            var _m = _step7.value;\n            this.state.members = this.state.members.set(_m.user.id, _m);\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n              _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_disconnect\",\n    value: function _disconnect() {\n      this._client.logger('info', \"channel:disconnect() - Disconnecting the channel \".concat(this.cid), {\n        tags: ['connection', 'channel'],\n        channel: this\n      });\n\n      this.disconnected = true;\n    }\n  }]);\n\n  return Channel;\n}();\n/**\n * ClientState - A container class for the client state.\n */\n\n\nvar ClientState = /*#__PURE__*/function () {\n  function ClientState() {\n    _classCallCheck(this, ClientState); // show the status for a certain user...\n    // ie online, offline etc\n\n\n    this.users = Immutable({}); // store which channels contain references to the specified user...\n\n    this.userChannelReferences = {};\n  }\n\n  _createClass(ClientState, [{\n    key: \"updateUsers\",\n    value: function updateUsers(users) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = users[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var user = _step.value;\n          this.updateUser(user);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"updateUser\",\n    value: function updateUser(user) {\n      if (user != null) {\n        this.users = this.users.set(user.id, Immutable(user));\n      }\n    }\n  }, {\n    key: \"updateUserReference\",\n    value: function updateUserReference(user, channelID) {\n      if (user == null) {\n        return;\n      }\n\n      this.updateUser(user);\n\n      if (!this.userChannelReferences[user.id]) {\n        this.userChannelReferences[user.id] = {};\n      }\n\n      this.userChannelReferences[user.id][channelID] = true;\n    }\n  }]);\n\n  return ClientState;\n}();\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */\n\n\nvar StableWSConnection = /*#__PURE__*/function () {\n  function StableWSConnection(_ref) {\n    var _this = this;\n\n    var wsURL = _ref.wsURL,\n        clientID = _ref.clientID,\n        userID = _ref.userID,\n        messageCallback = _ref.messageCallback,\n        recoverCallback = _ref.recoverCallback,\n        eventCallback = _ref.eventCallback,\n        logger = _ref.logger;\n\n    _classCallCheck(this, StableWSConnection);\n\n    _defineProperty(this, \"onlineStatusChanged\", function (event) {\n      if (event.type === 'offline') {\n        // mark the connection as down\n        _this.logger('info', 'connection:onlineStatusChanged() - Status changing to offline', {\n          tags: ['connection']\n        });\n\n        _this._setHealth(false);\n      } else if (event.type === 'online') {\n        // retry right now...\n        // We check this.isHealthy, not sure if it's always\n        // smart to create a new WS connection if the old one is still up and running.\n        // it's possible we didnt miss any messages, so this process is just expensive and not needed.\n        _this.logger('info', \"connection:onlineStatusChanged() - Status changing to online. isHealthy: \".concat(_this.isHealthy), {\n          tags: ['connection']\n        });\n\n        if (!_this.isHealthy) {\n          _this._reconnect(10);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onopen\", function (wsID) {\n      if (_this.wsID !== wsID) return;\n\n      _this.logger('info', 'connection:onopen() - onopen callback', {\n        tags: ['connection'],\n        wsID: wsID\n      }); // set healthy..\n\n\n      _this._setHealth(true);\n    });\n\n    _defineProperty(this, \"onmessage\", function (wsID, event) {\n      if (_this.wsID !== wsID) return; // we wait till the first message before we consider the connection open..\n      // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n      // after that a ws.onclose..\n\n      if (!_this.isResolved) {\n        _this.resolvePromise(event);\n      } // trigger the event..\n\n\n      _this.lastEvent = new Date();\n\n      _this.logger('info', 'connection:onmessage() - onmessage callback', {\n        tags: ['connection'],\n        event: event,\n        wsID: wsID\n      });\n\n      _this.messageCallback(event);\n    });\n\n    _defineProperty(this, \"onclose\", function (wsID, event) {\n      _this.logger('info', 'connection:onclose() - onclose callback', {\n        tags: ['connection'],\n        event: event,\n        wsID: wsID\n      });\n\n      if (_this.wsID !== wsID) return;\n\n      if (event.code === 1000) {\n        // this is a permanent error raised by stream..\n        // usually caused by invalid auth details\n        var error = new Error(\"WS connection reject with error \".concat(event.reason));\n        error.reason = event.reason;\n\n        _this.rejectPromise(error);\n\n        _this.logger('info', \"connection:onclose() - WS connection reject with error \".concat(event.reason), {\n          tags: ['connection'],\n          event: event\n        });\n      } else {\n        _this.consecutiveFailures += 1;\n        _this.totalFailures += 1;\n\n        _this._setHealth(false);\n\n        _this.rejectPromise(_this._errorFromWSEvent(event));\n\n        _this.logger('info', \"connection:onclose() - WS connection closed. Calling reconnect ...\", {\n          tags: ['connection'],\n          event: event\n        }); // reconnect if its an abnormal failure\n\n\n        _this._reconnect();\n      }\n    });\n\n    _defineProperty(this, \"onerror\", function (wsID, event) {\n      if (_this.wsID !== wsID) return;\n      _this.consecutiveFailures += 1;\n      _this.totalFailures += 1;\n\n      _this._setHealth(false);\n\n      _this.rejectPromise(_this._errorFromWSEvent(event));\n\n      _this.logger('info', \"connection:onerror() - WS connection resulted into error\", {\n        tags: ['connection'],\n        event: event\n      });\n\n      _this._reconnect();\n    });\n\n    _defineProperty(this, \"_setHealth\", function (healthy) {\n      if (healthy && !_this.isHealthy) {\n        // yee we are online:\n        _this.isHealthy = true;\n\n        _this.eventCallback({\n          type: 'connection.changed',\n          online: true\n        });\n      }\n\n      if (!healthy && _this.isHealthy) {\n        // bummer we are offline\n        _this.isHealthy = false;\n        setTimeout(function () {\n          if (!_this.isHealthy) {\n            _this.eventCallback({\n              type: 'connection.changed',\n              online: false\n            });\n          }\n        }, 5000);\n      }\n    });\n\n    _defineProperty(this, \"_errorFromWSEvent\", function (event) {\n      _this.logger('error', \"connection:_errorFromWSEvent() - WS failed with code \".concat(event.code), {\n        tags: ['connection'],\n        event: event\n      });\n\n      var error = new Error(\"WS failed with code \".concat(event.code));\n      error.code = event.code;\n      error.isWSFailure = true;\n      return error;\n    });\n\n    _defineProperty(this, \"_listenForConnectionChanges\", function () {\n      if (typeof window !== 'undefined' && window != null && window.addEventListener != null) {\n        window.addEventListener('offline', _this.onlineStatusChanged);\n        window.addEventListener('online', _this.onlineStatusChanged);\n      }\n    });\n\n    _defineProperty(this, \"_removeConnectionListeners\", function () {\n      if (typeof window !== 'undefined' && window != null && window.addEventListener != null) {\n        window.removeEventListener('offline', _this.onlineStatusChanged);\n        window.removeEventListener('online', _this.onlineStatusChanged);\n      }\n    });\n\n    _defineProperty(this, \"_setupConnectionPromise\", function () {\n      var that = _this;\n      _this.isResolved = false;\n      /** a promise that is resolved once ws.open is called */\n\n      _this.connectionOpen = new Promise(function (resolve, reject) {\n        that.resolvePromise = resolve;\n        that.rejectPromise = reject;\n      }).then(function (e) {\n        var data = JSON.parse(e.data);\n\n        if (data.error != null) {\n          throw new Error(JSON.stringify(data.error));\n        }\n\n        return data;\n      });\n    });\n\n    this.wsURL = wsURL;\n    this.clientID = clientID;\n    this.userID = userID;\n    /** consecutive failures influence the duration of the timeout */\n\n    this.consecutiveFailures = 0;\n    /** keep track of the total number of failures */\n\n    this.totalFailures = 0;\n    /** We only make 1 attempt to reconnect at the same time.. */\n\n    this.isConnecting = false;\n    /** Boolean that indicates if we have a working connection to the server */\n\n    this.isHealthy = false;\n    /** Callback when the connection fails and recovers */\n\n    this.recoverCallback = recoverCallback;\n    this.messageCallback = messageCallback;\n    this.eventCallback = eventCallback;\n    this.logger = logger;\n    /** Incremented when a new WS connection is made */\n\n    this.wsID = 1;\n    /** Store the last event time for health checks */\n\n    this.lastEvent = null;\n    /** Send a health check message every 30 seconds */\n\n    this.healthCheckInterval = 30 * 1000;\n    /** Every second we verify that we didn't miss any health checks */\n\n    this.monitorInterval = 1 * 1000;\n\n    this._listenForConnectionChanges();\n  }\n  /**\n   * connect - Connect to the WS URL\n   *\n   * @return {promise} Promise that completes once the first health check message is received\n   */\n\n\n  _createClass(StableWSConnection, [{\n    key: \"connect\",\n    value: function () {\n      var _connect2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var healthCheck;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.isConnecting) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw Error(\"You've called connect twice, can only attempt 1 connection at the time\");\n\n              case 2:\n                _context.prev = 2;\n                this.isConnecting = true;\n                _context.next = 6;\n                return this._connect();\n\n              case 6:\n                healthCheck = _context.sent;\n                this.isConnecting = false;\n                this.consecutiveFailures = 0;\n\n                this._startMonitor();\n\n                this._startHealthCheck();\n\n                this.logger('info', \"connection:connect() - Established ws connection with healthcheck: \".concat(healthCheck), {\n                  tags: ['connection']\n                });\n                return _context.abrupt(\"return\", healthCheck);\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](2);\n                this.isConnecting = false;\n\n                if (_context.t0.isWSFailure) {\n                  _context.next = 20;\n                  break;\n                }\n\n                throw _context.t0;\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 15]]);\n      }));\n\n      function connect() {\n        return _connect2.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n    /**\n     * disconnect - Disconnect the connection and doesn't recover...\n     *\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var _this2 = this;\n\n      this.logger('info', \"connection:disconnect() - Closing the websocket connection for wsID \".concat(this.wsID), {\n        tags: ['connection']\n      });\n      this.wsID += 1; // start by removing all the listeners\n\n      if (this.healthCheckIntervalRef) {\n        clearInterval(this.healthCheckIntervalRef);\n      }\n\n      if (this.monitorIntervalRef) {\n        clearInterval(this.monitorIntervalRef);\n      }\n\n      this._removeConnectionListeners();\n\n      this.isHealthy = false; // remove ws handlers...\n\n      if (this.ws && this.ws.removeAllListeners) {\n        this.ws.removeAllListeners();\n      }\n\n      var isClosedPromise; // and finally close...\n      // Assigning to local here because we will remove it from this before the\n      // promise resolves.\n\n      var ws = this.ws;\n\n      if (ws && ws.close && ws.readyState === ws.OPEN) {\n        isClosedPromise = new Promise(function (resolve) {\n          ws.onclose = function () {\n            _this2.logger('info', \"connection:disconnect() - resolving isClosedPromise\", {\n              tags: ['connection']\n            });\n\n            resolve();\n          };\n        });\n        this.logger('info', \"connection:disconnect() - Manually closed connection by calling client.disconnect()\", {\n          tags: ['connection']\n        });\n        ws.close(1000, 'Manually closed connection by calling client.disconnect()');\n      } else {\n        this.logger('info', \"connection:disconnect() - ws connection doesn't exist or it is already closed.\", {\n          tags: ['connection']\n        });\n        isClosedPromise = Promise.resolve();\n      }\n\n      delete this.ws;\n      return isClosedPromise;\n    }\n    /**\n     * _connect - Connect to the WS endpoint\n     *\n     * @return {promise} Promise that completes once the first health check message is received\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function () {\n      var _connect3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this._setupConnectionPromise();\n\n                this.ws = new isoWS(this.wsURL);\n                this.ws.onopen = this.onopen.bind(this, this.wsID);\n                this.ws.onclose = this.onclose.bind(this, this.wsID);\n                this.ws.onerror = this.onerror.bind(this, this.wsID);\n                this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n                _context2.next = 8;\n                return this.connectionOpen;\n\n              case 8:\n                response = _context2.sent;\n                this.connectionID = response.connection_id;\n                return _context2.abrupt(\"return\", response);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _connect() {\n        return _connect3.apply(this, arguments);\n      }\n\n      return _connect;\n    }()\n    /**\n     * _reconnect - Description\n     *\n     * @param {int} interval number of ms to wait before connecting\n     */\n\n  }, {\n    key: \"_reconnect\",\n    value: function () {\n      var _reconnect2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(interval) {\n        var open;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.logger('info', 'connection:_reconnect() - Initiating the reconnect', {\n                  tags: ['connection']\n                }); // only allow 1 connection at the time\n\n                if (!(this.isConnecting || this.isHealthy)) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                this.logger('info', 'connection:_reconnect() - Abort (1) since already connecting or healthy', {\n                  tags: ['connection']\n                });\n                return _context3.abrupt(\"return\");\n\n              case 4:\n                // reconnect in case of on error or on close\n                // also reconnect if the health check cycle fails\n                if (interval === undefined) {\n                  interval = this._retryInterval();\n                } // reconnect, or try again after a little while...\n\n\n                _context3.next = 7;\n                return sleep(interval);\n\n              case 7:\n                if (!(this.isConnecting || this.isHealthy)) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                this.logger('info', 'connection:_reconnect() - Abort (2) since already connecting or healthy', {\n                  tags: ['connection']\n                });\n                return _context3.abrupt(\"return\");\n\n              case 10:\n                this.isConnecting = true; // cleanup the old connection\n\n                this.logger('info', 'connection:_reconnect() - Destroying current WS connection', {\n                  tags: ['connection']\n                });\n\n                this._destroyCurrentWSConnection();\n\n                _context3.prev = 13;\n                _context3.next = 16;\n                return this._connect();\n\n              case 16:\n                open = _context3.sent;\n\n                if (!this.recoverCallback) {\n                  _context3.next = 22;\n                  break;\n                }\n\n                this.logger('info', 'connection:_reconnect() - Waiting for recoverCallBack', {\n                  tags: ['connection']\n                });\n                _context3.next = 21;\n                return this.recoverCallback(open);\n\n              case 21:\n                this.logger('info', 'connection:_reconnect() - Finished recoverCallBack', {\n                  tags: ['connection']\n                });\n\n              case 22:\n                this.isConnecting = false;\n                this.consecutiveFailures = 0;\n                _context3.next = 30;\n                break;\n\n              case 26:\n                _context3.prev = 26;\n                _context3.t0 = _context3[\"catch\"](13);\n                this.isConnecting = false; // reconnect on WS failures, dont reconnect if there is a code bug\n\n                if (_context3.t0.isWSFailure) {\n                  this.logger('info', 'connection:_reconnect() - WS failure, so going to try to reconnect', {\n                    tags: ['connection']\n                  });\n\n                  this._reconnect();\n                }\n\n              case 30:\n                this.logger('info', 'connection:_reconnect() - == END ==', {\n                  tags: ['connection']\n                });\n\n              case 31:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[13, 26]]);\n      }));\n\n      function _reconnect(_x) {\n        return _reconnect2.apply(this, arguments);\n      }\n\n      return _reconnect;\n    }()\n    /**\n     * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n     *\n     * @param {object} event Event with type online or offline\n     *\n     */\n\n  }, {\n    key: \"_destroyCurrentWSConnection\",\n\n    /**\n     * _destroyCurrentWSConnection - Removes the current WS connnection\n     *\n     */\n    value: function _destroyCurrentWSConnection() {\n      // increment the ID, meaning we will ignore all messages from the old\n      // ws connection from now on.\n      this.wsID += 1;\n\n      try {\n        if (this.ws && this.ws.removeAllListeners) {\n          this.ws.removeAllListeners();\n        }\n\n        if (this.ws && this.ws.close) {\n          this.ws.close();\n        }\n      } catch (e) {// we dont care\n      }\n    }\n    /**\n     * _retryInterval - A retry interval which increases after consecutive failures\n     *\n     * @return {int} Duration to wait in milliseconds\n     */\n\n  }, {\n    key: \"_retryInterval\",\n    value: function _retryInterval() {\n      // try to reconnect in 0-5 seconds (random to spread out the load from failures)\n      var max = Math.min(500 + this.consecutiveFailures * 2000, 25000);\n      var min = Math.min(Math.max(250, (this.consecutiveFailures - 1) * 2000), 25000);\n      return Math.floor(Math.random() * (max - min) + min);\n    }\n    /**\n     * _setupPromise - sets up the this.connectOpen promise\n     */\n\n  }, {\n    key: \"_startHealthCheck\",\n\n    /**\n     * _startHealthCheck - Sends a message every 30s or so to see if the ws connection still works\n     *\n     */\n    value: function _startHealthCheck() {\n      var that = this; // 30 seconds is the recommended interval (messenger uses this)\n\n      this.healthCheckIntervalRef = setInterval(function () {\n        // send the healthcheck.., server replies with a health check event\n        var data = [{\n          type: 'health.check',\n          client_id: that.clientID,\n          user_id: that.userID\n        }]; // try to send on the connection\n\n        try {\n          that.ws.send(JSON.stringify(data));\n        } catch (e) {// error will already be detected elsewhere\n        }\n      }, that.healthCheckInterval);\n    }\n    /**\n     * _startMonitor - Verifies we didn't miss any events. Marks the connection as failed in case we did.\n     *\n     */\n\n  }, {\n    key: \"_startMonitor\",\n    value: function _startMonitor() {\n      var _this3 = this;\n\n      var that = this;\n      this.monitorIntervalRef = setInterval(function () {\n        var now = new Date(); // means we missed a health check\n\n        if (now - that.lastEvent > _this3.healthCheckInterval + 10 * 1000) {\n          _this3.logger('info', 'connection:_startMonitor - going to reconnect', {\n            tags: ['connection']\n          });\n\n          that._setHealth(false);\n\n          that._reconnect();\n        }\n      }, that.monitorInterval);\n    }\n  }]);\n\n  return StableWSConnection;\n}();\n\nvar jwt = null;\nvar crypto = null;\n\nvar map = function map(arr, callback) {\n  var res = [];\n  var kValue, mappedValue;\n\n  for (var k = 0, len = arr.length; k < len; k++) {\n    if (typeof arr === 'string' && !!arr.charAt(k)) {\n      kValue = arr.charAt(k);\n      mappedValue = callback(kValue, k, arr);\n      res[k] = mappedValue;\n    } else if (typeof arr !== 'string' && k in arr) {\n      kValue = arr[k];\n      mappedValue = callback(kValue, k, arr);\n      res[k] = mappedValue;\n    }\n  }\n\n  return res;\n};\n\nfunction encodeBase64(data) {\n  return fromByteArray(map(data, function (char) {\n    return char.charCodeAt(0);\n  }));\n} // base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\n\n\nfunction decodeBase64(s) {\n  var e = {},\n      w = String.fromCharCode,\n      L = s.length;\n  var i,\n      b = 0,\n      c,\n      x,\n      l = 0,\n      a,\n      r = '';\n  var A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n  for (i = 0; i < 64; i++) {\n    e[A.charAt(i)] = i;\n  }\n\n  for (x = 0; x < L; x++) {\n    c = e[s.charAt(x)];\n    b = (b << 6) + c;\n    l += 6;\n\n    while (l >= 8) {\n      ((a = b >>> (l -= 8) & 0xff) || x < L - 2) && (r += w(a));\n    }\n  }\n\n  return r;\n}\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$1(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$1(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * Creates the JWT token that can be used for a UserSession\n * @method JWTUserSessionToken\n * @memberof signing\n * @private\n * @param {string} apiSecret - API Secret key\n * @param {string} userId - The user_id key in the JWT payload\n * @param {object} [extraData] - Extra that should be part of the JWT token\n * @param {object} [jwtOptions] - Options that can be past to jwt.sign\n * @return {string} JWT Token\n */\n\n\nfunction JWTUserToken(apiSecret, userId) {\n  var extraData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var jwtOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  if (typeof userId !== 'string') {\n    throw new TypeError('userId should be a string');\n  }\n\n  var payload = _objectSpread$1({\n    user_id: userId\n  }, extraData); // make sure we return a clear error when jwt is shimmed (ie. browser build)\n\n\n  {\n    throw Error(\"Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.\");\n  }\n\n  var opts = _extends({\n    algorithm: 'HS256',\n    noTimestamp: true\n  }, jwtOptions);\n\n  return jwt.sign(payload, apiSecret, opts);\n}\n\nfunction JWTServerToken(apiSecret) {\n  var jwtOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var payload = {\n    server: true\n  };\n\n  var opts = _extends({\n    algorithm: 'HS256',\n    noTimestamp: true\n  }, jwtOptions);\n\n  return jwt.sign(payload, apiSecret, opts);\n}\n/**\n * @return {string}\n */\n\n\nfunction UserFromToken(token) {\n  var fragments = token.split('.');\n\n  if (fragments.length !== 3) {\n    return '';\n  }\n\n  var b64Payload = fragments[1];\n  var payload = decodeBase64(b64Payload);\n  var data = JSON.parse(payload);\n  return data.user_id;\n}\n/**\n *\n * @param userId {string} the id of the user\n * @return {string}\n */\n\n\nfunction DevToken(userId) {\n  return ['eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', //{\"alg\": \"HS256\", \"typ\": \"JWT\"}\n  encodeBase64(JSON.stringify({\n    user_id: userId\n  })), 'devtoken' // hardcoded signature\n  ].join('.');\n}\n/**\n *\n * @param body {string} the signed message\n * @param secret {string} the shared secret used to generate the signature (Stream API secret)\n * @param signature {string} the signature to validate\n * @return {boolean}\n */\n\n\nfunction CheckSignature(body, secret, signature) {\n  var key = Buffer.from(secret, 'ascii');\n  var hash = crypto.createHmac('sha256', key).update(body).digest('hex');\n  return hash === signature;\n}\n\nvar http = null;\nvar https = null;\nvar name = \"stream-chat\";\nvar version = \"1.7.4\";\nvar description = \"JS SDK for the Stream Chat API\";\nvar author = \"GetStream\";\nvar homepage = \"https://getstream.io/chat/\";\nvar repository = \"https://github.com/GetStream/stream-chat-js.git\";\nvar main = \"./dist/index.js\";\nvar module$1 = \"./dist/index.es.js\";\nvar types = \"./types/stream-chat/index.d.ts\";\nvar browser = {\n  \"./dist/index.es.js\": \"./dist/browser.es.js\",\n  \"./dist/index.js\": \"./dist/browser.js\"\n};\nvar jsdelivr = \"./dist/browser.full-bundle.min.js\";\nvar license = \"SEE LICENSE IN LICENSE\";\nvar keywords = [\"chat\", \"messaging\", \"conversation\", \"react\", \"stream\", \"getstream\", \"getstream.io\"];\nvar files = [\"/dist\", \"/types/stream-chat/index.d.ts\", \"readme.md\", \"license\"];\nvar dependencies = {\n  \"@babel/runtime\": \"^7.3.1\",\n  \"@types/seamless-immutable\": \"7.1.10\",\n  \"@types/ws\": \"^6.0.3\",\n  axios: \"^0.18.1\",\n  \"base64-js\": \"^1.3.1\",\n  \"chai-arrays\": \"^2.0.0\",\n  \"cross-fetch\": \"^3.0.0\",\n  \"form-data\": \"^2.3.3\",\n  \"isomorphic-ws\": \"^4.0.1\",\n  jsonwebtoken: \"^8.3.0\",\n  \"seamless-immutable\": \"^7.1.4\",\n  uuid: \"^3.3.2\",\n  ws: \"^6.1.3\"\n};\nvar devDependencies = {\n  \"@babel/cli\": \"^7.6.0\",\n  \"@babel/core\": \"^7.6.0\",\n  \"@babel/node\": \"^7.2.2\",\n  \"@babel/plugin-proposal-class-properties\": \"^7.1.0\",\n  \"@babel/plugin-transform-async-to-generator\": \"^7.2.0\",\n  \"@babel/plugin-transform-object-assign\": \"^7.2.0\",\n  \"@babel/plugin-transform-runtime\": \"^7.2.0\",\n  \"@babel/preset-env\": \"^7.1.6\",\n  \"@babel/register\": \"^7.0.0\",\n  \"@types/babel__core\": \"^7.1.3\",\n  \"@types/bluebird\": \"^3.5.29\",\n  \"@types/chai\": \"^4.2.5\",\n  \"@types/chai-arrays\": \"^1.0.3\",\n  \"@types/chai-as-promised\": \"^7.1.2\",\n  \"@types/chai-like\": \"^1.1.0\",\n  \"@types/eslint\": \"6.1.3\",\n  \"@types/faker\": \"^4.1.7\",\n  \"@types/jsonwebtoken\": \"^8.3.5\",\n  \"@types/mocha\": \"^5.2.7\",\n  \"@types/node\": \"^13.13.0\",\n  \"@types/prettier\": \"^1.18.4\",\n  \"@types/rollup-plugin-json\": \"^3.0.2\",\n  \"@types/rollup-plugin-peer-deps-external\": \"^2.2.0\",\n  \"@types/rollup-plugin-url\": \"^2.2.0\",\n  \"@types/sinon\": \"^7.5.1\",\n  \"@types/uuid\": \"^3.4.5\",\n  \"babel-eslint\": \"^10.0.1\",\n  bluebird: \"^3.5.3\",\n  chai: \"^4.2.0\",\n  \"chai-as-promised\": \"^7.1.1\",\n  \"chai-like\": \"^1.1.1\",\n  \"chai-sorted\": \"^0.2.0\",\n  dtslint: \"^2.0.5\",\n  eslint: \"5.6.0\",\n  \"eslint-plugin-babel\": \"^5.3.0\",\n  \"eslint-plugin-markdown\": \"^1.0.0\",\n  \"eslint-plugin-sonarjs\": \"^0.5.0\",\n  faker: \"^4.1.0\",\n  husky: \"^1.3.1\",\n  \"lint-staged\": \"^8.1.0\",\n  longjohn: \"^0.2.12\",\n  mocha: \"^5.2.0\",\n  mockttp: \"^0.19.0\",\n  prettier: \"^1.15.2\",\n  rollup: \"^0.68.2\",\n  \"rollup-plugin-babel\": \"^4.0.3\",\n  \"rollup-plugin-commonjs\": \"^9.1.8\",\n  \"rollup-plugin-json\": \"^3.1.0\",\n  \"rollup-plugin-node-resolve\": \"^4.0.0\",\n  \"rollup-plugin-peer-deps-external\": \"^2.2.0\",\n  \"rollup-plugin-replace\": \"^2.1.0\",\n  \"rollup-plugin-scss\": \"^0.4.0\",\n  \"rollup-plugin-terser\": \"^4.0.4\",\n  \"rollup-plugin-url\": \"^2.0.0\",\n  sinon: \"^7.2.3\"\n};\nvar scripts = {\n  start: \"rollup -c -w\",\n  build: \"rollup -c\",\n  prettier: \"npx prettier --list-different '**/*.{js,ts,md,css,scss,json}' .eslintrc.json .prettierrc .babelrc\",\n  \"prettier-fix\": \"npx prettier --write '**/*.{js,ts,md,css,scss,json}' .eslintrc.json .prettierrc .babelrc\",\n  \"test-api-dts\": \"node types/stream-chat/api-response-tests/index.js && npx prettier --write 'types/stream-chat/api-response-tests/data.ts' .eslintrc.json .prettierrc .babelrc && tsc types/stream-chat/api-response-tests/data.ts && rm types/stream-chat/api-response-tests/data.js && dtslint types/stream-chat\",\n  eslint: \"npx eslint '**/*.{js,md}' --max-warnings 0\",\n  test: \"NODE_ENV=test mocha --exit --bail --timeout 15000 --require @babel/register test/*.js -- --async-stack-traces\",\n  testall: \"NODE_ENV=test mocha --exit --timeout 3000 --require @babel/register test/*.js -- --async-stack-traces\",\n  testwatch: \"NODE_ENV=test nodemon ./node_modules/.bin/mocha --timeout 15000 --require test-entry.js test/test.js\",\n  lint: \"npx prettier --list-different '**/*.{js,ts,css,scss,json}' .eslintrc.json .prettierrc .babelrc && npx eslint 'src/*.js' --max-warnings 0\",\n  \"lint-fix\": \"npx prettier --write '**/*.{js,ts,css,scss,json}' .eslintrc.json .prettierrc .babelrc && npx eslint --fix 'src/*.js' --max-warnings 0\",\n  prepare: \"rm -rf dist && yarn run build\",\n  preversion: \"yarn && yarn lint\",\n  version: \"git add yarn.lock\",\n  postversion: \"git push && git push --tags && npm publish\"\n};\nvar husky = {\n  hooks: {\n    \"pre-commit\": \"./dotgit/hooks/pre-commit-format.sh && dotgit/hooks/pre-commit-reject-binaries.py\"\n  }\n};\nvar pkg = {\n  name: name,\n  version: version,\n  description: description,\n  author: author,\n  homepage: homepage,\n  repository: repository,\n  main: main,\n  module: module$1,\n  \"jsnext:main\": \"./dist/index.es.js\",\n  types: types,\n  browser: browser,\n  \"react-native\": {\n    \"./dist/index.es.js\": \"./dist/browser.es.js\",\n    \"./dist/index.js\": \"./dist/browser.js\"\n  },\n  jsdelivr: jsdelivr,\n  license: license,\n  keywords: keywords,\n  files: files,\n  dependencies: dependencies,\n  devDependencies: devDependencies,\n  scripts: scripts,\n  husky: husky\n};\n\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$2(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$2(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction isReadableStream(obj) {\n  return obj !== null && _typeof(obj) === 'object' && typeof obj._read === 'function' && _typeof(obj._readableState) === 'object';\n}\n\nfunction isFunction(value) {\n  return value && (Object.prototype.toString.call(value) === '[object Function]' || 'function' === typeof value || value instanceof Function);\n}\n\nvar StreamChat = /*#__PURE__*/function () {\n  function StreamChat(key, secretOrOptions, options) {\n    var _this = this;\n\n    _classCallCheck(this, StreamChat);\n\n    _defineProperty(this, \"_hasConnectionID\", function () {\n      return Boolean(_this.connectionID);\n    });\n\n    _defineProperty(this, \"dispatchEvent\", function (event) {\n      // client event handlers\n      _this._handleClientEvent(event); // channel event handlers\n\n\n      var cid = event.cid;\n      var channel = _this.activeChannels[cid];\n\n      if (channel) {\n        channel._handleChannelEvent(event);\n      }\n\n      _this._callClientListeners(event);\n\n      if (channel) {\n        channel._callChannelListeners(event);\n      }\n    });\n\n    _defineProperty(this, \"handleEvent\", function (messageEvent) {\n      // dispatch the event to the channel listeners\n      var jsonString = messageEvent.data;\n      var event = JSON.parse(jsonString);\n      event.received_at = new Date();\n\n      _this.dispatchEvent(event);\n    });\n\n    _defineProperty(this, \"_callClientListeners\", function (event) {\n      var client = _this; // gather and call the listeners\n\n      var listeners = [];\n\n      if (client.listeners.all) {\n        listeners.push.apply(listeners, _toConsumableArray(client.listeners.all));\n      }\n\n      if (client.listeners[event.type]) {\n        listeners.push.apply(listeners, _toConsumableArray(client.listeners[event.type]));\n      } // call the event and send it to the listeners\n\n\n      for (var _i = 0, _listeners = listeners; _i < _listeners.length; _i++) {\n        var listener = _listeners[_i];\n        listener(event);\n      }\n    });\n\n    _defineProperty(this, \"recoverState\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var cids, lastMessageIDs, _i2, _Object$values, c, lastMessage, lastMessageId;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.logger('info', \"client:recoverState() - Start of recoverState with connectionID \".concat(_this.wsConnection.connectionID), {\n                tags: ['connection']\n              });\n\n              _this.connectionID = _this.wsConnection.connectionID;\n              cids = Object.keys(_this.activeChannels);\n              lastMessageIDs = {};\n\n              for (_i2 = 0, _Object$values = Object.values(_this.activeChannels); _i2 < _Object$values.length; _i2++) {\n                c = _Object$values[_i2];\n                lastMessage = c.lastMessage();\n                lastMessageId = void 0;\n\n                if (lastMessage) {\n                  lastMessageId = lastMessage.id;\n                }\n\n                lastMessageIDs[c.cid] = lastMessageId;\n              }\n\n              if (!cids.length) {\n                _context.next = 11;\n                break;\n              }\n\n              _this.logger('info', \"client:recoverState() - Start the querying of \".concat(cids.length, \" channels\"), {\n                tags: ['connection', 'client']\n              });\n\n              _context.next = 9;\n              return _this.queryChannels({\n                cid: {\n                  $in: cids\n                }\n              }, {\n                last_message_at: -1\n              }, {\n                limit: 30,\n                recovery: true,\n                last_message_ids: lastMessageIDs\n              });\n\n            case 9:\n              _this.logger('info', 'client:recoverState() - Querying channels finished', {\n                tags: ['connection', 'client']\n              });\n\n              _this.dispatchEvent({\n                type: 'connection.recovered'\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(this, \"_isUsingServerAuth\", function () {\n      return !!_this.secret;\n    }); // set the key\n\n\n    this.key = key;\n    this.userToken = null;\n    this.secret = null;\n    this.listeners = {};\n    this.state = new ClientState(); // a list of channels to hide ws events from\n\n    this.mutedChannels = []; // set the secret\n\n    if (secretOrOptions && secretOrOptions.indexOf) {\n      this.secret = secretOrOptions;\n    } // set the options... and figure out defaults...\n\n\n    options = options || secretOrOptions;\n\n    if (!options) {\n      options = {};\n    }\n\n    this.browser = typeof options.browser !== 'undefined' ? options.browser : typeof window !== 'undefined';\n    this.node = !this.browser;\n    var defaultOptions = {\n      timeout: 3000\n    };\n\n    if (this.node) {\n      var nodeOptions = {\n        httpAgent: new http.Agent({\n          keepAlive: 3000\n        }),\n        httpsAgent: new https.Agent({\n          keepAlive: 3000\n        })\n      };\n      this.options = _objectSpread$2({}, nodeOptions, {}, defaultOptions, {}, options);\n    } else {\n      this.options = _objectSpread$2({}, defaultOptions, {}, options);\n      delete this.options.httpAgent;\n      delete this.options.httpsAgent;\n    }\n\n    this.setBaseURL('https://chat-us-east-1.stream-io-api.com');\n\n    if (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_RUN) {\n      this.setBaseURL('http://localhost:3030');\n    } // WS connection is initialized when setUser is called\n\n\n    this.wsConnection = null;\n    this.wsPromise = null; // keeps a reference to all the channels that are in use\n\n    this.activeChannels = {}; // mapping between channel groups and configs\n\n    this.configs = {};\n    this.anonymous = false;\n    /**\n     * logger function should accept 3 parameters:\n     * @param logLevel string\n     * @param message   string\n     * @param extraData object\n     *\n     * e.g.,\n     * const client = new StreamChat('api_key', {}, {\n     * \t\tlogger = (logLevel, message, extraData) => {\n     * \t\t\tconsole.log(message);\n     * \t\t}\n     * })\n     *\n     * extraData contains tags array attached to log message. Tags can have one/many of following values:\n     * 1. api\n     * 2. api_request\n     * 3. api_response\n     * 4. client\n     * 5. channel\n     * 6. connection\n     * 7. event\n     *\n     * It may also contains some extra data, some examples have been mentioned below:\n     * 1. {\n     * \t\ttags: ['api', 'api_request', 'client'],\n     * \t\turl: string,\n     * \t\tpayload: object,\n     * \t\tconfig: object\n     * }\n     * 2. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\tresponse: object\n     * }\n     * 3. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\terror: object\n     * }\n     * 4. {\n     * \t\ttags: ['event', 'client'],\n     * \t\tevent: object\n     * }\n     * 5. {\n     * \t\ttags: ['channel'],\n     * \t\tchannel: object\n     * }\n     */\n\n    this.logger = isFunction(options.logger) ? options.logger : function () {};\n  }\n\n  _createClass(StreamChat, [{\n    key: \"devToken\",\n    value: function devToken(userID) {\n      return DevToken(userID);\n    }\n  }, {\n    key: \"getAuthType\",\n    value: function getAuthType() {\n      return this.anonymous ? 'anonymous' : 'jwt';\n    }\n  }, {\n    key: \"setBaseURL\",\n    value: function setBaseURL(baseURL) {\n      this.baseURL = baseURL;\n      this.wsBaseURL = this.baseURL.replace('http', 'ws');\n    }\n  }, {\n    key: \"_setupConnection\",\n    value: function _setupConnection() {\n      this.UUID = uuidv4();\n      this.clientID = \"\".concat(this.userID, \"--\").concat(this.UUID);\n      this.wsPromise = this.connect();\n\n      this._startCleaning();\n\n      return this.wsPromise;\n    }\n  }, {\n    key: \"setUser\",\n\n    /**\n     * setUser - Set the current user, this triggers a connection to the API\n     *\n     * @param {object} user Data about this user. IE {name: \"john\"}\n     * @param {string} userToken   Token\n     *\n     * @return {promise} Returns a promise that resolves when the connection is setup\n     */\n    value: function setUser(user, userToken) {\n      if (this.userID) {\n        throw new Error('Use client.disconnect() before trying to connect as a different user. setUser was called twice.');\n      } // we generate the client id client side\n\n\n      this.userID = user.id;\n\n      if (!this.userID) {\n        throw new Error('The \"id\" field on the user is missing');\n      }\n\n      this.userToken = userToken;\n\n      if (userToken == null && this.secret != null) {\n        this.userToken = this.createToken(this.userID);\n      }\n\n      if (this.userToken == null) {\n        throw new Error('both userToken and api secret are not provided');\n      }\n\n      var tokenUserId = UserFromToken(this.userToken);\n\n      if (userToken != null && (tokenUserId == null || tokenUserId === '' || tokenUserId !== user.id)) {\n        throw new Error('userToken does not have a user_id or is not matching with user.id');\n      }\n\n      this._setUser(user);\n\n      this.anonymous = false;\n      return this._setupConnection();\n    }\n  }, {\n    key: \"_setUser\",\n    value: function _setUser(user) {\n      // this one is used by the frontend\n      this.user = user; // this one is actually used for requests...\n\n      this._user = _objectSpread$2({}, user);\n    }\n    /**\n     * updateAppSettings - updates application settings\n     *\n     * @param {object} options App settings.\n     * \t\tIE: {\n      \t\t\t\"apn_config\": {\n    \t\t\t\t\"auth_type\": \"token\",\n    \t\t\t\t\"auth_key\": fs.readFileSync(\n    \t\t\t\t\t'./apn-push-auth-key.p8',\n    \t\t\t\t\t'utf-8',\n    \t\t\t\t),\n    \t\t\t\t\"key_id\": \"keyid\",\n    \t\t\t\t\"team_id\": \"teamid\", //either ALL these 3\n    \t\t\t\t\"notification_template\": \"notification handlebars template\",\n    \t\t\t\t\"bundle_id\": \"com.apple.your.app\",\n    \t\t\t\t\"development\": true\n    \t\t\t},\n    \t\t\t\"firebase_config\": {\n    \t\t\t\t\"server_key\": \"server key from fcm\",\n    \t\t\t\t\"notification_template\": \"notification handlebars template\"\n    \t\t\t\t\"data_template\": \"data handlebars template\"\n    \t\t\t},\n    \t\t\t\"webhook_url\": \"https://acme.com/my/awesome/webhook/\"\n    \t\t}\n     */\n\n  }, {\n    key: \"updateAppSettings\",\n    value: function () {\n      var _updateAppSettings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (options.apn_config && options.apn_config.p12_cert) {\n                  options.apn_config.p12_cert = Buffer.from(options.apn_config.p12_cert).toString('base64');\n                }\n\n                _context2.next = 3;\n                return this.patch(this.baseURL + '/app', options);\n\n              case 3:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function updateAppSettings(_x) {\n        return _updateAppSettings.apply(this, arguments);\n      }\n\n      return updateAppSettings;\n    }()\n    /**\n     * getAppSettings - retrieves application settings\n     */\n\n  }, {\n    key: \"getAppSettings\",\n    value: function () {\n      var _getAppSettings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.get(this.baseURL + '/app');\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getAppSettings() {\n        return _getAppSettings.apply(this, arguments);\n      }\n\n      return getAppSettings;\n    }()\n    /**\n     * testPushSettings - Tests the push settings for a user with a random chat message and the configured push templates\n     *\n     * @param {string} userID User ID. If user has no devices, it will error\n     * @param {object} [data] Overrides for push templates/message used\n     * \t\tIE: {\n    \t\t\t  messageID: 'id-of-message',//will error if message does not exist\n    \t\t\t  apnTemplate: '{}', //if app doesn't have apn configured it will error\n    \t\t\t  firebaseTemplate: '{}', //if app doesn't have firebase configured it will error\n    \t\t\t  firebaseDataTemplate: '{}', //if app doesn't have firebase configured it will error\n    \t\t}\n     */\n\n  }, {\n    key: \"testPushSettings\",\n    value: function () {\n      var _testPushSettings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(userID) {\n        var data,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                data = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n                _context4.next = 3;\n                return this.post(this.baseURL + '/check_push', _objectSpread$2({\n                  user_id: userID\n                }, data.messageID ? {\n                  message_id: data.messageID\n                } : {}, {}, data.apnTemplate ? {\n                  apn_template: data.apnTemplate\n                } : {}, {}, data.firebaseTemplate ? {\n                  firebase_template: data.firebaseTemplate\n                } : {}, {}, data.firebaseDataTemplate ? {\n                  firebase_data_template: data.firebaseDataTemplate\n                } : {}));\n\n              case 3:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function testPushSettings(_x2) {\n        return _testPushSettings.apply(this, arguments);\n      }\n\n      return testPushSettings;\n    }()\n    /**\n     * disconnect - closes the WS connection\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.logger('info', 'client:disconnect() - Disconnecting the client', {\n        tags: ['connection', 'client']\n      }); // remove the user specific fields\n\n      delete this.user;\n      delete this._user;\n      delete this.userID;\n\n      if (this.cleaningIntervalRef != null) {\n        clearInterval(this.cleaningIntervalRef);\n        this.cleaningIntervalRef = null;\n      }\n\n      this.anonymous = false;\n      this.userToken = null;\n      this.connectionEstablishedCount = 0;\n\n      for (var _i3 = 0, _Object$values2 = Object.values(this.activeChannels); _i3 < _Object$values2.length; _i3++) {\n        var channel = _Object$values2[_i3];\n\n        channel._disconnect();\n      } // ensure we no longer return inactive channels\n\n\n      this.activeChannels = {}; // reset client state\n\n      this.state = new ClientState(); // close the WS connection\n\n      if (this.wsConnection) {\n        return this.wsConnection.disconnect();\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"setAnonymousUser\",\n    value: function setAnonymousUser() {\n      this.anonymous = true;\n      this.userID = uuidv4();\n\n      this._setUser({\n        id: this.userID,\n        anon: true\n      });\n\n      return this._setupConnection();\n    }\n    /**\n     * setGuestUser - Setup a temporary guest user\n     *\n     * @param {object} user Data about this user. IE {name: \"john\"}\n     *\n     * @return {promise} Returns a promise that resolves when the connection is setup\n     */\n\n  }, {\n    key: \"setGuestUser\",\n    value: function () {\n      var _setGuestUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(user) {\n        var response, _response$user, created_at, updated_at, last_active, online, guestUser;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.anonymous = true;\n                _context5.prev = 1;\n                _context5.next = 4;\n                return this.post(this.baseURL + '/guest', {\n                  user: user\n                });\n\n              case 4:\n                response = _context5.sent;\n                _context5.next = 11;\n                break;\n\n              case 7:\n                _context5.prev = 7;\n                _context5.t0 = _context5[\"catch\"](1);\n                this.anonymous = false;\n                throw _context5.t0;\n\n              case 11:\n                this.anonymous = false;\n                _response$user = response.user, created_at = _response$user.created_at, updated_at = _response$user.updated_at, last_active = _response$user.last_active, online = _response$user.online, guestUser = _objectWithoutProperties(_response$user, [\"created_at\", \"updated_at\", \"last_active\", \"online\"]);\n                _context5.next = 15;\n                return this.setUser(guestUser, response.access_token);\n\n              case 15:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 16:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[1, 7]]);\n      }));\n\n      function setGuestUser(_x3) {\n        return _setGuestUser.apply(this, arguments);\n      }\n\n      return setGuestUser;\n    }()\n    /**\n     * createToken - Creates a token to authenticate this user. This function is used server side.\n     * The resulting token should be passed to the client side when the users registers or logs in\n     *\n     * @param {string}   userID         The User ID\n     * @param {string}   exp            The expiration time for the token expressed in the number of seconds since the epoch\n     *\n     * @return {string} Returns a token\n     */\n\n  }, {\n    key: \"createToken\",\n    value: function createToken(userID, exp) {\n      if (this.secret == null) {\n        throw Error(\"tokens can only be created server-side using the API Secret\");\n      }\n\n      var extra = {};\n\n      if (exp != null) {\n        extra.exp = exp;\n      }\n\n      return JWTUserToken(this.secret, userID, extra, {});\n    }\n    /**\n     * on - Listen to events on all channels and users your watching\n     *\n     * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n     * or\n     * client.on(event => {console.log(event.type)})\n     *\n     * @param {string} callbackOrString  The event type to listen for (optional)\n     * @param {function} callbackOrNothing The callback to call\n     *\n     * @return {type} Description\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(callbackOrString, callbackOrNothing) {\n      var _this2 = this;\n\n      var key = callbackOrNothing ? callbackOrString : 'all';\n      var valid = isValidEventType(key);\n\n      if (!valid) {\n        throw Error(\"Invalid event type \".concat(key));\n      }\n\n      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\n      if (!(key in this.listeners)) {\n        this.listeners[key] = [];\n      }\n\n      this.logger('info', \"Attaching listener for \".concat(key, \" event\"), {\n        tags: ['event', 'client']\n      });\n      this.listeners[key].push(callback);\n      return {\n        unsubscribe: function unsubscribe() {\n          _this2.listeners[key] = _this2.listeners[key].filter(function (el) {\n            return el !== callback;\n          });\n        }\n      };\n    }\n    /**\n     * off - Remove the event handler\n     *\n     */\n\n  }, {\n    key: \"off\",\n    value: function off(callbackOrString, callbackOrNothing) {\n      var key = callbackOrNothing ? callbackOrString : 'all';\n      var valid = isValidEventType(key);\n\n      if (!valid) {\n        throw Error(\"Invalid event type \".concat(key));\n      }\n\n      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\n      if (!(key in this.listeners)) {\n        this.listeners[key] = [];\n      }\n\n      this.logger('info', \"Removing listener for \".concat(key, \" event\"), {\n        tags: ['event', 'client']\n      });\n      this.listeners[key] = this.listeners[key].filter(function (value) {\n        return value !== callback;\n      });\n    }\n  }, {\n    key: \"_logApiRequest\",\n    value: function _logApiRequest(type, url, data, config) {\n      this.logger('info', \"client: \".concat(type, \" - Request - \").concat(url), {\n        tags: ['api', 'api_request', 'client'],\n        url: url,\n        payload: data,\n        config: config\n      });\n    }\n  }, {\n    key: \"_logApiResponse\",\n    value: function _logApiResponse(type, url, response) {\n      this.logger('info', \"client:\".concat(type, \" - Response - url: \").concat(url, \" > status \").concat(response.status), {\n        tags: ['api', 'api_response', 'client'],\n        url: url,\n        response: response\n      });\n    }\n  }, {\n    key: \"_logApiError\",\n    value: function _logApiError(type, url, error) {\n      this.logger('error', \"client:\".concat(type, \" - Error - url: \").concat(url), {\n        tags: ['api', 'api_response', 'client'],\n        url: url,\n        error: error\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(url, params) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n\n                this._logApiRequest('get', url, {}, this._addClientParams(params));\n\n                _context6.next = 4;\n                return axios.get(url, this._addClientParams(params));\n\n              case 4:\n                response = _context6.sent;\n\n                this._logApiResponse('get', url, response);\n\n                return _context6.abrupt(\"return\", this.handleResponse(response));\n\n              case 9:\n                _context6.prev = 9;\n                _context6.t0 = _context6[\"catch\"](0);\n\n                this._logApiError('get', url, _context6.t0);\n\n                if (!_context6.t0.response) {\n                  _context6.next = 16;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", this.handleResponse(_context6.t0.response));\n\n              case 16:\n                throw _context6.t0;\n\n              case 17:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 9]]);\n      }));\n\n      function get(_x4, _x5) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(url, data) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.prev = 0;\n\n                this._logApiRequest('put', url, data, this._addClientParams());\n\n                _context7.next = 4;\n                return axios.put(url, data, this._addClientParams());\n\n              case 4:\n                response = _context7.sent;\n\n                this._logApiResponse('put', url, response);\n\n                return _context7.abrupt(\"return\", this.handleResponse(response));\n\n              case 9:\n                _context7.prev = 9;\n                _context7.t0 = _context7[\"catch\"](0);\n\n                this._logApiError('get', url, _context7.t0);\n\n                if (!_context7.t0.response) {\n                  _context7.next = 16;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", this.handleResponse(_context7.t0.response));\n\n              case 16:\n                throw _context7.t0;\n\n              case 17:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[0, 9]]);\n      }));\n\n      function put(_x6, _x7) {\n        return _put.apply(this, arguments);\n      }\n\n      return put;\n    }()\n  }, {\n    key: \"post\",\n    value: function () {\n      var _post = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(url, data) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.prev = 0;\n\n                this._logApiRequest('post', url, data, this._addClientParams());\n\n                _context8.next = 4;\n                return axios.post(url, data, this._addClientParams());\n\n              case 4:\n                response = _context8.sent;\n\n                this._logApiResponse('post', url, response);\n\n                return _context8.abrupt(\"return\", this.handleResponse(response));\n\n              case 9:\n                _context8.prev = 9;\n                _context8.t0 = _context8[\"catch\"](0);\n\n                this._logApiError('post', url, _context8.t0);\n\n                if (!_context8.t0.response) {\n                  _context8.next = 16;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", this.handleResponse(_context8.t0.response));\n\n              case 16:\n                throw _context8.t0;\n\n              case 17:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[0, 9]]);\n      }));\n\n      function post(_x8, _x9) {\n        return _post.apply(this, arguments);\n      }\n\n      return post;\n    }()\n  }, {\n    key: \"patch\",\n    value: function () {\n      var _patch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(url, data) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.prev = 0;\n\n                this._logApiRequest('patch', url, data, this._addClientParams());\n\n                _context9.next = 4;\n                return axios.patch(url, data, this._addClientParams());\n\n              case 4:\n                response = _context9.sent;\n\n                this._logApiResponse('patch', url, response);\n\n                return _context9.abrupt(\"return\", this.handleResponse(response));\n\n              case 9:\n                _context9.prev = 9;\n                _context9.t0 = _context9[\"catch\"](0);\n\n                this._logApiError('patch', url, _context9.t0);\n\n                if (!_context9.t0.response) {\n                  _context9.next = 16;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", this.handleResponse(_context9.t0.response));\n\n              case 16:\n                throw _context9.t0;\n\n              case 17:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[0, 9]]);\n      }));\n\n      function patch(_x10, _x11) {\n        return _patch.apply(this, arguments);\n      }\n\n      return patch;\n    }()\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(url, params) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.prev = 0;\n\n                this._logApiRequest('delete', url, {}, this._addClientParams());\n\n                _context10.next = 4;\n                return axios.delete(url, this._addClientParams(params));\n\n              case 4:\n                response = _context10.sent;\n\n                this._logApiResponse('delete', url, response);\n\n                return _context10.abrupt(\"return\", this.handleResponse(response));\n\n              case 9:\n                _context10.prev = 9;\n                _context10.t0 = _context10[\"catch\"](0);\n\n                this._logApiError('delete', url, _context10.t0);\n\n                if (!_context10.t0.response) {\n                  _context10.next = 16;\n                  break;\n                }\n\n                return _context10.abrupt(\"return\", this.handleResponse(_context10.t0.response));\n\n              case 16:\n                throw _context10.t0;\n\n              case 17:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[0, 9]]);\n      }));\n\n      function _delete(_x12, _x13) {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n  }, {\n    key: \"sendFile\",\n    value: function () {\n      var _sendFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(url, uri, name$$1, contentType, user) {\n        var data, fileField, params, response;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                data = new FormData();\n                params = this._addClientParams();\n\n                if (isReadableStream(uri) || uri instanceof File) {\n                  fileField = uri;\n                } else {\n                  fileField = {\n                    uri: uri,\n                    name: name$$1 || uri.split('/').reverse()[0]\n                  };\n\n                  if (contentType != null) {\n                    fileField.type = contentType;\n                  }\n                }\n\n                if (user != null) {\n                  data.append('user', JSON.stringify(user));\n                }\n\n                data.append('file', fileField);\n                _context11.next = 7;\n                return fetch(\"\".concat(url, \"?api_key=\").concat(this.key), {\n                  method: 'post',\n                  body: data,\n                  headers: new Headers({\n                    Authorization: params.headers.Authorization,\n                    'stream-auth-type': this.getAuthType()\n                  })\n                });\n\n              case 7:\n                response = _context11.sent;\n                _context11.next = 10;\n                return response.json();\n\n              case 10:\n                response.data = _context11.sent;\n                return _context11.abrupt(\"return\", this.handleResponse(response));\n\n              case 12:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function sendFile(_x14, _x15, _x16, _x17, _x18) {\n        return _sendFile.apply(this, arguments);\n      }\n\n      return sendFile;\n    }()\n  }, {\n    key: \"errorFromResponse\",\n    value: function errorFromResponse(response) {\n      var err;\n      err = new Error(\"StreamChat error HTTP code: \".concat(response.status));\n\n      if (response.data && response.data.code) {\n        err = new Error(\"StreamChat error code \".concat(response.data.code, \": \").concat(response.data.message));\n        err.code = response.data.code;\n      }\n\n      err.response = response;\n      err.status = response.status;\n      return err;\n    }\n  }, {\n    key: \"handleResponse\",\n    value: function handleResponse(response) {\n      var data = response.data;\n\n      if ((response.status + '')[0] !== '2') {\n        throw this.errorFromResponse(response);\n      }\n\n      return data;\n    }\n  }, {\n    key: \"_handleClientEvent\",\n    value: function _handleClientEvent(event) {\n      var client = this;\n      this.logger('info', \"client:_handleClientEvent - Received event of type { \".concat(event.type, \" }\"), {\n        tags: ['event', 'client'],\n        event: event\n      }); // update the client.state with any changes to users\n\n      if (event.type === 'user.presence.changed' || event.type === 'user.updated') {\n        if (event.user.id === this.userID) {\n          this.user = _objectSpread$2({}, this.user, {}, event.user); // Updating only available properties in _user object.\n\n          Object.keys(event.user).forEach(function (key) {\n            if (key in client._user) {\n              client._user[key] = event.user[key];\n            }\n          });\n        }\n\n        client.state.updateUser(event.user);\n\n        client._updateUserReferences(event.user);\n      }\n\n      if (event.type === 'health.check' && event.me) {\n        client.user = event.me;\n        client.state.updateUser(event.me);\n        client.mutedChannels = event.me.channel_mutes;\n      }\n\n      if (event.type === 'notification.message_new') {\n        this.configs[event.channel.type] = event.channel.config;\n      }\n\n      if (event.type === 'notification.channel_mutes_updated') {\n        this.mutedChannels = event.me.channel_mutes;\n      }\n    }\n  }, {\n    key: \"_muteStatus\",\n    value: function _muteStatus(cid) {\n      var muteStatus;\n      this.mutedChannels.forEach(function (mute) {\n        if (mute.channel.cid === cid) {\n          var muted = true;\n\n          if (mute.expires) {\n            muted = new Date(mute.expires).getTime() > new Date().getTime();\n          }\n\n          muteStatus = {\n            muted: muted,\n            createdAt: new Date(mute.created_at),\n            expiresAt: mute.expires ? new Date(mute.expires) : null\n          };\n        }\n      });\n\n      if (muteStatus) {\n        return muteStatus;\n      }\n\n      return {\n        muted: false,\n        createdAt: null,\n        expiresAt: null\n      };\n    }\n  }, {\n    key: \"_updateUserReferences\",\n\n    /*\n    _updateUserReferences updates the members and watchers of the currently active channels\n    that contain this user\n    */\n    value: function _updateUserReferences(user) {\n      var refMap = this.state.userChannelReferences[user.id] || {};\n      var refs = Object.keys(refMap);\n\n      for (var _i4 = 0, _refs = refs; _i4 < _refs.length; _i4++) {\n        var channelID = _refs[_i4];\n        var c = this.activeChannels[channelID]; // search the members and watchers and update as needed...\n\n        if (c && c.state) {\n          if (c.state.members[user.id]) {\n            c.state.members = c.state.members.setIn([user.id, 'user'], user);\n          }\n\n          if (c.state.watchers[user.id]) {\n            c.state.watchers = c.state.watchers.setIn([user.id, 'user'], user);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        var client, params, qs, token, authType, handshake;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                this.connecting = true;\n                client = this;\n                this.failures = 0;\n\n                if (!(client.userID == null)) {\n                  _context12.next = 5;\n                  break;\n                }\n\n                throw Error('Call setUser or setAnonymousUser before starting the connection');\n\n              case 5:\n                params = {\n                  client_id: client.client_id,\n                  user_id: client.userID,\n                  user_details: client._user,\n                  user_token: client.userToken,\n                  server_determines_connection_id: true\n                };\n                qs = encodeURIComponent(JSON.stringify(params));\n                token = this._getToken();\n                authType = this.getAuthType();\n                client.wsURL = \"\".concat(client.wsBaseURL, \"/connect?json=\").concat(qs, \"&api_key=\").concat(this.key, \"&authorization=\").concat(token, \"&stream-auth-type=\").concat(authType, \"&x-stream-client=\").concat(this._userAgent()); // The StableWSConnection handles all the reconnection logic.\n\n                this.wsConnection = new StableWSConnection({\n                  wsURL: client.wsURL,\n                  clientID: this.clientID,\n                  userID: this.userID,\n                  recoverCallback: this.recoverState,\n                  messageCallback: this.handleEvent,\n                  eventCallback: this.dispatchEvent,\n                  logger: this.logger\n                });\n                _context12.next = 13;\n                return this.wsConnection.connect();\n\n              case 13:\n                handshake = _context12.sent;\n                this.connectionID = this.wsConnection.connectionID;\n                return _context12.abrupt(\"return\", handshake);\n\n              case 16:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n    /**\n     * queryUsers - Query users and watch user presence\n     *\n     * @param {object} filterConditions MongoDB style filter conditions\n     * @param {object} sort             Sort options, for instance {last_active: -1}\n     * @param {object} options          Option object, {presence: true}\n     *\n     * @return {object} User Query Response\n     */\n\n  }, {\n    key: \"queryUsers\",\n    value: function () {\n      var _queryUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(filterConditions, sort, options) {\n        var sortFields, _i5, _Object$entries, _Object$entries$_i, k, v, defaultOptions, data;\n\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                if (!sort) {\n                  sort = {};\n                }\n\n                if (!options) {\n                  options = {};\n                }\n\n                sortFields = [];\n\n                for (_i5 = 0, _Object$entries = Object.entries(sort); _i5 < _Object$entries.length; _i5++) {\n                  _Object$entries$_i = _slicedToArray(_Object$entries[_i5], 2), k = _Object$entries$_i[0], v = _Object$entries$_i[1];\n                  sortFields.push({\n                    field: k,\n                    direction: v\n                  });\n                }\n\n                defaultOptions = {\n                  presence: true\n                }; // Make sure we wait for the connect promise if there is a pending one\n\n                _context13.next = 7;\n                return this.wsPromise;\n\n              case 7:\n                if (!this._hasConnectionID()) {\n                  defaultOptions.presence = false;\n                } // Return a list of users\n\n\n                _context13.next = 10;\n                return this.get(this.baseURL + '/users', {\n                  payload: _objectSpread$2({\n                    filter_conditions: filterConditions,\n                    sort: sortFields\n                  }, defaultOptions, {}, options)\n                });\n\n              case 10:\n                data = _context13.sent;\n                this.state.updateUsers(data.users);\n                return _context13.abrupt(\"return\", data);\n\n              case 13:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function queryUsers(_x19, _x20, _x21) {\n        return _queryUsers.apply(this, arguments);\n      }\n\n      return queryUsers;\n    }()\n  }, {\n    key: \"queryChannels\",\n    value: function () {\n      var _queryChannels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(filterConditions) {\n        var sort,\n            options,\n            sortFields,\n            _i6,\n            _Object$entries2,\n            _Object$entries2$_i,\n            k,\n            v,\n            defaultOptions,\n            payload,\n            data,\n            channels,\n            _iteratorNormalCompletion,\n            _didIteratorError,\n            _iteratorError,\n            _iterator,\n            _step,\n            channelState,\n            _iteratorNormalCompletion2,\n            _didIteratorError2,\n            _iteratorError2,\n            _iterator2,\n            _step2,\n            _channelState,\n            c,\n            _args14 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                sort = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : {};\n                options = _args14.length > 2 && _args14[2] !== undefined ? _args14[2] : {};\n                sortFields = [];\n\n                for (_i6 = 0, _Object$entries2 = Object.entries(sort); _i6 < _Object$entries2.length; _i6++) {\n                  _Object$entries2$_i = _slicedToArray(_Object$entries2[_i6], 2), k = _Object$entries2$_i[0], v = _Object$entries2$_i[1];\n                  sortFields.push({\n                    field: k,\n                    direction: v\n                  });\n                }\n\n                defaultOptions = {\n                  state: true,\n                  watch: true,\n                  presence: false\n                }; // Make sure we wait for the connect promise if there is a pending one\n\n                _context14.next = 7;\n                return this.wsPromise;\n\n              case 7:\n                if (!this._hasConnectionID()) {\n                  defaultOptions.watch = false;\n                } // Return a list of channels\n\n\n                payload = _objectSpread$2({\n                  filter_conditions: filterConditions,\n                  sort: sortFields,\n                  user_details: this._user\n                }, defaultOptions, {}, options);\n                _context14.next = 11;\n                return this.get(this.baseURL + '/channels', {\n                  payload: payload\n                });\n\n              case 11:\n                data = _context14.sent;\n                channels = []; // update our cache of the configs\n\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context14.prev = 16;\n\n                for (_iterator = data.channels[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  channelState = _step.value;\n\n                  this._addChannelConfig(channelState);\n                }\n\n                _context14.next = 24;\n                break;\n\n              case 20:\n                _context14.prev = 20;\n                _context14.t0 = _context14[\"catch\"](16);\n                _didIteratorError = true;\n                _iteratorError = _context14.t0;\n\n              case 24:\n                _context14.prev = 24;\n                _context14.prev = 25;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 27:\n                _context14.prev = 27;\n\n                if (!_didIteratorError) {\n                  _context14.next = 30;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 30:\n                return _context14.finish(27);\n\n              case 31:\n                return _context14.finish(24);\n\n              case 32:\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _iteratorError2 = undefined;\n                _context14.prev = 35;\n\n                for (_iterator2 = data.channels[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                  _channelState = _step2.value;\n                  c = this.channel(_channelState.channel.type, _channelState.channel.id);\n                  c.data = _channelState.channel;\n                  c.initialized = true;\n\n                  c._initializeState(_channelState);\n\n                  channels.push(c);\n                }\n\n                _context14.next = 43;\n                break;\n\n              case 39:\n                _context14.prev = 39;\n                _context14.t1 = _context14[\"catch\"](35);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context14.t1;\n\n              case 43:\n                _context14.prev = 43;\n                _context14.prev = 44;\n\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n\n              case 46:\n                _context14.prev = 46;\n\n                if (!_didIteratorError2) {\n                  _context14.next = 49;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 49:\n                return _context14.finish(46);\n\n              case 50:\n                return _context14.finish(43);\n\n              case 51:\n                return _context14.abrupt(\"return\", channels);\n\n              case 52:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this, [[16, 20, 24, 32], [25,, 27, 31], [35, 39, 43, 51], [44,, 46, 50]]);\n      }));\n\n      function queryChannels(_x22) {\n        return _queryChannels.apply(this, arguments);\n      }\n\n      return queryChannels;\n    }()\n    /**\n     * search - Query messages\n     *\n     * @param {object} channels MongoDB style filter conditions\n     * @param {object|string}  message search query or object MongoDB style filters\n     * @param {object} options       Option object, {user_id: 'tommaso'}\n     *\n     * @return {object} search messages response\n     */\n\n  }, {\n    key: \"search\",\n    value: function () {\n      var _search = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(filterConditions, query) {\n        var options,\n            payload,\n            _args15 = arguments;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                options = _args15.length > 2 && _args15[2] !== undefined ? _args15[2] : {}; // Return a list of channels\n\n                payload = _objectSpread$2({\n                  filter_conditions: filterConditions\n                }, options);\n\n                if (!(typeof query === 'string')) {\n                  _context15.next = 6;\n                  break;\n                }\n\n                payload.query = query;\n                _context15.next = 11;\n                break;\n\n              case 6:\n                if (!(_typeof(query) === 'object')) {\n                  _context15.next = 10;\n                  break;\n                }\n\n                payload.message_filter_conditions = query;\n                _context15.next = 11;\n                break;\n\n              case 10:\n                throw Error(\"Invalid type \".concat(_typeof(query), \" for query parameter\"));\n\n              case 11:\n                _context15.next = 13;\n                return this.wsPromise;\n\n              case 13:\n                _context15.next = 15;\n                return this.get(this.baseURL + '/search', {\n                  payload: payload\n                });\n\n              case 15:\n                return _context15.abrupt(\"return\", _context15.sent);\n\n              case 16:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function search(_x23, _x24) {\n        return _search.apply(this, arguments);\n      }\n\n      return search;\n    }()\n    /**\n     * addDevice - Adds a push device for a user.\n     *\n     * @param {string} id the device id\n     * @param {string} push_provider the push provider (apn or firebase)\n     * @param {string} [userID] the user id (defaults to current user)\n     *\n     */\n\n  }, {\n    key: \"addDevice\",\n    value: function () {\n      var _addDevice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(id, push_provider) {\n        var userID,\n            _args16 = arguments;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                userID = _args16.length > 2 && _args16[2] !== undefined ? _args16[2] : null;\n                _context16.next = 3;\n                return this.post(this.baseURL + '/devices', _objectSpread$2({\n                  id: id,\n                  push_provider: push_provider\n                }, userID != null ? {\n                  user_id: userID\n                } : {}));\n\n              case 3:\n                return _context16.abrupt(\"return\", _context16.sent);\n\n              case 4:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function addDevice(_x25, _x26) {\n        return _addDevice.apply(this, arguments);\n      }\n\n      return addDevice;\n    }()\n    /**\n     * getDevices - Returns the devices associated with a current user\n     *\n     * @param {string} [userID] User ID. Only works on serversidex\n     *\n     * @return {devices} Array of devices\n     */\n\n  }, {\n    key: \"getDevices\",\n    value: function () {\n      var _getDevices = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(userID) {\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this.get(this.baseURL + '/devices', userID ? {\n                  user_id: userID\n                } : {});\n\n              case 2:\n                return _context17.abrupt(\"return\", _context17.sent);\n\n              case 3:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function getDevices(_x27) {\n        return _getDevices.apply(this, arguments);\n      }\n\n      return getDevices;\n    }()\n    /**\n     * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices\n     *\n     * @param {string} id The device id\n     * @param {string} [userID] The user id. Only specify this for serverside requests\n     *\n     */\n\n  }, {\n    key: \"removeDevice\",\n    value: function () {\n      var _removeDevice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(id) {\n        var userID,\n            _args18 = arguments;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                userID = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : null;\n                _context18.next = 3;\n                return this.delete(this.baseURL + '/devices', _objectSpread$2({\n                  id: id\n                }, userID ? {\n                  user_id: userID\n                } : {}));\n\n              case 3:\n                return _context18.abrupt(\"return\", _context18.sent);\n\n              case 4:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function removeDevice(_x28) {\n        return _removeDevice.apply(this, arguments);\n      }\n\n      return removeDevice;\n    }()\n  }, {\n    key: \"_addChannelConfig\",\n    value: function _addChannelConfig(channelState) {\n      this.configs[channelState.channel.type] = channelState.channel.config;\n    }\n    /**\n     * channel - Returns a new channel with the given type, id and custom data\n     *\n     * If you want to create a unique conversation between 2 or more users; you can leave out the ID parameter\n     * and only provide ID and the list of members\n     *\n     * ie. client.channel(\"messaging\", {members: [\"tommaso\", \"thierry\"]})\n     *\n     * @param {string} channelType The channel type\n     * @param {string} channelID   The channel ID, you can leave this out if you want to create a conversation channel\n     * @param {object} [custom]    Custom data to attach to the channel\n     *\n     * @return {channel} The channel object, initialize it using channel.watch()\n     */\n\n  }, {\n    key: \"channel\",\n    value: function channel(channelType, channelID) {\n      var custom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (!this.userID && !this._isUsingServerAuth()) {\n        throw Error('Call setUser or setAnonymousUser before creating a channel');\n      }\n\n      if (~channelType.indexOf(':')) {\n        throw Error(\"Invalid channel group \".concat(channelType, \", can't contain the : character\"));\n      } // support channel(\"messaging\", null, {options})\n      // support channel(\"messaging\", undefined, {options})\n      // support channel(\"messaging\", \"\", {options})\n\n\n      if (channelID == null || channelID === '') {\n        return new Channel(this, channelType, undefined, custom || {});\n      } // support channel(\"messaging\", {options})\n\n\n      if (_typeof(channelID) === 'object' && arguments.length === 2) {\n        return new Channel(this, channelType, undefined, channelID);\n      }\n\n      if (typeof channelID === 'string' && ~channelID.indexOf(':')) {\n        throw Error(\"Invalid channel id \".concat(channelID, \", can't contain the : character\"));\n      } // only allow 1 channel object per cid\n\n\n      var cid = \"\".concat(channelType, \":\").concat(channelID);\n\n      if (cid in this.activeChannels) {\n        var _channel = this.activeChannels[cid];\n\n        if (Object.keys(custom).length > 0) {\n          _channel.data = custom;\n          _channel._data = custom;\n        }\n\n        return _channel;\n      }\n\n      var channel = new Channel(this, channelType, channelID, custom);\n      this.activeChannels[channel.cid] = channel;\n      return channel;\n    }\n    /**\n     * @deprecated Please use upsertUser() function instead.\n     *\n     * updateUser - Update or Create the given user object\n     *\n     * @param {object} A user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n     *\n     * @return {object}\n     */\n\n  }, {\n    key: \"updateUser\",\n    value: function () {\n      var _updateUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(userObject) {\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return this.upsertUsers([userObject]);\n\n              case 2:\n                return _context19.abrupt(\"return\", _context19.sent);\n\n              case 3:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function updateUser(_x29) {\n        return _updateUser.apply(this, arguments);\n      }\n\n      return updateUser;\n    }()\n    /**\n     * partialUpdateUser - Update the given user object\n     *\n     * @param {object} Object which should contain id and any of \"set\" or \"unset\" params;\n     * example: {id: \"user1\", set:{field: value}, unset:[\"field2\"]}\n     *\n     * @return {object} list of updated users\n     */\n\n  }, {\n    key: \"partialUpdateUser\",\n    value: function () {\n      var _partialUpdateUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(userObject) {\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return this.partialUpdateUsers([userObject]);\n\n              case 2:\n                return _context20.abrupt(\"return\", _context20.sent);\n\n              case 3:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function partialUpdateUser(_x30) {\n        return _partialUpdateUser.apply(this, arguments);\n      }\n\n      return partialUpdateUser;\n    }()\n    /**\n     * upsertUsers - Batch upsert the list of users\n     *\n     * @param {array} A list of users\n     *\n     * @return {object}\n     */\n\n  }, {\n    key: \"upsertUsers\",\n    value: function () {\n      var _upsertUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(users) {\n        var userMap, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, userObject;\n\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                userMap = {};\n                _iteratorNormalCompletion3 = true;\n                _didIteratorError3 = false;\n                _iteratorError3 = undefined;\n                _context21.prev = 4;\n                _iterator3 = users[Symbol.iterator]();\n\n              case 6:\n                if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {\n                  _context21.next = 14;\n                  break;\n                }\n\n                userObject = _step3.value;\n\n                if (userObject.id) {\n                  _context21.next = 10;\n                  break;\n                }\n\n                throw Error('User ID is required when updating a user');\n\n              case 10:\n                userMap[userObject.id] = userObject;\n\n              case 11:\n                _iteratorNormalCompletion3 = true;\n                _context21.next = 6;\n                break;\n\n              case 14:\n                _context21.next = 20;\n                break;\n\n              case 16:\n                _context21.prev = 16;\n                _context21.t0 = _context21[\"catch\"](4);\n                _didIteratorError3 = true;\n                _iteratorError3 = _context21.t0;\n\n              case 20:\n                _context21.prev = 20;\n                _context21.prev = 21;\n\n                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                  _iterator3.return();\n                }\n\n              case 23:\n                _context21.prev = 23;\n\n                if (!_didIteratorError3) {\n                  _context21.next = 26;\n                  break;\n                }\n\n                throw _iteratorError3;\n\n              case 26:\n                return _context21.finish(23);\n\n              case 27:\n                return _context21.finish(20);\n\n              case 28:\n                _context21.next = 30;\n                return this.post(this.baseURL + '/users', {\n                  users: userMap\n                });\n\n              case 30:\n                return _context21.abrupt(\"return\", _context21.sent);\n\n              case 31:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this, [[4, 16, 20, 28], [21,, 23, 27]]);\n      }));\n\n      function upsertUsers(_x31) {\n        return _upsertUsers.apply(this, arguments);\n      }\n\n      return upsertUsers;\n    }()\n    /**\n     * upsertUser - Update or Create the given user object\n     *\n     * @param {object} A user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n     *\n     * @return {object}\n     */\n\n  }, {\n    key: \"upsertUser\",\n    value: function upsertUser(userObject) {\n      return this.upsertUsers([userObject]);\n    }\n    /**\n     * @deprecated Please use upsertUsers() function instead.\n     *\n     * updateUsers - Batch update the list of users\n     *\n     * @param {array} A list of users\n     *\n     * @return {object}\n     */\n\n  }, {\n    key: \"updateUsers\",\n    value: function updateUsers(users) {\n      return this.upsertUsers(users);\n    }\n    /**\n     * updateUsers - Batch partial update of users\n     *\n     * @param {array} A list of partial update requests\n     *\n     * @return {object}\n     */\n\n  }, {\n    key: \"partialUpdateUsers\",\n    value: function () {\n      var _partialUpdateUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(users) {\n        var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, userObject;\n\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _iteratorNormalCompletion4 = true;\n                _didIteratorError4 = false;\n                _iteratorError4 = undefined;\n                _context22.prev = 3;\n                _iterator4 = users[Symbol.iterator]();\n\n              case 5:\n                if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {\n                  _context22.next = 12;\n                  break;\n                }\n\n                userObject = _step4.value;\n\n                if (userObject.id) {\n                  _context22.next = 9;\n                  break;\n                }\n\n                throw Error('User ID is required when updating a user');\n\n              case 9:\n                _iteratorNormalCompletion4 = true;\n                _context22.next = 5;\n                break;\n\n              case 12:\n                _context22.next = 18;\n                break;\n\n              case 14:\n                _context22.prev = 14;\n                _context22.t0 = _context22[\"catch\"](3);\n                _didIteratorError4 = true;\n                _iteratorError4 = _context22.t0;\n\n              case 18:\n                _context22.prev = 18;\n                _context22.prev = 19;\n\n                if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                  _iterator4.return();\n                }\n\n              case 21:\n                _context22.prev = 21;\n\n                if (!_didIteratorError4) {\n                  _context22.next = 24;\n                  break;\n                }\n\n                throw _iteratorError4;\n\n              case 24:\n                return _context22.finish(21);\n\n              case 25:\n                return _context22.finish(18);\n\n              case 26:\n                _context22.next = 28;\n                return this.patch(this.baseURL + '/users', {\n                  users: users\n                });\n\n              case 28:\n                return _context22.abrupt(\"return\", _context22.sent);\n\n              case 29:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this, [[3, 14, 18, 26], [19,, 21, 25]]);\n      }));\n\n      function partialUpdateUsers(_x32) {\n        return _partialUpdateUsers.apply(this, arguments);\n      }\n\n      return partialUpdateUsers;\n    }()\n  }, {\n    key: \"deleteUser\",\n    value: function () {\n      var _deleteUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(userID, params) {\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                _context23.next = 2;\n                return this.delete(this.baseURL + \"/users/\".concat(userID), params);\n\n              case 2:\n                return _context23.abrupt(\"return\", _context23.sent);\n\n              case 3:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function deleteUser(_x33, _x34) {\n        return _deleteUser.apply(this, arguments);\n      }\n\n      return deleteUser;\n    }()\n  }, {\n    key: \"reactivateUser\",\n    value: function () {\n      var _reactivateUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(userID, options) {\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return this.post(this.baseURL + \"/users/\".concat(userID, \"/reactivate\"), _objectSpread$2({}, options));\n\n              case 2:\n                return _context24.abrupt(\"return\", _context24.sent);\n\n              case 3:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function reactivateUser(_x35, _x36) {\n        return _reactivateUser.apply(this, arguments);\n      }\n\n      return reactivateUser;\n    }()\n  }, {\n    key: \"deactivateUser\",\n    value: function () {\n      var _deactivateUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(userID, options) {\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                _context25.next = 2;\n                return this.post(this.baseURL + \"/users/\".concat(userID, \"/deactivate\"), _objectSpread$2({}, options));\n\n              case 2:\n                return _context25.abrupt(\"return\", _context25.sent);\n\n              case 3:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function deactivateUser(_x37, _x38) {\n        return _deactivateUser.apply(this, arguments);\n      }\n\n      return deactivateUser;\n    }()\n  }, {\n    key: \"exportUser\",\n    value: function () {\n      var _exportUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(userID, options) {\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                _context26.next = 2;\n                return this.get(this.baseURL + \"/users/\".concat(userID, \"/export\"), _objectSpread$2({}, options));\n\n              case 2:\n                return _context26.abrupt(\"return\", _context26.sent);\n\n              case 3:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function exportUser(_x39, _x40) {\n        return _exportUser.apply(this, arguments);\n      }\n\n      return exportUser;\n    }()\n    /** banUser - bans a user from all channels\n     *\n     * @param targetUserID\n     * @param options\n     * @returns {Promise<*>}\n     */\n\n  }, {\n    key: \"banUser\",\n    value: function () {\n      var _banUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(targetUserID, options) {\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                _context27.next = 2;\n                return this.post(this.baseURL + '/moderation/ban', _objectSpread$2({\n                  target_user_id: targetUserID\n                }, options));\n\n              case 2:\n                return _context27.abrupt(\"return\", _context27.sent);\n\n              case 3:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function banUser(_x41, _x42) {\n        return _banUser.apply(this, arguments);\n      }\n\n      return banUser;\n    }()\n    /** unbanUser - revoke global ban for a user\n     *\n     * @param targetUserID\n     * @returns {Promise<*>}\n     */\n\n  }, {\n    key: \"unbanUser\",\n    value: function () {\n      var _unbanUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(targetUserID, options) {\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                _context28.next = 2;\n                return this.delete(this.baseURL + '/moderation/ban', _objectSpread$2({\n                  target_user_id: targetUserID\n                }, options));\n\n              case 2:\n                return _context28.abrupt(\"return\", _context28.sent);\n\n              case 3:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n\n      function unbanUser(_x43, _x44) {\n        return _unbanUser.apply(this, arguments);\n      }\n\n      return unbanUser;\n    }()\n    /** muteUser - mutes a user\n     *\n     * @param targetID\n     * @param [userID] Only used with serverside auth\n     * @returns {Promise<*>}\n     */\n\n  }, {\n    key: \"muteUser\",\n    value: function () {\n      var _muteUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(targetID) {\n        var userID,\n            _args29 = arguments;\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                userID = _args29.length > 1 && _args29[1] !== undefined ? _args29[1] : null;\n                _context29.next = 3;\n                return this.post(this.baseURL + '/moderation/mute', _objectSpread$2({\n                  target_id: targetID\n                }, userID ? {\n                  user_id: userID\n                } : {}));\n\n              case 3:\n                return _context29.abrupt(\"return\", _context29.sent);\n\n              case 4:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n\n      function muteUser(_x45) {\n        return _muteUser.apply(this, arguments);\n      }\n\n      return muteUser;\n    }()\n    /** unmuteUser - unmutes a user\n     *\n     * @param targetID\n     * @param [currentUserID] Only used with serverside auth\n     * @returns {Promise<*>}\n     */\n\n  }, {\n    key: \"unmuteUser\",\n    value: function () {\n      var _unmuteUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(targetID) {\n        var currentUserID,\n            _args30 = arguments;\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                currentUserID = _args30.length > 1 && _args30[1] !== undefined ? _args30[1] : null;\n                _context30.next = 3;\n                return this.post(this.baseURL + '/moderation/unmute', _objectSpread$2({\n                  target_id: targetID\n                }, currentUserID ? {\n                  user_id: currentUserID\n                } : {}));\n\n              case 3:\n                return _context30.abrupt(\"return\", _context30.sent);\n\n              case 4:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this);\n      }));\n\n      function unmuteUser(_x46) {\n        return _unmuteUser.apply(this, arguments);\n      }\n\n      return unmuteUser;\n    }()\n  }, {\n    key: \"flagMessage\",\n    value: function () {\n      var _flagMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31(messageID) {\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                _context31.next = 2;\n                return this.post(this.baseURL + '/moderation/flag', {\n                  target_message_id: messageID\n                });\n\n              case 2:\n                return _context31.abrupt(\"return\", _context31.sent);\n\n              case 3:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n\n      function flagMessage(_x47) {\n        return _flagMessage.apply(this, arguments);\n      }\n\n      return flagMessage;\n    }()\n  }, {\n    key: \"flagUser\",\n    value: function () {\n      var _flagUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32(userID) {\n        return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                _context32.next = 2;\n                return this.post(this.baseURL + '/moderation/flag', {\n                  target_user_id: userID\n                });\n\n              case 2:\n                return _context32.abrupt(\"return\", _context32.sent);\n\n              case 3:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, this);\n      }));\n\n      function flagUser(_x48) {\n        return _flagUser.apply(this, arguments);\n      }\n\n      return flagUser;\n    }()\n  }, {\n    key: \"unflagMessage\",\n    value: function () {\n      var _unflagMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33(messageID) {\n        return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                _context33.next = 2;\n                return this.post(this.baseURL + '/moderation/unflag', {\n                  target_message_id: messageID\n                });\n\n              case 2:\n                return _context33.abrupt(\"return\", _context33.sent);\n\n              case 3:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33, this);\n      }));\n\n      function unflagMessage(_x49) {\n        return _unflagMessage.apply(this, arguments);\n      }\n\n      return unflagMessage;\n    }()\n  }, {\n    key: \"unflagUser\",\n    value: function () {\n      var _unflagUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34(userID) {\n        return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                _context34.next = 2;\n                return this.post(this.baseURL + '/moderation/unflag', {\n                  target_user_id: userID\n                });\n\n              case 2:\n                return _context34.abrupt(\"return\", _context34.sent);\n\n              case 3:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, this);\n      }));\n\n      function unflagUser(_x50) {\n        return _unflagUser.apply(this, arguments);\n      }\n\n      return unflagUser;\n    }()\n    /**\n     * markAllRead - marks all channels for this user as read\n     *\n     * @return {Promise} Description\n     */\n\n  }, {\n    key: \"markAllRead\",\n    value: function () {\n      var _markAllRead = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35() {\n        var data,\n            response,\n            _args35 = arguments;\n        return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                data = _args35.length > 0 && _args35[0] !== undefined ? _args35[0] : {};\n                _context35.next = 3;\n                return this.post(this.baseURL + '/channels/read', _objectSpread$2({}, data));\n\n              case 3:\n                response = _context35.sent;\n\n              case 4:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35, this);\n      }));\n\n      function markAllRead() {\n        return _markAllRead.apply(this, arguments);\n      }\n\n      return markAllRead;\n    }()\n  }, {\n    key: \"createChannelType\",\n    value: function createChannelType(data) {\n      var channelData = _extends({}, {\n        commands: ['all']\n      }, data);\n\n      return this.post(this.baseURL + '/channeltypes', channelData);\n    }\n  }, {\n    key: \"getChannelType\",\n    value: function getChannelType(channelType) {\n      return this.get(this.baseURL + \"/channeltypes/\".concat(channelType));\n    }\n  }, {\n    key: \"updateChannelType\",\n    value: function updateChannelType(channelType, data) {\n      return this.put(this.baseURL + \"/channeltypes/\".concat(channelType), data);\n    }\n  }, {\n    key: \"deleteChannelType\",\n    value: function deleteChannelType(channelType) {\n      return this.delete(this.baseURL + \"/channeltypes/\".concat(channelType));\n    }\n  }, {\n    key: \"listChannelTypes\",\n    value: function listChannelTypes() {\n      return this.get(this.baseURL + \"/channeltypes\");\n    }\n    /**\n     * updateMessage - Update the given message\n     *\n     * @param {object} message object, id needs to be specified\n     *\n     * @return {object} Response that includes the message\n     */\n\n  }, {\n    key: \"updateMessage\",\n    value: function () {\n      var _updateMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee36(message, userId) {\n        var clonedMessage, reservedMessageFields;\n        return _regeneratorRuntime.wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n                if (message.id) {\n                  _context36.next = 2;\n                  break;\n                }\n\n                throw Error('Please specify the message id when calling updateMesssage');\n\n              case 2:\n                clonedMessage = _extends({}, message);\n                delete clonedMessage.id;\n                reservedMessageFields = ['latest_reactions', 'own_reactions', 'reply_count', 'reaction_counts', 'created_at', 'updated_at', 'html', 'command', 'type', 'user'];\n                reservedMessageFields.forEach(function (item) {\n                  if (clonedMessage[item] != null) {\n                    delete clonedMessage[item];\n                  }\n                });\n\n                if (userId != null) {\n                  if (typeof userId == 'string' || userId instanceof String) {\n                    clonedMessage.user_id = userId;\n                  } else {\n                    clonedMessage.user = {\n                      id: userId.id\n                    };\n                  }\n                }\n\n                _context36.next = 9;\n                return this.post(this.baseURL + \"/messages/\".concat(message.id), {\n                  message: clonedMessage\n                });\n\n              case 9:\n                return _context36.abrupt(\"return\", _context36.sent);\n\n              case 10:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36, this);\n      }));\n\n      function updateMessage(_x51, _x52) {\n        return _updateMessage.apply(this, arguments);\n      }\n\n      return updateMessage;\n    }()\n  }, {\n    key: \"deleteMessage\",\n    value: function () {\n      var _deleteMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee37(messageID, hardDelete) {\n        var params;\n        return _regeneratorRuntime.wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                params = {};\n\n                if (hardDelete) {\n                  params = {\n                    hard: true\n                  };\n                }\n\n                _context37.next = 4;\n                return this.delete(this.baseURL + \"/messages/\".concat(messageID), params);\n\n              case 4:\n                return _context37.abrupt(\"return\", _context37.sent);\n\n              case 5:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37, this);\n      }));\n\n      function deleteMessage(_x53, _x54) {\n        return _deleteMessage.apply(this, arguments);\n      }\n\n      return deleteMessage;\n    }()\n  }, {\n    key: \"getMessage\",\n    value: function () {\n      var _getMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee38(messageID) {\n        return _regeneratorRuntime.wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n                _context38.next = 2;\n                return this.get(this.baseURL + \"/messages/\".concat(messageID));\n\n              case 2:\n                return _context38.abrupt(\"return\", _context38.sent);\n\n              case 3:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n        }, _callee38, this);\n      }));\n\n      function getMessage(_x55) {\n        return _getMessage.apply(this, arguments);\n      }\n\n      return getMessage;\n    }()\n  }, {\n    key: \"_userAgent\",\n    value: function _userAgent() {\n      return \"stream-chat-javascript-client-\".concat(this.node ? 'node' : 'browser', \"-\").concat(pkg.version);\n    }\n    /**\n     * _isUsingServerAuth - Returns true if we're using server side auth\n     */\n\n  }, {\n    key: \"_addClientParams\",\n    value: function _addClientParams() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var token = this._getToken();\n\n      return _objectSpread$2({}, this.options, {\n        params: _objectSpread$2({\n          user_id: this.userID\n        }, params, {\n          api_key: this.key,\n          connection_id: this.connectionID\n        }),\n        headers: {\n          Authorization: token,\n          'stream-auth-type': this.getAuthType(),\n          'x-stream-client': this._userAgent()\n        }\n      });\n    }\n  }, {\n    key: \"_getToken\",\n    value: function _getToken() {\n      if (this.secret == null && this.userToken == null && !this.anonymous) {\n        throw new Error(\"Both secret and user tokens are not set. Either client.setUser wasn't called or client.disconnect was called\");\n      }\n\n      var token = '';\n\n      if (!this.anonymous) {\n        token = this.userToken != null ? this.userToken : JWTServerToken(this.secret);\n      }\n\n      return token;\n    }\n  }, {\n    key: \"_startCleaning\",\n    value: function _startCleaning() {\n      var that = this;\n\n      if (this.cleaningIntervalRef != null) {\n        return;\n      }\n\n      this.cleaningIntervalRef = setInterval(function () {\n        // call clean on the channel, used for calling the stop.typing event etc.\n        for (var _i7 = 0, _Object$values3 = Object.values(that.activeChannels); _i7 < _Object$values3.length; _i7++) {\n          var channel = _Object$values3[_i7];\n          channel.clean();\n        }\n      }, 500);\n    }\n  }, {\n    key: \"verifyWebhook\",\n    value: function verifyWebhook(requestBody, xSignature) {\n      return CheckSignature(requestBody, this.secret, xSignature);\n    }\n  }]);\n\n  return StreamChat;\n}();\n\nvar Allow = 'Allow';\nvar Deny = 'Deny';\nvar AnyResource = ['*'];\nvar AnyRole = ['*'];\nvar MaxPriority = 999;\nvar MinPriority = 1;\n\nvar Permission = function Permission(name, priority) {\n  var resources = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : AnyResource;\n  var roles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : AnyRole;\n  var owner = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var action = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Allow;\n\n  _classCallCheck(this, Permission);\n\n  this.name = name;\n  this.action = action;\n  this.owner = owner;\n  this.priority = priority;\n  this.resources = resources;\n  this.roles = roles;\n};\n\nvar AllowAll = new Permission('Allow all', MaxPriority, AnyResource, AnyRole, false, Allow);\nvar DenyAll = new Permission('Deny all', MinPriority, AnyResource, AnyRole, false, Deny);\nexport { StreamChat, logChatPromiseExecution, ClientState, Channel, ChannelState, StableWSConnection, Allow, Deny, AnyResource, AnyRole, MaxPriority, MinPriority, Permission, AllowAll, DenyAll, EVENT_MAP, isValidEventType, JWTUserToken, JWTServerToken, UserFromToken, DevToken, CheckSignature, encodeBase64, decodeBase64 };","map":{"version":3,"sources":["../src/channel_state.js","../src/events.js","../src/utils.js","../src/channel.js","../src/client_state.js","../src/connection.js","../jsonwebtoken","../crypto","../src/base64.js","../src/signing.js","../http","../https","../src/client.js","../src/permissions.js"],"names":["a","b","ChannelState","Immutable","channel","message","initializing","parsedMessages","newMessages","parsedMsg","updatedThreads","isThreadReply","parentID","thread","threadMessages","messages","parent_id","show_in_channel","i","idMatch","reaction","old","filterReaction","item","updated","newMessage","isRemoved","messageToRemove","removed","result","msg","filteredMessages","now","userID","lastEvent","Object","since","type","user","id","cid","EVENT_MAP","eventType","promise","console","sleep","setTimeout","Channel","validTypeRe","validIDRe","Error","client","url","event","options","payload","filter_conditions","body","user_id","data","channelData","accept_invite","reject_invite","add_members","add_moderators","invites","remove_members","demote_moderators","opts","channel_cid","message_id","form_data","diff","min","max","messageSlice","lastMessage","Promise","logChatPromiseExecution","defaultOptions","state","watch","presence","combined","tags","response","ids","messageIds","lastRead","count","m","u","queryURL","userId","clearHistory","clear_history","key","callbackOrNothing","valid","isValidEventType","callback","value","s","last_read","received_at","listeners","listener","w","watcher","read","parsedRead","ClientState","users","StableWSConnection","wsURL","clientID","messageCallback","recoverCallback","eventCallback","logger","healthCheck","clearInterval","ws","isClosedPromise","resolve","interval","open","wsID","error","healthy","online","window","Math","that","JSON","e","setInterval","client_id","map","res","k","len","arr","kValue","mappedValue","fromByteArray","char","String","L","l","r","A","x","c","extraData","jwtOptions","algorithm","noTimestamp","jwt","server","fragments","token","b64Payload","decodeBase64","encodeBase64","Buffer","hash","crypto","obj","StreamChat","secretOrOptions","timeout","nodeOptions","httpAgent","http","keepAlive","httpsAgent","https","process","isFunction","DevToken","uuidv4","Boolean","userToken","tokenUserId","UserFromToken","messageID","apn_template","apnTemplate","firebase_template","firebaseTemplate","firebase_data_template","firebaseDataTemplate","anon","created_at","updated_at","last_active","guestUser","extra","exp","JWTUserToken","unsubscribe","el","config","axios","params","isReadableStream","uri","fileField","name","contentType","fetch","method","headers","Authorization","err","jsonString","messageEvent","mute","muted","muteStatus","createdAt","expiresAt","cids","lastMessageIDs","lastMessageId","$in","last_message_at","limit","recovery","last_message_ids","refMap","refs","channelID","user_details","user_token","server_determines_connection_id","qs","encodeURIComponent","authType","handshake","sort","sortFields","v","field","direction","_user","channels","channelState","filterConditions","push_provider","custom","channelType","arguments","userMap","userObject","target_user_id","targetUserID","target_id","targetID","currentUserID","target_message_id","commands","clonedMessage","reservedMessageFields","hard","pkg","api_key","connection_id","connectionID","JWTServerToken","CheckSignature","Allow","Deny","AnyResource","AnyRole","MaxPriority","MinPriority","Permission","resources","roles","owner","action","AllowAll","DenyAll"],"mappings":"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","sourcesContent":["import Immutable from 'seamless-immutable';\n\n/**\n * ChannelState - A container class for the channel state.\n */\n\nfunction byDate(a, b) {\n\treturn a.created_at - b.created_at;\n}\n\nexport class ChannelState {\n\tconstructor(channel) {\n\t\tthis._channel = channel;\n\t\tthis.watcher_count = 0;\n\t\tthis.typing = Immutable({});\n\t\tthis.read = Immutable({});\n\t\tthis.messages = Immutable([]);\n\t\tthis.threads = Immutable({});\n\t\t// a list of users to hide messages from\n\t\tthis.mutedUsers = Immutable([]);\n\t\tthis.watchers = Immutable({});\n\t\tthis.members = Immutable({});\n\t\tthis.membership = Immutable({});\n\t\tthis.last_message_at =\n\t\t\tchannel.last_message_at != null ? new Date(channel.last_message_at) : null;\n\t}\n\n\t/**\n\t * addMessageSorted - Add a message to the state\n\t *\n\t * @param {object} newMessage A new message\n\t *\n\t */\n\taddMessageSorted(newMessage) {\n\t\treturn this.addMessagesSorted([newMessage]);\n\t}\n\n\t/**\n\t * messageToImmutable - Takes the message object. Parses the dates, sets __html\n\t * and sets the status to received if missing. Returns an immutable message object\n\t *\n\t * @param {object} message an Immutable message object\n\t *\n\t */\n\tmessageToImmutable(message) {\n\t\tmessage.__html = message.html;\n\t\t// parse the date..\n\t\tmessage.created_at = new Date(message.created_at);\n\t\tmessage.updated_at = new Date(message.updated_at);\n\t\tif (!message.status) {\n\t\t\tmessage.status = 'received';\n\t\t}\n\t\treturn Immutable(message);\n\t}\n\n\t/**\n\t * addMessagesSorted - Add the list of messages to state and resorts the messages\n\t *\n\t * @param {array}   newMessages    A list of messages\n\t * @param {boolean} initializing   Weather channel is being initialized.\n\t *\n\t */\n\taddMessagesSorted(newMessages, initializing = false) {\n\t\t// parse all the new message dates and add __html for react\n\t\tconst parsedMessages = [];\n\t\tfor (const message of newMessages) {\n\t\t\tif (initializing && this.threads[message.id]) {\n\t\t\t\t// If we are initializing the state of channel (e.g., in case of connection recovery),\n\t\t\t\t// then in that case we remove thread related to this message from threads object.\n\t\t\t\t// This way we can ensure that we don't have any stale data in thread object\n\t\t\t\t// and consumer can refetch the replies.\n\t\t\t\tthis.threads = Immutable.without(this.threads, message.id);\n\t\t\t}\n\t\t\tconst parsedMsg = this.messageToImmutable(message);\n\t\t\tparsedMessages.push(parsedMsg);\n\t\t\tif (parsedMsg.created_at > this.last_message_at) {\n\t\t\t\tthis.last_message_at = parsedMsg.created_at;\n\t\t\t}\n\t\t}\n\n\t\t// update or append the messages...\n\t\tconst updatedThreads = [];\n\t\tfor (const message of parsedMessages) {\n\t\t\tconst isThreadReply = message.parent_id && !message.show_in_channel;\n\t\t\t// add to the main message list\n\t\t\tif (!isThreadReply) {\n\t\t\t\tthis.messages = this._addToMessageList(this.messages, message);\n\t\t\t}\n\t\t\t// add to the thread if applicable..\n\t\t\tconst parentID = message.parent_id;\n\t\t\tif (parentID) {\n\t\t\t\tconst thread = this.threads[parentID] || Immutable([]);\n\t\t\t\tconst threadMessages = this._addToMessageList(thread, message);\n\t\t\t\tthis.threads = this.threads.set(parentID, threadMessages);\n\t\t\t\tupdatedThreads.push(parentID);\n\t\t\t}\n\t\t}\n\n\t\t// Resort the main messages and the threads that changed...\n\t\tconst messages = [...this.messages];\n\t\tmessages.sort(byDate);\n\t\tthis.messages = Immutable(messages);\n\t\tfor (const parentID of updatedThreads) {\n\t\t\tconst threadMessages = this.threads[parentID]\n\t\t\t\t? [...this.threads[parentID]]\n\t\t\t\t: [];\n\t\t\tthreadMessages.sort(byDate);\n\t\t\tthis.threads = this.threads.set(parentID, threadMessages);\n\t\t}\n\t}\n\n\taddReaction(reaction, message) {\n\t\tconst { messages } = this;\n\t\tif (!message) return;\n\t\tconst { parent_id, show_in_channel } = message;\n\n\t\tif (parent_id && this.threads[parent_id]) {\n\t\t\tconst thread = this.threads[parent_id];\n\n\t\t\tfor (let i = 0; i < thread.length; i++) {\n\t\t\t\tlet message = thread[i];\n\t\t\t\tmessage = this._addReactionToMessage(message, reaction);\n\t\t\t\tif (!message) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.threads = this.threads.set(parent_id, thread.set(i, message));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif ((!show_in_channel && !parent_id) || show_in_channel) {\n\t\t\tfor (let i = 0; i < messages.length; i++) {\n\t\t\t\tlet message = messages[i];\n\t\t\t\tmessage = this._addReactionToMessage(message, reaction);\n\t\t\t\tif (!message) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.messages = messages.set(i, message);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t_addReactionToMessage(message, reaction) {\n\t\tconst idMatch = message.id && message.id === reaction.message_id;\n\n\t\tif (!idMatch) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmessage = this._removeReactionFromMessage(message, reaction);\n\t\tif (this._channel.getClient().userID === reaction.user.id) {\n\t\t\tmessage = message.update('own_reactions', (old = []) =>\n\t\t\t\told.concat([reaction]),\n\t\t\t);\n\t\t}\n\t\tmessage = message.update('latest_reactions', (old = []) =>\n\t\t\told.concat([reaction]),\n\t\t);\n\n\t\tmessage = message.updateIn(['reaction_counts', reaction.type], old =>\n\t\t\told ? old + 1 : 1,\n\t\t);\n\n\t\treturn message;\n\t}\n\n\t_removeReactionFromMessage(message, reaction) {\n\t\tconst filterReaction = old =>\n\t\t\told.filter(\n\t\t\t\titem => item.type !== reaction.type || item.user.id !== reaction.user.id,\n\t\t\t);\n\t\tmessage = message.update('own_reactions', filterReaction);\n\t\tmessage = message.update('latest_reactions', filterReaction);\n\t\treturn message;\n\t}\n\n\tremoveReaction(reaction, message) {\n\t\tconst { messages } = this;\n\t\tif (!message) return;\n\t\tconst { parent_id, show_in_channel } = message;\n\n\t\tif (parent_id && this.threads[parent_id]) {\n\t\t\tconst thread = this.threads[parent_id];\n\t\t\tfor (let i = 0; i < thread.length; i++) {\n\t\t\t\tlet message = thread[i];\n\t\t\t\tconst idMatch = message.id && message.id === reaction.message_id;\n\n\t\t\t\tif (!idMatch) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tmessage = this._removeReactionFromMessage(message, reaction);\n\t\t\t\tmessage = message.updateIn(['reaction_counts', reaction.type], old =>\n\t\t\t\t\told ? old - 1 : 0,\n\t\t\t\t);\n\n\t\t\t\tthis.threads = this.threads.set(parent_id, thread.set(i, message));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ((!show_in_channel && !parent_id) || show_in_channel) {\n\t\t\tfor (let i = 0; i < messages.length; i++) {\n\t\t\t\tlet message = messages[i];\n\t\t\t\tconst idMatch = message.id && message.id === reaction.message_id;\n\n\t\t\t\tif (!idMatch) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tmessage = this._removeReactionFromMessage(message, reaction);\n\t\t\t\tmessage = message.updateIn(['reaction_counts', reaction.type], old =>\n\t\t\t\t\told ? old - 1 : 0,\n\t\t\t\t);\n\n\t\t\t\tthis.messages = messages.set(i, message);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isnt found\n\t *\n\t * @param {array} messages A list of messages\n\t * @param {object} newMessage The new message\n\t *\n\t */\n\t_addToMessageList(messages, newMessage) {\n\t\tlet updated = false;\n\n\t\tfor (let i = 0; i < messages.length; i++) {\n\t\t\tconst message = messages[i];\n\t\t\tconst idMatch = message.id && newMessage.id && message.id === newMessage.id;\n\n\t\t\tif (idMatch) {\n\t\t\t\tmessages = messages.set(i, newMessage);\n\t\t\t\tupdated = true;\n\t\t\t}\n\t\t}\n\n\t\tif (!updated) {\n\t\t\tmessages = messages.concat([newMessage]);\n\t\t}\n\n\t\treturn messages;\n\t}\n\n\t/**\n\t * removeMessage - Description\n\t *\n\t * @param {type} messageToRemove Object of the message to remove. Needs to have at id specified.\n\t *\n\t * @return {boolean} Returns if the message was removed\n\t */\n\tremoveMessage(messageToRemove) {\n\t\tlet isRemoved = false;\n\t\tif (messageToRemove.parent_id && this.threads[messageToRemove.parent_id]) {\n\t\t\tconst { removed, result: threadMessages } = this.removeMessageFromArray(\n\t\t\t\tthis.threads[messageToRemove.parent_id],\n\t\t\t\tmessageToRemove,\n\t\t\t);\n\t\t\tthis.threads = this.threads[messageToRemove.parent_id].set(\n\t\t\t\tmessageToRemove.parent_id,\n\t\t\t\tthreadMessages,\n\t\t\t);\n\t\t\tisRemoved = removed;\n\t\t} else {\n\t\t\tconst { removed, result: messages } = this.removeMessageFromArray(\n\t\t\t\tthis.messages,\n\t\t\t\tmessageToRemove,\n\t\t\t);\n\t\t\tthis.messages = messages;\n\t\t\tisRemoved = removed;\n\t\t}\n\n\t\treturn isRemoved;\n\t}\n\n\tremoveMessageFromArray = (msgArray, msg) => {\n\t\tlet removed = false;\n\t\tconst result = msgArray.flatMap(message => {\n\t\t\tconst idMatch = message.id && msg.id && message.id === msg.id;\n\t\t\tif (idMatch) {\n\t\t\t\tremoved = true;\n\t\t\t\treturn [];\n\t\t\t} else {\n\t\t\t\treturn message;\n\t\t\t}\n\t\t});\n\n\t\treturn { removed, result };\n\t};\n\t/**\n\t * filterErrorMessages - Removes error messages from the channel state.\n\t *\n\t */\n\tfilterErrorMessages() {\n\t\tconst filteredMessages = this.messages.flatMap(message => {\n\t\t\tif (message.type !== 'error') {\n\t\t\t\treturn message;\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t});\n\n\t\tthis.messages = Immutable(filteredMessages);\n\t}\n\n\t/**\n\t * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds\n\t */\n\tclean() {\n\t\tconst now = new Date();\n\t\t// prevent old users from showing up as typing\n\t\tfor (const [userID, lastEvent] of Object.entries(this.typing)) {\n\t\t\tconst since = now - new Date(lastEvent.received_at);\n\t\t\tif (since > 7000) {\n\t\t\t\tthis.typing = this.typing.without(userID);\n\t\t\t\tthis._channel.getClient().dispatchEvent({\n\t\t\t\t\ttype: 'typing.stop',\n\t\t\t\t\tuser: { id: userID },\n\t\t\t\t\tcid: this._channel.cid,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tclearMessages() {\n\t\tthis.messages = Immutable([]);\n\t}\n}\n","export const EVENT_MAP = {\n\t'user.presence.changed': true,\n\t'user.watching.start': true,\n\t'user.watching.stop': true,\n\t'user.updated': true,\n\t'typing.start': true,\n\t'typing.stop': true,\n\t'message.new': true,\n\t'message.updated': true,\n\t'message.deleted': true,\n\t'message.read': true,\n\t'reaction.new': true,\n\t'reaction.deleted': true,\n\t'member.added': true,\n\t'member.updated': true,\n\t'member.removed': true,\n\t'channel.updated': true,\n\t'channel.muted': true,\n\t'channel.unmuted': true,\n\t'channel.deleted': true,\n\t'channel.truncated': true,\n\t'channel.created': true,\n\t'channel.hidden': true,\n\t'health.check': true,\n\t'notification.message_new': true,\n\t'notification.mark_read': true,\n\t'notification.invited': true,\n\t'notification.invite_accepted': true,\n\t'notification.added_to_channel': true,\n\t'notification.removed_from_channel': true,\n\t'notification.mutes_updated': true,\n\t'notification.channel_deleted': true,\n\t'notification.channel_truncated': true,\n\t'notification.channel_mutes_updated': true,\n\t// local events\n\t'connection.changed': true,\n\t'connection.recovered': true,\n};\n\nexport function isValidEventType(eventType) {\n\tif (eventType === 'all') {\n\t\treturn true;\n\t}\n\treturn EVENT_MAP[eventType] || false;\n}\n","/**\n * logChatPromiseExecution - utility function for logging the execution of a promise..\n *  use this when you want to run the promise and handle errors by logging a warning\n *\n * @param {type} promise The promise you want to run and log\n * @param {type} name    A descriptive name of what the promise does for log output\n *\n */\n\nexport function logChatPromiseExecution(promise, name) {\n\tpromise\n\t\t.then(() => {\n\t\t\t// do nothing...\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.warn(`failed to do ${name}, ran into error: `, error);\n\t\t});\n}\n\nexport const sleep = m => new Promise(r => setTimeout(r, m));\n","import Immutable from 'seamless-immutable';\nimport { ChannelState } from './channel_state';\nimport { isValidEventType } from './events';\nimport { logChatPromiseExecution } from './utils';\n\n/**\n * Channel - The Channel class manages it's own state.\n */\nexport class Channel {\n\t/**\n\t * constructor - Create a channel\n\t *\n\t * @param {Client} client the chat client\n\t * @param {string} type  the type of channel\n\t * @param {string} [id]  the id of the chat\n\t * @param {type} custom any additional custom params\n\t *\n\t * @return {Channel} Returns a new uninitialized channel\n\t */\n\tconstructor(client, type, id, data) {\n\t\tconst validTypeRe = /^[\\w_-]+$/;\n\t\tconst validIDRe = /^[\\w!_-]+$/;\n\n\t\tif (!validTypeRe.test(type)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid chat type ${type}, letters, numbers and \"_-\" are allowed`,\n\t\t\t);\n\t\t}\n\t\tif (!validIDRe.test(id)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid chat id ${id}, letters, numbers and \"!-_\" are allowed`,\n\t\t\t);\n\t\t}\n\n\t\tthis._client = client;\n\t\tthis.type = type;\n\t\tthis.id = id;\n\t\t// used by the frontend, gets updated:\n\t\tthis.data = data;\n\t\t// this._data is used for the requests...\n\t\tthis._data = { ...data };\n\n\t\tthis.cid = `${type}:${id}`;\n\t\tthis.listeners = {};\n\t\t// perhaps the state variable should be private\n\t\tthis.state = new ChannelState(this);\n\t\tthis.initialized = false;\n\t\tthis.lastTypingEvent = null;\n\t\tthis.isTyping = false;\n\t\tthis.disconnected = false;\n\t}\n\n\t/**\n\t * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error\n\t *\n\t * @return {object}\n\t */\n\tgetClient() {\n\t\tif (this.disconnected === true) {\n\t\t\tthrow Error(`You can't use a channel after client.disconnect() was called`);\n\t\t}\n\t\treturn this._client;\n\t}\n\n\t/**\n\t * getConfig - Get the configs for this channel type\n\t *\n\t * @return {object}\n\t */\n\tgetConfig() {\n\t\tconst client = this.getClient();\n\t\treturn client.configs[this.type];\n\t}\n\n\t/**\n\t * sendMessage - Send a message to this channel\n\t *\n\t * @param {object} message The Message object\n\t *\n\t * @return {object} The Server Response\n\t */\n\n\tasync sendMessage(message) {\n\t\treturn await this.getClient().post(this._channelURL() + '/message', {\n\t\t\tmessage,\n\t\t});\n\t}\n\n\tsendFile(uri, name, contentType, user) {\n\t\treturn this.getClient().sendFile(\n\t\t\t`${this._channelURL()}/file`,\n\t\t\turi,\n\t\t\tname,\n\t\t\tcontentType,\n\t\t\tuser,\n\t\t);\n\t}\n\n\tsendImage(uri, name, contentType, user) {\n\t\treturn this.getClient().sendFile(\n\t\t\t`${this._channelURL()}/image`,\n\t\t\turi,\n\t\t\tname,\n\t\t\tcontentType,\n\t\t\tuser,\n\t\t);\n\t}\n\n\tdeleteFile(url) {\n\t\treturn this.getClient().delete(`${this._channelURL()}/file`, { url });\n\t}\n\n\tdeleteImage(url) {\n\t\treturn this.getClient().delete(`${this._channelURL()}/image`, { url });\n\t}\n\n\t/**\n\t * sendEvent - Send an event on this channel\n\t *\n\t * @param {object} event for example {type: 'message.read'}\n\t *\n\t * @return {object} The Server Response\n\t */\n\tasync sendEvent(event) {\n\t\tthis._checkInitialized();\n\t\treturn await this.getClient().post(this._channelURL() + '/event', {\n\t\t\tevent,\n\t\t});\n\t}\n\n\t/**\n\t * search - Query messages\n\t *\n\t * @param {object|string}  message search query or object MongoDB style filters\n\t * @param {object} options       Option object, {user_id: 'tommaso'}\n\t *\n\t * @return {object} search messages response\n\t */\n\tasync search(query, options = {}) {\n\t\t// Return a list of channels\n\t\tconst payload = {\n\t\t\tfilter_conditions: { cid: this.cid },\n\t\t\t...options,\n\t\t};\n\t\tif (typeof query === 'string') {\n\t\t\tpayload.query = query;\n\t\t} else if (typeof query === 'object') {\n\t\t\tpayload.message_filter_conditions = query;\n\t\t} else {\n\t\t\tthrow Error(`Invalid type ${typeof query} for query parameter`);\n\t\t}\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.wsPromise;\n\n\t\treturn await this.getClient().get(this.getClient().baseURL + '/search', {\n\t\t\tpayload,\n\t\t});\n\t}\n\n\t/**\n\t * sendReaction - Send a reaction about a message\n\t *\n\t * @param {string} messageID the message id\n\t * @param {object} reaction the reaction object for instance {type: 'love'}\n\t * @param {string} user_id the id of the user (used only for server side request) default null\n\t *\n\t * @return {object} The Server Response\n\t */\n\tasync sendReaction(messageID, reaction, user_id) {\n\t\tif (!messageID) {\n\t\t\tthrow Error(`Message id is missing`);\n\t\t}\n\t\tif (!reaction || Object.keys(reaction).length === 0) {\n\t\t\tthrow Error(`Reaction object is missing`);\n\t\t}\n\t\tconst body = {\n\t\t\treaction,\n\t\t};\n\t\tif (user_id != null) {\n\t\t\tbody.reaction = { ...reaction, user: { id: user_id } };\n\t\t}\n\t\treturn await this.getClient().post(\n\t\t\tthis.getClient().baseURL + `/messages/${messageID}/reaction`,\n\t\t\tbody,\n\t\t);\n\t}\n\n\t/**\n\t * deleteReaction - Delete a reaction by user and type\n\t *\n\t * @param {string} messageID the id of the message from which te remove the reaction\n\t * @param {string} reactionType the type of reaction that should be removed\n\t * @param {string} user_id the id of the user (used only for server side request) default null\n\t *\n\t * @return {object} The Server Response\n\t */\n\tdeleteReaction(messageID, reactionType, user_id) {\n\t\tthis._checkInitialized();\n\t\tif (!reactionType || !messageID) {\n\t\t\tthrow Error(\n\t\t\t\t'Deleting a reaction requires specifying both the message and reaction type',\n\t\t\t);\n\t\t}\n\n\t\tconst url =\n\t\t\tthis.getClient().baseURL + `/messages/${messageID}/reaction/${reactionType}`;\n\t\t//provided when server side request\n\t\tif (user_id) {\n\t\t\treturn this.getClient().delete(url, { user_id });\n\t\t}\n\n\t\treturn this.getClient().delete(url);\n\t}\n\n\t/**\n\t * update - Edit the channel's custom properties\n\t *\n\t * @param {object} channelData The object to update the custom properties of this channel with\n\t * @param {object} updateMessage Optional message object for channel members notification\n\t * @return {type} The server response\n\t */\n\tasync update(channelData, updateMessage) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tmessage: updateMessage,\n\t\t\tdata: channelData,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\t/**\n\t * delete - Delete the channel. Messages are permanently removed.\n\t *\n\t * @return {object} The server response\n\t */\n\tasync delete() {\n\t\treturn await this.getClient().delete(this._channelURL());\n\t}\n\n\t/**\n\t * truncate - Removes all messages from the channel\n\t *\n\t * @return {object} The server response\n\t */\n\tasync truncate() {\n\t\treturn await this.getClient().post(this._channelURL() + '/truncate');\n\t}\n\n\t/**\n\t * acceptInvite - accept invitation to the channel\n\t *\n\t * @param {object} options The object to update the custom properties of this channel with\n\t *\n\t * @return {type} The server response\n\t */\n\tasync acceptInvite(options = {}) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\taccept_invite: true,\n\t\t\t...options,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\t/**\n\t * acceptInvite - reject invitation to the channel\n\t *\n\t * @param {object} options The object to update the custom properties of this channel with\n\t *\n\t * @return {type} The server response\n\t */\n\tasync rejectInvite(options = {}) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\treject_invite: true,\n\t\t\t...options,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\t/**\n\t * addMembers - add members to the channel\n\t *\n\t * @param {array} members An array of member identifiers\n\t * @param {object} message Optional message object for channel members notification\n\t * @return {type} The server response\n\t */\n\tasync addMembers(members, message) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tadd_members: members,\n\t\t\tmessage,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\t/**\n\t * addModerators - add moderators to the channel\n\t *\n\t * @param {array} members An array of member identifiers\n\t * @param {object} message Optional message object for channel members notification\n\t * @return {type} The server response\n\t */\n\tasync addModerators(members, message) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tadd_moderators: members,\n\t\t\tmessage,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\t/**\n\t * inviteMembers - invite members to the channel\n\t *\n\t * @param {array} members An array of member identifiers\n\t * @param {object} message Optional message object for channel members notification\n\t * @return {type} The server response\n\t */\n\tasync inviteMembers(members, message) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tinvites: members,\n\t\t\tmessage,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\t/**\n\t * removeMembers - remove members from channel\n\t *\n\t * @param {array} members An array of member identifiers\n\t * @param {object} message Optional message object for channel members notification\n\t * @return {type} The server response\n\t */\n\tasync removeMembers(members, message) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tremove_members: members,\n\t\t\tmessage,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\t/**\n\t * demoteModerators - remove moderator role from channel members\n\t *\n\t * @param {array} members An array of member identifiers\n\t * @param {object} message Optional message object for channel members notification\n\t * @return {type} The server response\n\t */\n\tasync demoteModerators(members, message) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tdemote_moderators: members,\n\t\t\tmessage,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\t/**\n\t * mute - mutes the current channel\n\t * @param {object} \t\t\t\topts expiration or user_id\n\t * @return {object} \t\t\tThe server response\n\t *\n\t * example with expiration:\n\t * await channel.mute({expiration: moment.duration(2, 'weeks')});\n\t *\n\t * example server side:\n\t * await channel.mute({user_id: userId});\n\t *\n\t */\n\tasync mute(opts = {}) {\n\t\treturn await this.getClient().post(\n\t\t\tthis.getClient().baseURL + '/moderation/mute/channel',\n\t\t\t{\n\t\t\t\tchannel_cid: this.cid,\n\t\t\t\t...opts,\n\t\t\t},\n\t\t);\n\t}\n\n\t/**\n\t * unmute - mutes the current channel\n\t * @param {object} opts user_id\n\t * @return {object} \t\t\tThe server response\n\t *\n\t * example server side:\n\t * await channel.unmute({user_id: userId});\n\t */\n\tasync unmute(opts = {}) {\n\t\treturn await this.getClient().post(\n\t\t\tthis.getClient().baseURL + '/moderation/unmute/channel',\n\t\t\t{\n\t\t\t\tchannel_cid: this.cid,\n\t\t\t\t...opts,\n\t\t\t},\n\t\t);\n\t}\n\n\t/**\n\t * muteStatus - returns the mute status for the current channel\n\t * @return {object} { muted: true | false, createdAt: Date | null, expiresAt: Date | null}\n\t */\n\tmuteStatus() {\n\t\tthis._checkInitialized();\n\t\treturn this.getClient()._muteStatus(this.cid);\n\t}\n\n\tsendAction(messageID, formData) {\n\t\tthis._checkInitialized();\n\t\tif (!messageID) {\n\t\t\tthrow Error(`Message id is missing`);\n\t\t}\n\t\treturn this.getClient().post(\n\t\t\tthis.getClient().baseURL + `/messages/${messageID}/action`,\n\t\t\t{\n\t\t\t\tmessage_id: messageID,\n\t\t\t\tform_data: formData,\n\t\t\t\tid: this.id,\n\t\t\t\ttype: this.type,\n\t\t\t},\n\t\t);\n\t}\n\n\t/**\n\t * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.\n\t *  Call this on every keystroke\n\t */\n\tasync keystroke() {\n\t\tif (!this.getConfig().typing_events) {\n\t\t\treturn;\n\t\t}\n\t\tconst now = new Date();\n\t\tconst diff = now - this.lastTypingEvent;\n\t\tthis.lastKeyStroke = now;\n\t\tthis.isTyping = true;\n\t\t// send a typing.start every 2 seconds\n\t\tif (diff > 2000) {\n\t\t\tthis.lastTypingEvent = new Date();\n\t\t\tawait this.sendEvent({\n\t\t\t\ttype: 'typing.start',\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * stopTyping - Sets last typing to null and sends the typing.stop event\n\t */\n\tasync stopTyping() {\n\t\tif (!this.getConfig().typing_events) {\n\t\t\treturn;\n\t\t}\n\t\tthis.lastTypingEvent = null;\n\t\tthis.isTyping = false;\n\t\tawait this.sendEvent({\n\t\t\ttype: 'typing.stop',\n\t\t});\n\t}\n\n\t/**\n\t * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted\n\t *\n\t * @return {type} Description\n\t */\n\tlastMessage() {\n\t\t// get last 5 messages, sort, return the latest\n\t\t// get a slice of the last 5\n\t\tlet min = this.state.messages.length - 5;\n\t\tif (min < 0) {\n\t\t\tmin = 0;\n\t\t}\n\t\tconst max = this.state.messages.length + 1;\n\t\tconst messageSlice = this.state.messages.slice(min, max).asMutable();\n\n\t\t// sort by pk desc\n\t\tmessageSlice.sort((a, b) => b.created_at - a.created_at);\n\n\t\tlet lastMessage;\n\t\tif (messageSlice.length > 0) {\n\t\t\tlastMessage = messageSlice[0];\n\t\t}\n\t\treturn lastMessage;\n\t}\n\n\t/**\n\t * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled\n\t *\n\t * @return {Promise} Description\n\t */\n\tasync markRead(data = {}) {\n\t\tthis._checkInitialized();\n\n\t\tif (!this.getConfig().read_events) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\treturn await this.getClient().post(this._channelURL() + '/read', {\n\t\t\t...data,\n\t\t});\n\t}\n\n\t/**\n\t * clean - Cleans the channel state and fires stop typing if needed\n\t */\n\tclean() {\n\t\tif (this.lastKeyStroke) {\n\t\t\tconst now = new Date();\n\t\t\tconst diff = now - this.lastKeyStroke;\n\t\t\tif (diff > 1000 && this.isTyping) {\n\t\t\t\tlogChatPromiseExecution(this.stopTyping(), 'stop typing event');\n\t\t\t}\n\t\t}\n\n\t\tthis.state.clean();\n\t}\n\n\t/**\n\t * watch - Loads the initial channel state and watches for changes\n\t *\n\t * @param {object} options additional options for the query endpoint\n\t *\n\t * @return {object} The server response\n\t */\n\tasync watch(options) {\n\t\tconst defaultOptions = {\n\t\t\tstate: true,\n\t\t\twatch: true,\n\t\t\tpresence: false,\n\t\t};\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.getClient().wsPromise;\n\n\t\tif (!this.getClient()._hasConnectionID()) {\n\t\t\tdefaultOptions.watch = false;\n\t\t}\n\n\t\tconst combined = { ...defaultOptions, ...options };\n\t\tconst state = await this.query(combined);\n\t\tthis.initialized = true;\n\t\tthis._initializeState(state);\n\t\tthis.data = state.channel;\n\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`channel:watch() - started watching channel ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\t\treturn state;\n\t}\n\n\t/**\n\t * stopwatching - Stops watching the channel\n\t *\n\t * @return {object} The server response\n\t */\n\tasync stopWatching() {\n\t\tconst response = await this.getClient().post(\n\t\t\tthis._channelURL() + '/stop-watching',\n\t\t\t{},\n\t\t);\n\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`channel:watch() - stopped watching channel ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * getReplies - List the message replies for a parent message\n\t *\n\t * @param {type} parent_id The message parent id, ie the top of the thread\n\t * @param {type} options   Pagination params, ie {limit:10, idlte: 10}\n\t *\n\t * @return {type} A response with a list of messages\n\t */\n\tasync getReplies(parent_id, options) {\n\t\tconst data = await this.getClient().get(\n\t\t\tthis.getClient().baseURL + `/messages/${parent_id}/replies`,\n\t\t\t{\n\t\t\t\t...options,\n\t\t\t},\n\t\t);\n\n\t\t// add any messages to our thread state\n\t\tif (data.messages) {\n\t\t\tthis.state.addMessagesSorted(data.messages);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t/**\n\t * getReactions - List the reactions, supports pagination\n\t *\n\t * @param {string} message_id The message id\n\t * @param {object} options    The pagination options\n\t *\n\t * @return {object} Server response\n\t */\n\tgetReactions(message_id, options) {\n\t\treturn this.getClient().get(\n\t\t\tthis.getClient().baseURL + `/messages/${message_id}/reactions`,\n\t\t\t{\n\t\t\t\t...options,\n\t\t\t},\n\t\t);\n\t}\n\n\t/**\n\t * getMessagesById - Retrieves a list of messages by ID\n\t *\n\t * @param {string} messageIds The ids of the messages to retrieve from this channel\n\t *\n\t * @return {object} Server response\n\t */\n\tgetMessagesById(messageIds) {\n\t\treturn this.getClient().get(this._channelURL() + '/messages', {\n\t\t\tids: messageIds.join(','),\n\t\t});\n\t}\n\n\t/**\n\t * lastRead - returns the last time the user marked the channel as read if the user never marked the channel as read, this will return null\n\t * @return {date}\n\t */\n\tlastRead() {\n\t\tthis._checkInitialized();\n\t\treturn this.state.read[this.getClient().userID]\n\t\t\t? this.state.read[this.getClient().userID].last_read\n\t\t\t: null;\n\t}\n\n\t/**\n\t * countUnread - Count the number of messages with a date thats newer than the last read timestamp\n\t *\n\t * @param [date] lastRead the time that the user read a message, defaults to current user's read state\n\t *\n\t * @return {int} Unread count\n\t */\n\tcountUnread(lastRead) {\n\t\tif (lastRead == null) {\n\t\t\tlastRead = this.lastRead();\n\t\t}\n\t\tlet count = 0;\n\t\tfor (const m of this.state.messages) {\n\t\t\tif (this.getClient().userID === m.user.id) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (lastRead == null) {\n\t\t\t\tcount++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (m.created_at > lastRead) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * countUnread - Count the number of unread messages mentioning the current user\n\t *\n\t * @return {int} Unread mentions count\n\t */\n\tcountUnreadMentions() {\n\t\tconst lastRead = this.lastRead();\n\t\tlet count = 0;\n\t\tfor (const m of this.state.messages) {\n\t\t\tif (this.getClient().userID === m.user.id) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (lastRead == null) {\n\t\t\t\tcount++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (m.created_at > lastRead) {\n\t\t\t\tconst userID = this.getClient().userID;\n\t\t\t\tif (m.mentioned_users.findIndex(u => u.id === userID) !== -1) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * create - Creates a new channel\n\t *\n\t * @return {type} The Server Response\n\t */\n\tcreate = async () => {\n\t\tconst options = {\n\t\t\twatch: false,\n\t\t\tstate: false,\n\t\t\tpresence: false,\n\t\t};\n\t\treturn await this.query(options);\n\t};\n\n\t/**\n\t * query - Query the API, get messages, members or other channel fields\n\t *\n\t * @param {object} options The query options\n\t *\n\t * @return {object} Returns a query response\n\t */\n\tasync query(options) {\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.getClient().wsPromise;\n\n\t\tlet queryURL = `${this.getClient().baseURL}/channels/${this.type}`;\n\t\tif (this.id) {\n\t\t\tqueryURL += `/${this.id}`;\n\t\t}\n\n\t\tconst state = await this.getClient().post(queryURL + '/query', {\n\t\t\tdata: this._data,\n\t\t\tstate: true,\n\t\t\t...options,\n\t\t});\n\n\t\t// update the channel id if it was missing\n\t\tif (!this.id) {\n\t\t\tthis.id = state.channel.id;\n\t\t\tthis.cid = state.channel.cid;\n\t\t\t// set the channel as active...\n\t\t\tif (!(this.cid in this.getClient().activeChannels)) {\n\t\t\t\tthis.getClient().activeChannels[this.cid] = this;\n\t\t\t}\n\t\t}\n\n\t\tthis.getClient()._addChannelConfig(state);\n\n\t\t// add any messages to our channel state\n\t\tthis._initializeState(state);\n\n\t\treturn state;\n\t}\n\n\t/**\n\t * banUser - Bans a user from a channel\n\t *\n\t * @param targetUserID\n\t * @param options\n\t * @returns {Promise<*>}\n\t */\n\tasync banUser(targetUserID, options) {\n\t\tthis._checkInitialized();\n\t\treturn await this.getClient().banUser(targetUserID, {\n\t\t\t...options,\n\t\t\ttype: this.type,\n\t\t\tid: this.id,\n\t\t});\n\t}\n\n\t/**\n\t * hides the channel from queryChannels for the user until a message is added\n\t * If clearHistory is set to true - all messages will be removed for the user\n\t *\n\t * @param userId\n\t * @param clearHistory\n\t * @returns {Promise<*>}\n\t */\n\tasync hide(userId = null, clearHistory = false) {\n\t\tthis._checkInitialized();\n\n\t\treturn await this.getClient().post(`${this._channelURL()}/hide`, {\n\t\t\tuser_id: userId,\n\t\t\tclear_history: clearHistory,\n\t\t});\n\t}\n\n\t/**\n\t * removes the hidden status for a channel\n\t *\n\t * @param userId\n\t * @returns {Promise<*>}\n\t */\n\tasync show(userId = null) {\n\t\tthis._checkInitialized();\n\t\treturn await this.getClient().post(`${this._channelURL()}/show`, {\n\t\t\tuser_id: userId,\n\t\t});\n\t}\n\n\t/**\n\t * banUser - Removes the bans for a user on a channel\n\t *\n\t * @param targetUserID\n\t * @returns {Promise<*>}\n\t */\n\tasync unbanUser(targetUserID) {\n\t\tthis._checkInitialized();\n\t\treturn await this.getClient().unbanUser(targetUserID, {\n\t\t\ttype: this.type,\n\t\t\tid: this.id,\n\t\t});\n\t}\n\n\t/**\n\t * on - Listen to events on this channel.\n\t *\n\t * channel.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n\t * or\n\t * channel.on(event => {console.log(event.type)})\n\t *\n\t * @param {string} callbackOrString  The event type to listen for (optional)\n\t * @param {function} callbackOrNothing The callback to call\n\t *\n\t * @return {type} Description\n\t */\n\ton(callbackOrString, callbackOrNothing) {\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`Attaching listener for ${key} event on channel ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['event', 'channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\n\t\tthis.listeners[key].push(callback);\n\t}\n\n\t/**\n\t * off - Remove the event handler\n\t *\n\t */\n\toff(callbackOrString, callbackOrNothing) {\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`Removing listener for ${key} event from channel ${this.cid}`,\n\t\t\t{ tags: ['event', 'channel'], channel: this },\n\t\t);\n\t\tthis.listeners[key] = this.listeners[key].filter(value => value !== callback);\n\t}\n\n\t_handleChannelEvent(event) {\n\t\tconst channel = this;\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`channel:_handleChannelEvent - Received event of type { ${event.type} } on ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['event', 'channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\n\t\tconst s = channel.state;\n\t\tswitch (event.type) {\n\t\t\tcase 'typing.start':\n\t\t\t\ts.typing = s.typing.set(event.user.id, Immutable(event));\n\t\t\t\tbreak;\n\t\t\tcase 'typing.stop':\n\t\t\t\ts.typing = s.typing.without(event.user.id);\n\t\t\t\tbreak;\n\t\t\tcase 'message.read':\n\t\t\t\ts.read = s.read.set(\n\t\t\t\t\tevent.user.id,\n\t\t\t\t\tImmutable({ user: { ...event.user }, last_read: event.received_at }),\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'user.watching.start':\n\t\t\tcase 'user.updated':\n\t\t\t\ts.watchers = s.watchers.set(event.user.id, Immutable(event.user));\n\t\t\t\tbreak;\n\t\t\tcase 'user.watching.stop':\n\t\t\t\ts.watchers = s.watchers.without(event.user.id);\n\t\t\t\tbreak;\n\t\t\tcase 'message.new':\n\t\t\tcase 'message.updated':\n\t\t\tcase 'message.deleted':\n\t\t\t\ts.addMessageSorted(event.message);\n\t\t\t\tbreak;\n\t\t\tcase 'channel.truncated':\n\t\t\t\ts.clearMessages();\n\t\t\t\tbreak;\n\t\t\tcase 'member.added':\n\t\t\tcase 'member.updated':\n\t\t\t\ts.members = s.members.set(event.member.user_id, Immutable(event.member));\n\t\t\t\tbreak;\n\t\t\tcase 'member.removed':\n\t\t\t\ts.members = s.members.without(event.user.id);\n\t\t\t\tbreak;\n\t\t\tcase 'channel.updated':\n\t\t\t\tchannel.data = Immutable(event.channel);\n\t\t\t\tbreak;\n\t\t\tcase 'reaction.new':\n\t\t\t\ts.addReaction(event.reaction, event.message);\n\t\t\t\tbreak;\n\t\t\tcase 'reaction.deleted':\n\t\t\t\ts.removeReaction(event.reaction, event.message);\n\t\t\t\tbreak;\n\t\t\tcase 'channel.hidden':\n\t\t\t\tif (event.clear_history) {\n\t\t\t\t\ts.clearMessages();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\n\t\t// any event can send over the online count\n\t\tif (event.watcher_count !== undefined) {\n\t\t\tchannel.state.watcher_count = event.watcher_count;\n\t\t}\n\t}\n\n\t_callChannelListeners = event => {\n\t\tconst channel = this;\n\t\t// gather and call the listeners\n\t\tconst listeners = [];\n\t\tif (channel.listeners.all) {\n\t\t\tlisteners.push(...channel.listeners.all);\n\t\t}\n\t\tif (channel.listeners[event.type]) {\n\t\t\tlisteners.push(...channel.listeners[event.type]);\n\t\t}\n\n\t\t// call the event and send it to the listeners\n\t\tfor (const listener of listeners) {\n\t\t\tlistener(event);\n\t\t}\n\t};\n\n\t/**\n\t * _channelURL - Returns the channel url\n\t *\n\t * @return {string} The channel url\n\t */\n\t_channelURL = () => {\n\t\tif (!this.id) {\n\t\t\tthrow new Error('channel id is not defined');\n\t\t}\n\t\treturn `${this.getClient().baseURL}/channels/${this.type}/${this.id}`;\n\t};\n\n\t_checkInitialized() {\n\t\tif (!this.initialized && !this.getClient()._isUsingServerAuth()) {\n\t\t\tthrow Error(\n\t\t\t\t`Channel ${this.cid} hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve`,\n\t\t\t);\n\t\t}\n\t}\n\n\t_initializeState(state) {\n\t\t// add the Users\n\t\tif (state.members) {\n\t\t\tfor (const m of state.members) {\n\t\t\t\tthis.getClient().state.updateUserReference(m.user, this.cid);\n\t\t\t}\n\t\t}\n\n\t\tthis.state.membership = Immutable(state.membership ? state.membership : {});\n\n\t\tif (state.watchers) {\n\t\t\tfor (const w of state.watchers) {\n\t\t\t\tthis.getClient().state.updateUserReference(w.user, this.cid);\n\t\t\t}\n\t\t}\n\n\t\t// immutable list of maps\n\t\tconst messages = state.messages || [];\n\t\tif (!this.state.messages) {\n\t\t\tthis.state.messages = Immutable([]);\n\t\t}\n\t\tthis.state.addMessagesSorted(messages, true);\n\t\tthis.state.watcher_count = state.watcher_count;\n\t\t// convert the arrays into objects for easier syncing...\n\t\tif (state.watchers) {\n\t\t\tfor (const watcher of state.watchers) {\n\t\t\t\tthis.state.watchers = this.state.watchers.set(watcher.id, watcher);\n\t\t\t}\n\t\t}\n\n\t\t// initialize read state to last message or current time if the channel is empty\n\t\t// if the user is a member, this value will be overwritten later on otherwise this ensures\n\t\t// that eveything up to this point is not marked as unread\n\t\tif (this.getClient().userID != null) {\n\t\t\tconst last_read =\n\t\t\t\tthis.state.last_message_at != null\n\t\t\t\t\t? this.state.last_message_at\n\t\t\t\t\t: new Date();\n\t\t\tthis.state.read = this.state.read.set(this.getClient().user.id, {\n\t\t\t\tlast_read,\n\t\t\t});\n\t\t}\n\n\t\t// apply read state if part of the state\n\t\tif (state.read) {\n\t\t\tfor (const read of state.read) {\n\t\t\t\tconst parsedRead = Object.assign({ ...read });\n\t\t\t\tparsedRead.last_read = new Date(read.last_read);\n\t\t\t\tthis.state.read = this.state.read.set(read.user.id, parsedRead);\n\t\t\t}\n\t\t}\n\n\t\tif (state.members) {\n\t\t\tfor (const m of state.members) {\n\t\t\t\tthis.state.members = this.state.members.set(m.user.id, m);\n\t\t\t}\n\t\t}\n\t}\n\n\t_disconnect() {\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`channel:disconnect() - Disconnecting the channel ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['connection', 'channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\n\t\tthis.disconnected = true;\n\t}\n}\n","import Immutable from 'seamless-immutable';\n\n/**\n * ClientState - A container class for the client state.\n */\nexport class ClientState {\n\tconstructor() {\n\t\t// show the status for a certain user...\n\t\t// ie online, offline etc\n\t\tthis.users = Immutable({});\n\t\t// store which channels contain references to the specified user...\n\t\tthis.userChannelReferences = {};\n\t}\n\n\tupdateUsers(users) {\n\t\tfor (const user of users) {\n\t\t\tthis.updateUser(user);\n\t\t}\n\t}\n\n\tupdateUser(user) {\n\t\tif (user != null) {\n\t\t\tthis.users = this.users.set(user.id, Immutable(user));\n\t\t}\n\t}\n\n\tupdateUserReference(user, channelID) {\n\t\tif (user == null) {\n\t\t\treturn;\n\t\t}\n\t\tthis.updateUser(user);\n\t\tif (!this.userChannelReferences[user.id]) {\n\t\t\tthis.userChannelReferences[user.id] = {};\n\t\t}\n\t\tthis.userChannelReferences[user.id][channelID] = true;\n\t}\n}\n","import isoWS from 'isomorphic-ws';\nimport { sleep } from './utils';\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */\nexport class StableWSConnection {\n\tconstructor({\n\t\twsURL,\n\t\tclientID,\n\t\tuserID,\n\t\tmessageCallback,\n\t\trecoverCallback,\n\n\t\teventCallback,\n\t\tlogger,\n\t}) {\n\t\tthis.wsURL = wsURL;\n\t\tthis.clientID = clientID;\n\t\tthis.userID = userID;\n\t\t/** consecutive failures influence the duration of the timeout */\n\t\tthis.consecutiveFailures = 0;\n\t\t/** keep track of the total number of failures */\n\t\tthis.totalFailures = 0;\n\n\t\t/** We only make 1 attempt to reconnect at the same time.. */\n\t\tthis.isConnecting = false;\n\t\t/** Boolean that indicates if we have a working connection to the server */\n\t\tthis.isHealthy = false;\n\n\t\t/** Callback when the connection fails and recovers */\n\t\tthis.recoverCallback = recoverCallback;\n\t\tthis.messageCallback = messageCallback;\n\t\tthis.eventCallback = eventCallback;\n\n\t\tthis.logger = logger;\n\n\t\t/** Incremented when a new WS connection is made */\n\t\tthis.wsID = 1;\n\n\t\t/** Store the last event time for health checks */\n\t\tthis.lastEvent = null;\n\n\t\t/** Send a health check message every 30 seconds */\n\t\tthis.healthCheckInterval = 30 * 1000;\n\t\t/** Every second we verify that we didn't miss any health checks */\n\t\tthis.monitorInterval = 1 * 1000;\n\n\t\tthis._listenForConnectionChanges();\n\t}\n\n\t/**\n\t * connect - Connect to the WS URL\n\t *\n\t * @return {promise} Promise that completes once the first health check message is received\n\t */\n\tasync connect() {\n\t\tlet healthCheck;\n\t\tif (this.isConnecting) {\n\t\t\tthrow Error(\n\t\t\t\t`You've called connect twice, can only attempt 1 connection at the time`,\n\t\t\t);\n\t\t}\n\t\ttry {\n\t\t\tthis.isConnecting = true;\n\t\t\thealthCheck = await this._connect();\n\t\t\tthis.isConnecting = false;\n\t\t\tthis.consecutiveFailures = 0;\n\t\t\tthis._startMonitor();\n\t\t\tthis._startHealthCheck();\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`connection:connect() - Established ws connection with healthcheck: ${healthCheck}`,\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn healthCheck;\n\t\t} catch (e) {\n\t\t\tthis.isConnecting = false;\n\t\t\tif (!e.isWSFailure) {\n\t\t\t\t// This is a permanent failure, throw the error...\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * disconnect - Disconnect the connection and doesn't recover...\n\t *\n\t */\n\tdisconnect() {\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t`connection:disconnect() - Closing the websocket connection for wsID ${this.wsID}`,\n\t\t\t{\n\t\t\t\ttags: ['connection'],\n\t\t\t},\n\t\t);\n\n\t\tthis.wsID += 1;\n\n\t\t// start by removing all the listeners\n\t\tif (this.healthCheckIntervalRef) {\n\t\t\tclearInterval(this.healthCheckIntervalRef);\n\t\t}\n\t\tif (this.monitorIntervalRef) {\n\t\t\tclearInterval(this.monitorIntervalRef);\n\t\t}\n\n\t\tthis._removeConnectionListeners();\n\n\t\tthis.isHealthy = false;\n\n\t\t// remove ws handlers...\n\t\tif (this.ws && this.ws.removeAllListeners) {\n\t\t\tthis.ws.removeAllListeners();\n\t\t}\n\n\t\tlet isClosedPromise;\n\t\t// and finally close...\n\t\t// Assigning to local here because we will remove it from this before the\n\t\t// promise resolves.\n\t\tconst { ws } = this;\n\t\tif (ws && ws.close && ws.readyState === ws.OPEN) {\n\t\t\tisClosedPromise = new Promise(resolve => {\n\t\t\t\tws.onclose = () => {\n\t\t\t\t\tthis.logger(\n\t\t\t\t\t\t'info',\n\t\t\t\t\t\t`connection:disconnect() - resolving isClosedPromise`,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\t\t\t});\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`connection:disconnect() - Manually closed connection by calling client.disconnect()`,\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tws.close(1000, 'Manually closed connection by calling client.disconnect()');\n\t\t} else {\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`connection:disconnect() - ws connection doesn't exist or it is already closed.`,\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\tisClosedPromise = Promise.resolve();\n\t\t}\n\n\t\tdelete this.ws;\n\n\t\treturn isClosedPromise;\n\t}\n\n\t/**\n\t * _connect - Connect to the WS endpoint\n\t *\n\t * @return {promise} Promise that completes once the first health check message is received\n\t */\n\tasync _connect() {\n\t\tthis._setupConnectionPromise();\n\t\tthis.ws = new isoWS(this.wsURL);\n\t\tthis.ws.onopen = this.onopen.bind(this, this.wsID);\n\t\tthis.ws.onclose = this.onclose.bind(this, this.wsID);\n\t\tthis.ws.onerror = this.onerror.bind(this, this.wsID);\n\t\tthis.ws.onmessage = this.onmessage.bind(this, this.wsID);\n\n\t\tconst response = await this.connectionOpen;\n\t\tthis.connectionID = response.connection_id;\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * _reconnect - Description\n\t *\n\t * @param {int} interval number of ms to wait before connecting\n\t */\n\tasync _reconnect(interval) {\n\t\tthis.logger('info', 'connection:_reconnect() - Initiating the reconnect', {\n\t\t\ttags: ['connection'],\n\t\t});\n\t\t// only allow 1 connection at the time\n\t\tif (this.isConnecting || this.isHealthy) {\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t'connection:_reconnect() - Abort (1) since already connecting or healthy',\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t// reconnect in case of on error or on close\n\t\t// also reconnect if the health check cycle fails\n\t\tif (interval === undefined) {\n\t\t\tinterval = this._retryInterval();\n\t\t}\n\n\t\t// reconnect, or try again after a little while...\n\t\tawait sleep(interval);\n\n\t\t// Check once again if by some other call to _reconnect is active or connection is\n\t\t// already restored, then no need to proceed.\n\t\tif (this.isConnecting || this.isHealthy) {\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t'connection:_reconnect() - Abort (2) since already connecting or healthy',\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.isConnecting = true;\n\n\t\t// cleanup the old connection\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t'connection:_reconnect() - Destroying current WS connection',\n\t\t\t{\n\t\t\t\ttags: ['connection'],\n\t\t\t},\n\t\t);\n\t\tthis._destroyCurrentWSConnection();\n\n\t\ttry {\n\t\t\tconst open = await this._connect();\n\t\t\tif (this.recoverCallback) {\n\t\t\t\tthis.logger(\n\t\t\t\t\t'info',\n\t\t\t\t\t'connection:_reconnect() - Waiting for recoverCallBack',\n\t\t\t\t\t{\n\t\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tawait this.recoverCallback(open);\n\t\t\t\tthis.logger(\n\t\t\t\t\t'info',\n\t\t\t\t\t'connection:_reconnect() - Finished recoverCallBack',\n\t\t\t\t\t{\n\t\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.isConnecting = false;\n\t\t\tthis.consecutiveFailures = 0;\n\t\t} catch (e) {\n\t\t\tthis.isConnecting = false;\n\t\t\t// reconnect on WS failures, dont reconnect if there is a code bug\n\t\t\tif (e.isWSFailure) {\n\t\t\t\tthis.logger(\n\t\t\t\t\t'info',\n\t\t\t\t\t'connection:_reconnect() - WS failure, so going to try to reconnect',\n\t\t\t\t\t{\n\t\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tthis._reconnect();\n\t\t\t}\n\t\t}\n\t\tthis.logger('info', 'connection:_reconnect() - == END ==', {\n\t\t\ttags: ['connection'],\n\t\t});\n\t}\n\n\t/**\n\t * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n\t *\n\t * @param {object} event Event with type online or offline\n\t *\n\t */\n\tonlineStatusChanged = event => {\n\t\tif (event.type === 'offline') {\n\t\t\t// mark the connection as down\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t'connection:onlineStatusChanged() - Status changing to offline',\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\tthis._setHealth(false);\n\t\t} else if (event.type === 'online') {\n\t\t\t// retry right now...\n\t\t\t// We check this.isHealthy, not sure if it's always\n\t\t\t// smart to create a new WS connection if the old one is still up and running.\n\t\t\t// it's possible we didnt miss any messages, so this process is just expensive and not needed.\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`connection:onlineStatusChanged() - Status changing to online. isHealthy: ${this.isHealthy}`,\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (!this.isHealthy) {\n\t\t\t\tthis._reconnect(10);\n\t\t\t}\n\t\t}\n\t};\n\n\tonopen = wsID => {\n\t\tif (this.wsID !== wsID) return;\n\t\tthis.logger('info', 'connection:onopen() - onopen callback', {\n\t\t\ttags: ['connection'],\n\t\t\twsID,\n\t\t});\n\n\t\t// set healthy..\n\t\tthis._setHealth(true);\n\t};\n\n\tonmessage = (wsID, event) => {\n\t\tif (this.wsID !== wsID) return;\n\n\t\t// we wait till the first message before we consider the connection open..\n\t\t// the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n\t\t// after that a ws.onclose..\n\t\tif (!this.isResolved) {\n\t\t\tthis.resolvePromise(event);\n\t\t}\n\n\t\t// trigger the event..\n\t\tthis.lastEvent = new Date();\n\t\tthis.logger('info', 'connection:onmessage() - onmessage callback', {\n\t\t\ttags: ['connection'],\n\t\t\tevent,\n\t\t\twsID,\n\t\t});\n\n\t\tthis.messageCallback(event);\n\t};\n\n\tonclose = (wsID, event) => {\n\t\tthis.logger('info', 'connection:onclose() - onclose callback', {\n\t\t\ttags: ['connection'],\n\t\t\tevent,\n\t\t\twsID,\n\t\t});\n\n\t\tif (this.wsID !== wsID) return;\n\n\t\tif (event.code === 1000) {\n\t\t\t// this is a permanent error raised by stream..\n\t\t\t// usually caused by invalid auth details\n\t\t\tconst error = new Error(`WS connection reject with error ${event.reason}`);\n\t\t\terror.reason = event.reason;\n\t\t\tthis.rejectPromise(error);\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`connection:onclose() - WS connection reject with error ${event.reason}`,\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\tevent,\n\t\t\t\t},\n\t\t\t);\n\t\t} else {\n\t\t\tthis.consecutiveFailures += 1;\n\t\t\tthis.totalFailures += 1;\n\t\t\tthis._setHealth(false);\n\n\t\t\tthis.rejectPromise(this._errorFromWSEvent(event));\n\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`connection:onclose() - WS connection closed. Calling reconnect ...`,\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\tevent,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\t// reconnect if its an abnormal failure\n\t\t\tthis._reconnect();\n\t\t}\n\t};\n\n\tonerror = (wsID, event) => {\n\t\tif (this.wsID !== wsID) return;\n\n\t\tthis.consecutiveFailures += 1;\n\t\tthis.totalFailures += 1;\n\t\tthis._setHealth(false);\n\n\t\tthis.rejectPromise(this._errorFromWSEvent(event));\n\t\tthis.logger('info', `connection:onerror() - WS connection resulted into error`, {\n\t\t\ttags: ['connection'],\n\t\t\tevent,\n\t\t});\n\n\t\tthis._reconnect();\n\t};\n\n\t/**\n\t * _setHealth - Sets the connection to healthy or unhealthy.\n\t * Broadcasts an event in case the connection status changed.\n\t *\n\t * @param {bool} healthy boolean indicating if the connection is healthy or not\n\t *\n\t */\n\t_setHealth = healthy => {\n\t\tif (healthy && !this.isHealthy) {\n\t\t\t// yee we are online:\n\t\t\tthis.isHealthy = true;\n\t\t\tthis.eventCallback({\n\t\t\t\ttype: 'connection.changed',\n\t\t\t\tonline: true,\n\t\t\t});\n\t\t}\n\n\t\tif (!healthy && this.isHealthy) {\n\t\t\t// bummer we are offline\n\t\t\tthis.isHealthy = false;\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (!this.isHealthy) {\n\t\t\t\t\tthis.eventCallback({\n\t\t\t\t\t\ttype: 'connection.changed',\n\t\t\t\t\t\tonline: false,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, 5000);\n\t\t}\n\t};\n\n\t/**\n\t * _errorFromWSEvent - Creates an error object for the WS event\n\t *\n\t */\n\t_errorFromWSEvent = event => {\n\t\tthis.logger(\n\t\t\t'error',\n\t\t\t`connection:_errorFromWSEvent() - WS failed with code ${event.code}`,\n\t\t\t{\n\t\t\t\ttags: ['connection'],\n\t\t\t\tevent,\n\t\t\t},\n\t\t);\n\n\t\tconst error = new Error(`WS failed with code ${event.code}`);\n\t\terror.code = event.code;\n\t\terror.isWSFailure = true;\n\t\treturn error;\n\t};\n\n\t/**\n\t * _listenForConnectionChanges - Adds an event listener for the browser going online or offline\n\t *\n\t */\n\t_listenForConnectionChanges = () => {\n\t\tif (\n\t\t\ttypeof window !== 'undefined' &&\n\t\t\twindow != null &&\n\t\t\twindow.addEventListener != null\n\t\t) {\n\t\t\twindow.addEventListener('offline', this.onlineStatusChanged);\n\t\t\twindow.addEventListener('online', this.onlineStatusChanged);\n\t\t}\n\t};\n\n\t_removeConnectionListeners = () => {\n\t\tif (\n\t\t\ttypeof window !== 'undefined' &&\n\t\t\twindow != null &&\n\t\t\twindow.addEventListener != null\n\t\t) {\n\t\t\twindow.removeEventListener('offline', this.onlineStatusChanged);\n\t\t\twindow.removeEventListener('online', this.onlineStatusChanged);\n\t\t}\n\t};\n\n\t/**\n\t * _destroyCurrentWSConnection - Removes the current WS connnection\n\t *\n\t */\n\t_destroyCurrentWSConnection() {\n\t\t// increment the ID, meaning we will ignore all messages from the old\n\t\t// ws connection from now on.\n\t\tthis.wsID += 1;\n\n\t\ttry {\n\t\t\tif (this.ws && this.ws.removeAllListeners) {\n\t\t\t\tthis.ws.removeAllListeners();\n\t\t\t}\n\n\t\t\tif (this.ws && this.ws.close) {\n\t\t\t\tthis.ws.close();\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// we dont care\n\t\t}\n\t}\n\n\t/**\n\t * _retryInterval - A retry interval which increases after consecutive failures\n\t *\n\t * @return {int} Duration to wait in milliseconds\n\t */\n\t_retryInterval() {\n\t\t// try to reconnect in 0-5 seconds (random to spread out the load from failures)\n\t\tconst max = Math.min(500 + this.consecutiveFailures * 2000, 25000);\n\t\tconst min = Math.min(Math.max(250, (this.consecutiveFailures - 1) * 2000), 25000);\n\t\treturn Math.floor(Math.random() * (max - min) + min);\n\t}\n\n\t/**\n\t * _setupPromise - sets up the this.connectOpen promise\n\t */\n\t_setupConnectionPromise = () => {\n\t\tconst that = this;\n\t\tthis.isResolved = false;\n\t\t/** a promise that is resolved once ws.open is called */\n\t\tthis.connectionOpen = new Promise(function(resolve, reject) {\n\t\t\tthat.resolvePromise = resolve;\n\t\t\tthat.rejectPromise = reject;\n\t\t}).then(e => {\n\t\t\tconst data = JSON.parse(e.data);\n\t\t\tif (data.error != null) {\n\t\t\t\tthrow new Error(JSON.stringify(data.error));\n\t\t\t}\n\t\t\treturn data;\n\t\t});\n\t};\n\n\t/**\n\t * _startHealthCheck - Sends a message every 30s or so to see if the ws connection still works\n\t *\n\t */\n\t_startHealthCheck() {\n\t\tconst that = this;\n\t\t// 30 seconds is the recommended interval (messenger uses this)\n\t\tthis.healthCheckIntervalRef = setInterval(() => {\n\t\t\t// send the healthcheck.., server replies with a health check event\n\t\t\tconst data = [\n\t\t\t\t{\n\t\t\t\t\ttype: 'health.check',\n\t\t\t\t\tclient_id: that.clientID,\n\t\t\t\t\tuser_id: that.userID,\n\t\t\t\t},\n\t\t\t];\n\t\t\t// try to send on the connection\n\t\t\ttry {\n\t\t\t\tthat.ws.send(JSON.stringify(data));\n\t\t\t} catch (e) {\n\t\t\t\t// error will already be detected elsewhere\n\t\t\t}\n\t\t}, that.healthCheckInterval);\n\t}\n\n\t/**\n\t * _startMonitor - Verifies we didn't miss any events. Marks the connection as failed in case we did.\n\t *\n\t */\n\t_startMonitor() {\n\t\tconst that = this;\n\t\tthis.monitorIntervalRef = setInterval(() => {\n\t\t\tconst now = new Date();\n\t\t\t// means we missed a health check\n\t\t\tif (now - that.lastEvent > this.healthCheckInterval + 10 * 1000) {\n\t\t\t\tthis.logger('info', 'connection:_startMonitor - going to reconnect', {\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t});\n\t\t\t\tthat._setHealth(false);\n\t\t\t\tthat._reconnect();\n\t\t\t}\n\t\t}, that.monitorInterval);\n\t}\n}\n","export default null;","export default null;","import { fromByteArray } from 'base64-js';\n\n// source - https://github.com/beatgammit/base64-js/blob/master/test/convert.js#L72\nconst map = (arr, callback) => {\n\tconst res = [];\n\tlet kValue, mappedValue;\n\n\tfor (let k = 0, len = arr.length; k < len; k++) {\n\t\tif (typeof arr === 'string' && !!arr.charAt(k)) {\n\t\t\tkValue = arr.charAt(k);\n\t\t\tmappedValue = callback(kValue, k, arr);\n\t\t\tres[k] = mappedValue;\n\t\t} else if (typeof arr !== 'string' && k in arr) {\n\t\t\tkValue = arr[k];\n\t\t\tmappedValue = callback(kValue, k, arr);\n\t\t\tres[k] = mappedValue;\n\t\t}\n\t}\n\treturn res;\n};\n\nexport function encodeBase64(data) {\n\treturn fromByteArray(\n\t\tmap(data, function(char) {\n\t\t\treturn char.charCodeAt(0);\n\t\t}),\n\t);\n}\n\n// base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nexport function decodeBase64(s) {\n\tconst e = {},\n\t\tw = String.fromCharCode,\n\t\tL = s.length;\n\tlet i,\n\t\tb = 0,\n\t\tc,\n\t\tx,\n\t\tl = 0,\n\t\ta,\n\t\tr = '';\n\tconst A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\tfor (i = 0; i < 64; i++) {\n\t\te[A.charAt(i)] = i;\n\t}\n\tfor (x = 0; x < L; x++) {\n\t\tc = e[s.charAt(x)];\n\t\tb = (b << 6) + c;\n\t\tl += 6;\n\t\twhile (l >= 8) {\n\t\t\t((a = (b >>> (l -= 8)) & 0xff) || x < L - 2) && (r += w(a));\n\t\t}\n\t}\n\treturn r;\n}\n","import jwt from 'jsonwebtoken';\nimport crypto from 'crypto';\nimport { encodeBase64, decodeBase64 } from './base64';\n\n/**\n * Creates the JWT token that can be used for a UserSession\n * @method JWTUserSessionToken\n * @memberof signing\n * @private\n * @param {string} apiSecret - API Secret key\n * @param {string} userId - The user_id key in the JWT payload\n * @param {object} [extraData] - Extra that should be part of the JWT token\n * @param {object} [jwtOptions] - Options that can be past to jwt.sign\n * @return {string} JWT Token\n */\nexport function JWTUserToken(apiSecret, userId, extraData = {}, jwtOptions = {}) {\n\tif (typeof userId !== 'string') {\n\t\tthrow new TypeError('userId should be a string');\n\t}\n\n\tconst payload = {\n\t\tuser_id: userId,\n\t\t...extraData,\n\t};\n\n\t// make sure we return a clear error when jwt is shimmed (ie. browser build)\n\tif (jwt == null || jwt.sign == null) {\n\t\tthrow Error(\n\t\t\t`Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.`,\n\t\t);\n\t}\n\n\tconst opts = Object.assign({ algorithm: 'HS256', noTimestamp: true }, jwtOptions);\n\treturn jwt.sign(payload, apiSecret, opts);\n}\n\nexport function JWTServerToken(apiSecret, jwtOptions = {}) {\n\tconst payload = {\n\t\tserver: true,\n\t};\n\n\tconst opts = Object.assign({ algorithm: 'HS256', noTimestamp: true }, jwtOptions);\n\treturn jwt.sign(payload, apiSecret, opts);\n}\n\n/**\n * @return {string}\n */\nexport function UserFromToken(token) {\n\tconst fragments = token.split('.');\n\tif (fragments.length !== 3) {\n\t\treturn '';\n\t}\n\tconst b64Payload = fragments[1];\n\tconst payload = decodeBase64(b64Payload);\n\tconst data = JSON.parse(payload);\n\treturn data.user_id;\n}\n\n/**\n *\n * @param userId {string} the id of the user\n * @return {string}\n */\nexport function DevToken(userId) {\n\treturn [\n\t\t'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', //{\"alg\": \"HS256\", \"typ\": \"JWT\"}\n\t\tencodeBase64(JSON.stringify({ user_id: userId })),\n\t\t'devtoken', // hardcoded signature\n\t].join('.');\n}\n\n/**\n *\n * @param body {string} the signed message\n * @param secret {string} the shared secret used to generate the signature (Stream API secret)\n * @param signature {string} the signature to validate\n * @return {boolean}\n */\nexport function CheckSignature(body, secret, signature) {\n\tconst key = Buffer.from(secret, 'ascii');\n\tconst hash = crypto\n\t\t.createHmac('sha256', key)\n\t\t.update(body)\n\t\t.digest('hex');\n\treturn hash === signature;\n}\n","export default null;","export default null;","/* eslint no-unused-vars: \"off\" */\n/* global process */\n\nimport axios from 'axios';\nimport uuidv4 from 'uuid/v4';\nimport { Channel } from './channel';\nimport { ClientState } from './client_state';\nimport { StableWSConnection } from './connection';\n\nimport { isValidEventType } from './events';\n\nimport {\n\tJWTServerToken,\n\tJWTUserToken,\n\tUserFromToken,\n\tDevToken,\n\tCheckSignature,\n} from './signing';\nimport http from 'http';\nimport https from 'https';\nimport fetch, { Headers } from 'cross-fetch';\nimport FormData from 'form-data';\nimport pkg from '../package.json';\nimport Immutable from 'seamless-immutable';\n\nfunction isReadableStream(obj) {\n\treturn (\n\t\tobj !== null &&\n\t\ttypeof obj === 'object' &&\n\t\ttypeof obj._read === 'function' &&\n\t\ttypeof obj._readableState === 'object'\n\t);\n}\n\nfunction isFunction(value) {\n\treturn (\n\t\tvalue &&\n\t\t(Object.prototype.toString.call(value) === '[object Function]' ||\n\t\t\t'function' === typeof value ||\n\t\t\tvalue instanceof Function)\n\t);\n}\n\nexport class StreamChat {\n\tconstructor(key, secretOrOptions, options) {\n\t\t// set the key\n\t\tthis.key = key;\n\t\tthis.userToken = null;\n\t\tthis.secret = null;\n\t\tthis.listeners = {};\n\t\tthis.state = new ClientState();\n\t\t// a list of channels to hide ws events from\n\t\tthis.mutedChannels = [];\n\n\t\t// set the secret\n\t\tif (secretOrOptions && secretOrOptions.indexOf) {\n\t\t\tthis.secret = secretOrOptions;\n\t\t}\n\n\t\t// set the options... and figure out defaults...\n\t\toptions = options || secretOrOptions;\n\t\tif (!options) {\n\t\t\toptions = {};\n\t\t}\n\n\t\tthis.browser =\n\t\t\ttypeof options.browser !== 'undefined'\n\t\t\t\t? options.browser\n\t\t\t\t: typeof window !== 'undefined';\n\t\tthis.node = !this.browser;\n\n\t\tconst defaultOptions = {\n\t\t\ttimeout: 3000,\n\t\t};\n\n\t\tif (this.node) {\n\t\t\tconst nodeOptions = {\n\t\t\t\thttpAgent: new http.Agent({ keepAlive: 3000 }),\n\t\t\t\thttpsAgent: new https.Agent({ keepAlive: 3000 }),\n\t\t\t};\n\t\t\tthis.options = { ...nodeOptions, ...defaultOptions, ...options };\n\t\t} else {\n\t\t\tthis.options = { ...defaultOptions, ...options };\n\t\t\tdelete this.options.httpAgent;\n\t\t\tdelete this.options.httpsAgent;\n\t\t}\n\n\t\tthis.setBaseURL('https://chat-us-east-1.stream-io-api.com');\n\n\t\tif (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_RUN) {\n\t\t\tthis.setBaseURL('http://localhost:3030');\n\t\t}\n\n\t\t// WS connection is initialized when setUser is called\n\t\tthis.wsConnection = null;\n\t\tthis.wsPromise = null;\n\t\t// keeps a reference to all the channels that are in use\n\t\tthis.activeChannels = {};\n\t\t// mapping between channel groups and configs\n\t\tthis.configs = {};\n\t\tthis.anonymous = false;\n\n\t\t/**\n\t\t * logger function should accept 3 parameters:\n\t\t * @param logLevel string\n\t\t * @param message   string\n\t\t * @param extraData object\n\t\t *\n\t\t * e.g.,\n\t\t * const client = new StreamChat('api_key', {}, {\n\t\t * \t\tlogger = (logLevel, message, extraData) => {\n\t\t * \t\t\tconsole.log(message);\n\t\t * \t\t}\n\t\t * })\n\t\t *\n\t\t * extraData contains tags array attached to log message. Tags can have one/many of following values:\n\t\t * 1. api\n\t\t * 2. api_request\n\t\t * 3. api_response\n\t\t * 4. client\n\t\t * 5. channel\n\t\t * 6. connection\n\t\t * 7. event\n\t\t *\n\t\t * It may also contains some extra data, some examples have been mentioned below:\n\t\t * 1. {\n\t\t * \t\ttags: ['api', 'api_request', 'client'],\n\t\t * \t\turl: string,\n\t\t * \t\tpayload: object,\n\t\t * \t\tconfig: object\n\t\t * }\n\t\t * 2. {\n\t\t * \t\ttags: ['api', 'api_response', 'client'],\n\t\t * \t\turl: string,\n\t\t * \t\tresponse: object\n\t\t * }\n\t\t * 3. {\n\t\t * \t\ttags: ['api', 'api_response', 'client'],\n\t\t * \t\turl: string,\n\t\t * \t\terror: object\n\t\t * }\n\t\t * 4. {\n\t\t * \t\ttags: ['event', 'client'],\n\t\t * \t\tevent: object\n\t\t * }\n\t\t * 5. {\n\t\t * \t\ttags: ['channel'],\n\t\t * \t\tchannel: object\n\t\t * }\n\t\t */\n\t\tthis.logger = isFunction(options.logger) ? options.logger : () => {};\n\t}\n\n\tdevToken(userID) {\n\t\treturn DevToken(userID);\n\t}\n\n\tgetAuthType() {\n\t\treturn this.anonymous ? 'anonymous' : 'jwt';\n\t}\n\n\tsetBaseURL(baseURL) {\n\t\tthis.baseURL = baseURL;\n\t\tthis.wsBaseURL = this.baseURL.replace('http', 'ws');\n\t}\n\n\t_setupConnection() {\n\t\tthis.UUID = uuidv4();\n\t\tthis.clientID = `${this.userID}--${this.UUID}`;\n\t\tthis.wsPromise = this.connect();\n\t\tthis._startCleaning();\n\t\treturn this.wsPromise;\n\t}\n\n\t_hasConnectionID = () => Boolean(this.connectionID);\n\n\t/**\n\t * setUser - Set the current user, this triggers a connection to the API\n\t *\n\t * @param {object} user Data about this user. IE {name: \"john\"}\n\t * @param {string} userToken   Token\n\t *\n\t * @return {promise} Returns a promise that resolves when the connection is setup\n\t */\n\tsetUser(user, userToken) {\n\t\tif (this.userID) {\n\t\t\tthrow new Error(\n\t\t\t\t'Use client.disconnect() before trying to connect as a different user. setUser was called twice.',\n\t\t\t);\n\t\t}\n\t\t// we generate the client id client side\n\t\tthis.userID = user.id;\n\n\t\tif (!this.userID) {\n\t\t\tthrow new Error('The \"id\" field on the user is missing');\n\t\t}\n\n\t\tthis.userToken = userToken;\n\n\t\tif (userToken == null && this.secret != null) {\n\t\t\tthis.userToken = this.createToken(this.userID);\n\t\t}\n\n\t\tif (this.userToken == null) {\n\t\t\tthrow new Error('both userToken and api secret are not provided');\n\t\t}\n\n\t\tconst tokenUserId = UserFromToken(this.userToken);\n\t\tif (\n\t\t\tuserToken != null &&\n\t\t\t(tokenUserId == null || tokenUserId === '' || tokenUserId !== user.id)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t'userToken does not have a user_id or is not matching with user.id',\n\t\t\t);\n\t\t}\n\t\tthis._setUser(user);\n\t\tthis.anonymous = false;\n\n\t\treturn this._setupConnection();\n\t}\n\n\t_setUser(user) {\n\t\t// this one is used by the frontend\n\t\tthis.user = user;\n\t\t// this one is actually used for requests...\n\t\tthis._user = { ...user };\n\t}\n\n\t/**\n\t * updateAppSettings - updates application settings\n\t *\n\t * @param {object} options App settings.\n\t * \t\tIE: {\n\t  \t\t\t\"apn_config\": {\n\t\t\t\t\t\"auth_type\": \"token\",\n\t\t\t\t\t\"auth_key\": fs.readFileSync(\n\t\t\t\t\t\t'./apn-push-auth-key.p8',\n\t\t\t\t\t\t'utf-8',\n\t\t\t\t\t),\n\t\t\t\t\t\"key_id\": \"keyid\",\n\t\t\t\t\t\"team_id\": \"teamid\", //either ALL these 3\n\t\t\t\t\t\"notification_template\": \"notification handlebars template\",\n\t\t\t\t\t\"bundle_id\": \"com.apple.your.app\",\n\t\t\t\t\t\"development\": true\n\t\t\t\t},\n\t\t\t\t\"firebase_config\": {\n\t\t\t\t\t\"server_key\": \"server key from fcm\",\n\t\t\t\t\t\"notification_template\": \"notification handlebars template\"\n\t\t\t\t\t\"data_template\": \"data handlebars template\"\n\t\t\t\t},\n\t\t\t\t\"webhook_url\": \"https://acme.com/my/awesome/webhook/\"\n\t\t\t}\n\t */\n\tasync updateAppSettings(options) {\n\t\tif (options.apn_config && options.apn_config.p12_cert) {\n\t\t\toptions.apn_config.p12_cert = Buffer.from(\n\t\t\t\toptions.apn_config.p12_cert,\n\t\t\t).toString('base64');\n\t\t}\n\t\treturn await this.patch(this.baseURL + '/app', options);\n\t}\n\n\t/**\n\t * getAppSettings - retrieves application settings\n\t */\n\tasync getAppSettings() {\n\t\treturn await this.get(this.baseURL + '/app');\n\t}\n\n\t/**\n\t * testPushSettings - Tests the push settings for a user with a random chat message and the configured push templates\n\t *\n\t * @param {string} userID User ID. If user has no devices, it will error\n\t * @param {object} [data] Overrides for push templates/message used\n\t * \t\tIE: {\n\t\t\t\t  messageID: 'id-of-message',//will error if message does not exist\n\t\t\t\t  apnTemplate: '{}', //if app doesn't have apn configured it will error\n\t\t\t\t  firebaseTemplate: '{}', //if app doesn't have firebase configured it will error\n\t\t\t\t  firebaseDataTemplate: '{}', //if app doesn't have firebase configured it will error\n\t\t\t}\n\t */\n\tasync testPushSettings(userID, data = {}) {\n\t\treturn await this.post(this.baseURL + '/check_push', {\n\t\t\tuser_id: userID,\n\t\t\t...(data.messageID ? { message_id: data.messageID } : {}),\n\t\t\t...(data.apnTemplate ? { apn_template: data.apnTemplate } : {}),\n\t\t\t...(data.firebaseTemplate\n\t\t\t\t? { firebase_template: data.firebaseTemplate }\n\t\t\t\t: {}),\n\t\t\t...(data.firebaseDataTemplate\n\t\t\t\t? { firebase_data_template: data.firebaseDataTemplate }\n\t\t\t\t: {}),\n\t\t});\n\t}\n\n\t/**\n\t * disconnect - closes the WS connection\n\t */\n\tdisconnect() {\n\t\tthis.logger('info', 'client:disconnect() - Disconnecting the client', {\n\t\t\ttags: ['connection', 'client'],\n\t\t});\n\t\t// remove the user specific fields\n\t\tdelete this.user;\n\t\tdelete this._user;\n\t\tdelete this.userID;\n\n\t\tif (this.cleaningIntervalRef != null) {\n\t\t\tclearInterval(this.cleaningIntervalRef);\n\t\t\tthis.cleaningIntervalRef = null;\n\t\t}\n\n\t\tthis.anonymous = false;\n\t\tthis.userToken = null;\n\n\t\tthis.connectionEstablishedCount = 0;\n\n\t\tfor (const channel of Object.values(this.activeChannels)) {\n\t\t\tchannel._disconnect();\n\t\t}\n\t\t// ensure we no longer return inactive channels\n\t\tthis.activeChannels = {};\n\t\t// reset client state\n\t\tthis.state = new ClientState();\n\n\t\t// close the WS connection\n\t\tif (this.wsConnection) {\n\t\t\treturn this.wsConnection.disconnect();\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n\n\tsetAnonymousUser() {\n\t\tthis.anonymous = true;\n\t\tthis.userID = uuidv4();\n\t\tthis._setUser({\n\t\t\tid: this.userID,\n\t\t\tanon: true,\n\t\t});\n\t\treturn this._setupConnection();\n\t}\n\n\t/**\n\t * setGuestUser - Setup a temporary guest user\n\t *\n\t * @param {object} user Data about this user. IE {name: \"john\"}\n\t *\n\t * @return {promise} Returns a promise that resolves when the connection is setup\n\t */\n\tasync setGuestUser(user) {\n\t\tlet response;\n\t\tthis.anonymous = true;\n\t\ttry {\n\t\t\tresponse = await this.post(this.baseURL + '/guest', { user });\n\t\t} catch (e) {\n\t\t\tthis.anonymous = false;\n\t\t\tthrow e;\n\t\t}\n\t\tthis.anonymous = false;\n\t\tconst {\n\t\t\tcreated_at,\n\t\t\tupdated_at,\n\t\t\tlast_active,\n\t\t\tonline,\n\t\t\t...guestUser\n\t\t} = response.user;\n\t\treturn await this.setUser(guestUser, response.access_token);\n\t}\n\n\t/**\n\t * createToken - Creates a token to authenticate this user. This function is used server side.\n\t * The resulting token should be passed to the client side when the users registers or logs in\n\t *\n\t * @param {string}   userID         The User ID\n\t * @param {string}   exp            The expiration time for the token expressed in the number of seconds since the epoch\n\t *\n\t * @return {string} Returns a token\n\t */\n\tcreateToken(userID, exp) {\n\t\tif (this.secret == null) {\n\t\t\tthrow Error(`tokens can only be created server-side using the API Secret`);\n\t\t}\n\t\tconst extra = {};\n\t\tif (exp != null) {\n\t\t\textra.exp = exp;\n\t\t}\n\t\treturn JWTUserToken(this.secret, userID, extra, {});\n\t}\n\n\t/**\n\t * on - Listen to events on all channels and users your watching\n\t *\n\t * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n\t * or\n\t * client.on(event => {console.log(event.type)})\n\t *\n\t * @param {string} callbackOrString  The event type to listen for (optional)\n\t * @param {function} callbackOrNothing The callback to call\n\t *\n\t * @return {type} Description\n\t */\n\ton(callbackOrString, callbackOrNothing) {\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\t\tthis.logger('info', `Attaching listener for ${key} event`, {\n\t\t\ttags: ['event', 'client'],\n\t\t});\n\t\tthis.listeners[key].push(callback);\n\t\treturn {\n\t\t\tunsubscribe: () => {\n\t\t\t\tthis.listeners[key] = this.listeners[key].filter(el => el !== callback);\n\t\t\t},\n\t\t};\n\t}\n\n\t/**\n\t * off - Remove the event handler\n\t *\n\t */\n\toff(callbackOrString, callbackOrNothing) {\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\n\t\tthis.logger('info', `Removing listener for ${key} event`, {\n\t\t\ttags: ['event', 'client'],\n\t\t});\n\t\tthis.listeners[key] = this.listeners[key].filter(value => value !== callback);\n\t}\n\n\t_logApiRequest(type, url, data, config) {\n\t\tthis.logger('info', `client: ${type} - Request - ${url}`, {\n\t\t\ttags: ['api', 'api_request', 'client'],\n\t\t\turl,\n\t\t\tpayload: data,\n\t\t\tconfig,\n\t\t});\n\t}\n\n\t_logApiResponse(type, url, response) {\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t`client:${type} - Response - url: ${url} > status ${response.status}`,\n\t\t\t{\n\t\t\t\ttags: ['api', 'api_response', 'client'],\n\t\t\t\turl,\n\t\t\t\tresponse,\n\t\t\t},\n\t\t);\n\t}\n\n\t_logApiError(type, url, error) {\n\t\tthis.logger('error', `client:${type} - Error - url: ${url}`, {\n\t\t\ttags: ['api', 'api_response', 'client'],\n\t\t\turl,\n\t\t\terror,\n\t\t});\n\t}\n\n\tasync get(url, params) {\n\t\ttry {\n\t\t\tthis._logApiRequest('get', url, {}, this._addClientParams(params));\n\t\t\tconst response = await axios.get(url, this._addClientParams(params));\n\t\t\tthis._logApiResponse('get', url, response);\n\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tthis._logApiError('get', url, e);\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync put(url, data) {\n\t\tlet response;\n\t\ttry {\n\t\t\tthis._logApiRequest('put', url, data, this._addClientParams());\n\t\t\tresponse = await axios.put(url, data, this._addClientParams());\n\t\t\tthis._logApiResponse('put', url, response);\n\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tthis._logApiError('get', url, e);\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync post(url, data) {\n\t\tlet response;\n\t\ttry {\n\t\t\tthis._logApiRequest('post', url, data, this._addClientParams());\n\t\t\tresponse = await axios.post(url, data, this._addClientParams());\n\t\t\tthis._logApiResponse('post', url, response);\n\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tthis._logApiError('post', url, e);\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync patch(url, data) {\n\t\tlet response;\n\t\ttry {\n\t\t\tthis._logApiRequest('patch', url, data, this._addClientParams());\n\t\t\tresponse = await axios.patch(url, data, this._addClientParams());\n\t\t\tthis._logApiResponse('patch', url, response);\n\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tthis._logApiError('patch', url, e);\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync delete(url, params) {\n\t\tlet response;\n\t\ttry {\n\t\t\tthis._logApiRequest('delete', url, {}, this._addClientParams());\n\t\t\tresponse = await axios.delete(url, this._addClientParams(params));\n\t\t\tthis._logApiResponse('delete', url, response);\n\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tthis._logApiError('delete', url, e);\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync sendFile(url, uri, name, contentType, user) {\n\t\tconst data = new FormData();\n\t\tlet fileField;\n\n\t\tconst params = this._addClientParams();\n\t\tif (isReadableStream(uri) || uri instanceof File) {\n\t\t\tfileField = uri;\n\t\t} else {\n\t\t\tfileField = {\n\t\t\t\turi,\n\t\t\t\tname: name || uri.split('/').reverse()[0],\n\t\t\t};\n\t\t\tif (contentType != null) {\n\t\t\t\tfileField.type = contentType;\n\t\t\t}\n\t\t}\n\n\t\tif (user != null) {\n\t\t\tdata.append('user', JSON.stringify(user));\n\t\t}\n\t\tdata.append('file', fileField);\n\t\tconst response = await fetch(`${url}?api_key=${this.key}`, {\n\t\t\tmethod: 'post',\n\t\t\tbody: data,\n\t\t\theaders: new Headers({\n\t\t\t\tAuthorization: params.headers.Authorization,\n\t\t\t\t'stream-auth-type': this.getAuthType(),\n\t\t\t}),\n\t\t});\n\t\tresponse.data = await response.json();\n\t\treturn this.handleResponse(response);\n\t}\n\n\terrorFromResponse(response) {\n\t\tlet err;\n\t\terr = new Error(`StreamChat error HTTP code: ${response.status}`);\n\t\tif (response.data && response.data.code) {\n\t\t\terr = new Error(\n\t\t\t\t`StreamChat error code ${response.data.code}: ${response.data.message}`,\n\t\t\t);\n\t\t\terr.code = response.data.code;\n\t\t}\n\t\terr.response = response;\n\t\terr.status = response.status;\n\t\treturn err;\n\t}\n\n\thandleResponse(response) {\n\t\tconst data = response.data;\n\t\tif ((response.status + '')[0] !== '2') {\n\t\t\tthrow this.errorFromResponse(response);\n\t\t}\n\t\treturn data;\n\t}\n\n\tdispatchEvent = event => {\n\t\t// client event handlers\n\t\tthis._handleClientEvent(event);\n\n\t\t// channel event handlers\n\t\tconst cid = event.cid;\n\t\tconst channel = this.activeChannels[cid];\n\t\tif (channel) {\n\t\t\tchannel._handleChannelEvent(event);\n\t\t}\n\n\t\tthis._callClientListeners(event);\n\n\t\tif (channel) {\n\t\t\tchannel._callChannelListeners(event);\n\t\t}\n\t};\n\n\thandleEvent = messageEvent => {\n\t\t// dispatch the event to the channel listeners\n\t\tconst jsonString = messageEvent.data;\n\t\tconst event = JSON.parse(jsonString);\n\t\tevent.received_at = new Date();\n\t\tthis.dispatchEvent(event);\n\t};\n\n\t_handleClientEvent(event) {\n\t\tconst client = this;\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t`client:_handleClientEvent - Received event of type { ${event.type} }`,\n\t\t\t{\n\t\t\t\ttags: ['event', 'client'],\n\t\t\t\tevent,\n\t\t\t},\n\t\t);\n\n\t\t// update the client.state with any changes to users\n\t\tif (event.type === 'user.presence.changed' || event.type === 'user.updated') {\n\t\t\tif (event.user.id === this.userID) {\n\t\t\t\tthis.user = { ...this.user, ...event.user };\n\t\t\t\t// Updating only available properties in _user object.\n\t\t\t\tObject.keys(event.user).forEach(function(key) {\n\t\t\t\t\tif (key in client._user) {\n\t\t\t\t\t\tclient._user[key] = event.user[key];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tclient.state.updateUser(event.user);\n\t\t\tclient._updateUserReferences(event.user);\n\t\t}\n\t\tif (event.type === 'health.check' && event.me) {\n\t\t\tclient.user = event.me;\n\t\t\tclient.state.updateUser(event.me);\n\t\t\tclient.mutedChannels = event.me.channel_mutes;\n\t\t}\n\n\t\tif (event.type === 'notification.message_new') {\n\t\t\tthis.configs[event.channel.type] = event.channel.config;\n\t\t}\n\n\t\tif (event.type === 'notification.channel_mutes_updated') {\n\t\t\tthis.mutedChannels = event.me.channel_mutes;\n\t\t}\n\t}\n\n\t_muteStatus(cid) {\n\t\tlet muteStatus;\n\t\tthis.mutedChannels.forEach(function(mute) {\n\t\t\tif (mute.channel.cid === cid) {\n\t\t\t\tlet muted = true;\n\t\t\t\tif (mute.expires) {\n\t\t\t\t\tmuted = new Date(mute.expires).getTime() > new Date().getTime();\n\t\t\t\t}\n\t\t\t\tmuteStatus = {\n\t\t\t\t\tmuted,\n\t\t\t\t\tcreatedAt: new Date(mute.created_at),\n\t\t\t\t\texpiresAt: mute.expires ? new Date(mute.expires) : null,\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tif (muteStatus) {\n\t\t\treturn muteStatus;\n\t\t}\n\n\t\treturn {\n\t\t\tmuted: false,\n\t\t\tcreatedAt: null,\n\t\t\texpiresAt: null,\n\t\t};\n\t}\n\n\t_callClientListeners = event => {\n\t\tconst client = this;\n\t\t// gather and call the listeners\n\t\tconst listeners = [];\n\t\tif (client.listeners.all) {\n\t\t\tlisteners.push(...client.listeners.all);\n\t\t}\n\t\tif (client.listeners[event.type]) {\n\t\t\tlisteners.push(...client.listeners[event.type]);\n\t\t}\n\n\t\t// call the event and send it to the listeners\n\t\tfor (const listener of listeners) {\n\t\t\tlistener(event);\n\t\t}\n\t};\n\n\trecoverState = async () => {\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t`client:recoverState() - Start of recoverState with connectionID ${this.wsConnection.connectionID}`,\n\t\t\t{\n\t\t\t\ttags: ['connection'],\n\t\t\t},\n\t\t);\n\t\tthis.connectionID = this.wsConnection.connectionID;\n\t\tconst cids = Object.keys(this.activeChannels);\n\t\tconst lastMessageIDs = {};\n\t\tfor (const c of Object.values(this.activeChannels)) {\n\t\t\tconst lastMessage = c.lastMessage();\n\t\t\tlet lastMessageId;\n\t\t\tif (lastMessage) {\n\t\t\t\tlastMessageId = lastMessage.id;\n\t\t\t}\n\t\t\tlastMessageIDs[c.cid] = lastMessageId;\n\t\t}\n\t\tif (cids.length) {\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`client:recoverState() - Start the querying of ${cids.length} channels`,\n\t\t\t\t{ tags: ['connection', 'client'] },\n\t\t\t);\n\n\t\t\tawait this.queryChannels(\n\t\t\t\t{ cid: { $in: cids } },\n\t\t\t\t{ last_message_at: -1 },\n\t\t\t\t{ limit: 30, recovery: true, last_message_ids: lastMessageIDs },\n\t\t\t);\n\n\t\t\tthis.logger('info', 'client:recoverState() - Querying channels finished', {\n\t\t\t\ttags: ['connection', 'client'],\n\t\t\t});\n\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'connection.recovered',\n\t\t\t});\n\t\t}\n\t};\n\n\t/*\n\t_updateUserReferences updates the members and watchers of the currently active channels\n\tthat contain this user\n\t*/\n\t_updateUserReferences(user) {\n\t\tconst refMap = this.state.userChannelReferences[user.id] || {};\n\t\tconst refs = Object.keys(refMap);\n\t\tfor (const channelID of refs) {\n\t\t\tconst c = this.activeChannels[channelID];\n\t\t\t// search the members and watchers and update as needed...\n\t\t\tif (c && c.state) {\n\t\t\t\tif (c.state.members[user.id]) {\n\t\t\t\t\tc.state.members = c.state.members.setIn([user.id, 'user'], user);\n\t\t\t\t}\n\t\t\t\tif (c.state.watchers[user.id]) {\n\t\t\t\t\tc.state.watchers = c.state.watchers.setIn([user.id, 'user'], user);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync connect() {\n\t\tthis.connecting = true;\n\t\tconst client = this;\n\t\tthis.failures = 0;\n\n\t\tif (client.userID == null) {\n\t\t\tthrow Error(\n\t\t\t\t'Call setUser or setAnonymousUser before starting the connection',\n\t\t\t);\n\t\t}\n\t\tconst params = {\n\t\t\tclient_id: client.client_id,\n\t\t\tuser_id: client.userID,\n\t\t\tuser_details: client._user,\n\t\t\tuser_token: client.userToken,\n\t\t\tserver_determines_connection_id: true,\n\t\t};\n\t\tconst qs = encodeURIComponent(JSON.stringify(params));\n\t\tconst token = this._getToken();\n\n\t\tconst authType = this.getAuthType();\n\t\tclient.wsURL = `${client.wsBaseURL}/connect?json=${qs}&api_key=${\n\t\t\tthis.key\n\t\t}&authorization=${token}&stream-auth-type=${authType}&x-stream-client=${this._userAgent()}`;\n\n\t\t// The StableWSConnection handles all the reconnection logic.\n\t\tthis.wsConnection = new StableWSConnection({\n\t\t\twsURL: client.wsURL,\n\t\t\tclientID: this.clientID,\n\t\t\tuserID: this.userID,\n\t\t\trecoverCallback: this.recoverState,\n\t\t\tmessageCallback: this.handleEvent,\n\t\t\teventCallback: this.dispatchEvent,\n\t\t\tlogger: this.logger,\n\t\t});\n\n\t\tconst handshake = await this.wsConnection.connect();\n\t\tthis.connectionID = this.wsConnection.connectionID;\n\t\treturn handshake;\n\t}\n\n\t/**\n\t * queryUsers - Query users and watch user presence\n\t *\n\t * @param {object} filterConditions MongoDB style filter conditions\n\t * @param {object} sort             Sort options, for instance {last_active: -1}\n\t * @param {object} options          Option object, {presence: true}\n\t *\n\t * @return {object} User Query Response\n\t */\n\tasync queryUsers(filterConditions, sort, options) {\n\t\tif (!sort) {\n\t\t\tsort = {};\n\t\t}\n\t\tif (!options) {\n\t\t\toptions = {};\n\t\t}\n\t\tconst sortFields = [];\n\t\tfor (const [k, v] of Object.entries(sort)) {\n\t\t\tsortFields.push({ field: k, direction: v });\n\t\t}\n\n\t\tconst defaultOptions = {\n\t\t\tpresence: true,\n\t\t};\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.wsPromise;\n\n\t\tif (!this._hasConnectionID()) {\n\t\t\tdefaultOptions.presence = false;\n\t\t}\n\n\t\t// Return a list of users\n\t\tconst data = await this.get(this.baseURL + '/users', {\n\t\t\tpayload: {\n\t\t\t\tfilter_conditions: filterConditions,\n\t\t\t\tsort: sortFields,\n\t\t\t\t...defaultOptions,\n\t\t\t\t...options,\n\t\t\t},\n\t\t});\n\n\t\tthis.state.updateUsers(data.users);\n\n\t\treturn data;\n\t}\n\n\tasync queryChannels(filterConditions, sort = {}, options = {}) {\n\t\tconst sortFields = [];\n\n\t\tfor (const [k, v] of Object.entries(sort)) {\n\t\t\tsortFields.push({ field: k, direction: v });\n\t\t}\n\n\t\tconst defaultOptions = {\n\t\t\tstate: true,\n\t\t\twatch: true,\n\t\t\tpresence: false,\n\t\t};\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.wsPromise;\n\n\t\tif (!this._hasConnectionID()) {\n\t\t\tdefaultOptions.watch = false;\n\t\t}\n\n\t\t// Return a list of channels\n\t\tconst payload = {\n\t\t\tfilter_conditions: filterConditions,\n\t\t\tsort: sortFields,\n\t\t\tuser_details: this._user,\n\t\t\t...defaultOptions,\n\t\t\t...options,\n\t\t};\n\n\t\tconst data = await this.get(this.baseURL + '/channels', {\n\t\t\tpayload,\n\t\t});\n\n\t\tconst channels = [];\n\n\t\t// update our cache of the configs\n\t\tfor (const channelState of data.channels) {\n\t\t\tthis._addChannelConfig(channelState);\n\t\t}\n\n\t\tfor (const channelState of data.channels) {\n\t\t\tconst c = this.channel(channelState.channel.type, channelState.channel.id);\n\t\t\tc.data = channelState.channel;\n\t\t\tc.initialized = true;\n\t\t\tc._initializeState(channelState);\n\t\t\tchannels.push(c);\n\t\t}\n\t\treturn channels;\n\t}\n\n\t/**\n\t * search - Query messages\n\t *\n\t * @param {object} channels MongoDB style filter conditions\n\t * @param {object|string}  message search query or object MongoDB style filters\n\t * @param {object} options       Option object, {user_id: 'tommaso'}\n\t *\n\t * @return {object} search messages response\n\t */\n\tasync search(filterConditions, query, options = {}) {\n\t\t// Return a list of channels\n\t\tconst payload = {\n\t\t\tfilter_conditions: filterConditions,\n\t\t\t...options,\n\t\t};\n\t\tif (typeof query === 'string') {\n\t\t\tpayload.query = query;\n\t\t} else if (typeof query === 'object') {\n\t\t\tpayload.message_filter_conditions = query;\n\t\t} else {\n\t\t\tthrow Error(`Invalid type ${typeof query} for query parameter`);\n\t\t}\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.wsPromise;\n\n\t\treturn await this.get(this.baseURL + '/search', {\n\t\t\tpayload,\n\t\t});\n\t}\n\n\t/**\n\t * addDevice - Adds a push device for a user.\n\t *\n\t * @param {string} id the device id\n\t * @param {string} push_provider the push provider (apn or firebase)\n\t * @param {string} [userID] the user id (defaults to current user)\n\t *\n\t */\n\tasync addDevice(id, push_provider, userID = null) {\n\t\treturn await this.post(this.baseURL + '/devices', {\n\t\t\tid,\n\t\t\tpush_provider,\n\t\t\t...(userID != null ? { user_id: userID } : {}),\n\t\t});\n\t}\n\n\t/**\n\t * getDevices - Returns the devices associated with a current user\n\t *\n\t * @param {string} [userID] User ID. Only works on serversidex\n\t *\n\t * @return {devices} Array of devices\n\t */\n\tasync getDevices(userID) {\n\t\treturn await this.get(\n\t\t\tthis.baseURL + '/devices',\n\t\t\tuserID ? { user_id: userID } : {},\n\t\t);\n\t}\n\n\t/**\n\t * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices\n\t *\n\t * @param {string} id The device id\n\t * @param {string} [userID] The user id. Only specify this for serverside requests\n\t *\n\t */\n\tasync removeDevice(id, userID = null) {\n\t\treturn await this.delete(this.baseURL + '/devices', {\n\t\t\tid,\n\t\t\t...(userID ? { user_id: userID } : {}),\n\t\t});\n\t}\n\n\t_addChannelConfig(channelState) {\n\t\tthis.configs[channelState.channel.type] = channelState.channel.config;\n\t}\n\n\t/**\n\t * channel - Returns a new channel with the given type, id and custom data\n\t *\n\t * If you want to create a unique conversation between 2 or more users; you can leave out the ID parameter\n\t * and only provide ID and the list of members\n\t *\n\t * ie. client.channel(\"messaging\", {members: [\"tommaso\", \"thierry\"]})\n\t *\n\t * @param {string} channelType The channel type\n\t * @param {string} channelID   The channel ID, you can leave this out if you want to create a conversation channel\n\t * @param {object} [custom]    Custom data to attach to the channel\n\t *\n\t * @return {channel} The channel object, initialize it using channel.watch()\n\t */\n\tchannel(channelType, channelID, custom = {}) {\n\t\tif (!this.userID && !this._isUsingServerAuth()) {\n\t\t\tthrow Error('Call setUser or setAnonymousUser before creating a channel');\n\t\t}\n\n\t\tif (~channelType.indexOf(':')) {\n\t\t\tthrow Error(\n\t\t\t\t`Invalid channel group ${channelType}, can't contain the : character`,\n\t\t\t);\n\t\t}\n\n\t\t// support channel(\"messaging\", null, {options})\n\t\t// support channel(\"messaging\", undefined, {options})\n\t\t// support channel(\"messaging\", \"\", {options})\n\t\tif (channelID == null || channelID === '') {\n\t\t\treturn new Channel(this, channelType, undefined, custom || {});\n\t\t}\n\t\t// support channel(\"messaging\", {options})\n\t\tif (typeof channelID === 'object' && arguments.length === 2) {\n\t\t\treturn new Channel(this, channelType, undefined, channelID);\n\t\t}\n\n\t\tif (typeof channelID === 'string' && ~channelID.indexOf(':')) {\n\t\t\tthrow Error(`Invalid channel id ${channelID}, can't contain the : character`);\n\t\t}\n\n\t\t// only allow 1 channel object per cid\n\t\tconst cid = `${channelType}:${channelID}`;\n\t\tif (cid in this.activeChannels) {\n\t\t\tconst channel = this.activeChannels[cid];\n\t\t\tif (Object.keys(custom).length > 0) {\n\t\t\t\tchannel.data = custom;\n\t\t\t\tchannel._data = custom;\n\t\t\t}\n\t\t\treturn channel;\n\t\t}\n\t\tconst channel = new Channel(this, channelType, channelID, custom);\n\t\tthis.activeChannels[channel.cid] = channel;\n\n\t\treturn channel;\n\t}\n\n\t/**\n\t * @deprecated Please use upsertUser() function instead.\n\t *\n\t * updateUser - Update or Create the given user object\n\t *\n\t * @param {object} A user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n\t *\n\t * @return {object}\n\t */\n\tasync updateUser(userObject) {\n\t\treturn await this.upsertUsers([userObject]);\n\t}\n\n\t/**\n\t * partialUpdateUser - Update the given user object\n\t *\n\t * @param {object} Object which should contain id and any of \"set\" or \"unset\" params;\n\t * example: {id: \"user1\", set:{field: value}, unset:[\"field2\"]}\n\t *\n\t * @return {object} list of updated users\n\t */\n\tasync partialUpdateUser(userObject) {\n\t\treturn await this.partialUpdateUsers([userObject]);\n\t}\n\n\t/**\n\t * upsertUsers - Batch upsert the list of users\n\t *\n\t * @param {array} A list of users\n\t *\n\t * @return {object}\n\t */\n\tasync upsertUsers(users) {\n\t\tconst userMap = {};\n\t\tfor (const userObject of users) {\n\t\t\tif (!userObject.id) {\n\t\t\t\tthrow Error('User ID is required when updating a user');\n\t\t\t}\n\t\t\tuserMap[userObject.id] = userObject;\n\t\t}\n\n\t\treturn await this.post(this.baseURL + '/users', {\n\t\t\tusers: userMap,\n\t\t});\n\t}\n\n\t/**\n\t * upsertUser - Update or Create the given user object\n\t *\n\t * @param {object} A user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n\t *\n\t * @return {object}\n\t */\n\tupsertUser(userObject) {\n\t\treturn this.upsertUsers([userObject]);\n\t}\n\n\t/**\n\t * @deprecated Please use upsertUsers() function instead.\n\t *\n\t * updateUsers - Batch update the list of users\n\t *\n\t * @param {array} A list of users\n\t *\n\t * @return {object}\n\t */\n\tupdateUsers(users) {\n\t\treturn this.upsertUsers(users);\n\t}\n\n\t/**\n\t * updateUsers - Batch partial update of users\n\t *\n\t * @param {array} A list of partial update requests\n\t *\n\t * @return {object}\n\t */\n\tasync partialUpdateUsers(users) {\n\t\tfor (const userObject of users) {\n\t\t\tif (!userObject.id) {\n\t\t\t\tthrow Error('User ID is required when updating a user');\n\t\t\t}\n\t\t}\n\n\t\treturn await this.patch(this.baseURL + '/users', {\n\t\t\tusers,\n\t\t});\n\t}\n\n\tasync deleteUser(userID, params) {\n\t\treturn await this.delete(this.baseURL + `/users/${userID}`, params);\n\t}\n\n\tasync reactivateUser(userID, options) {\n\t\treturn await this.post(this.baseURL + `/users/${userID}/reactivate`, {\n\t\t\t...options,\n\t\t});\n\t}\n\n\tasync deactivateUser(userID, options) {\n\t\treturn await this.post(this.baseURL + `/users/${userID}/deactivate`, {\n\t\t\t...options,\n\t\t});\n\t}\n\n\tasync exportUser(userID, options) {\n\t\treturn await this.get(this.baseURL + `/users/${userID}/export`, {\n\t\t\t...options,\n\t\t});\n\t}\n\n\t/** banUser - bans a user from all channels\n\t *\n\t * @param targetUserID\n\t * @param options\n\t * @returns {Promise<*>}\n\t */\n\tasync banUser(targetUserID, options) {\n\t\treturn await this.post(this.baseURL + '/moderation/ban', {\n\t\t\ttarget_user_id: targetUserID,\n\t\t\t...options,\n\t\t});\n\t}\n\n\t/** unbanUser - revoke global ban for a user\n\t *\n\t * @param targetUserID\n\t * @returns {Promise<*>}\n\t */\n\tasync unbanUser(targetUserID, options) {\n\t\treturn await this.delete(this.baseURL + '/moderation/ban', {\n\t\t\ttarget_user_id: targetUserID,\n\t\t\t...options,\n\t\t});\n\t}\n\n\t/** muteUser - mutes a user\n\t *\n\t * @param targetID\n\t * @param [userID] Only used with serverside auth\n\t * @returns {Promise<*>}\n\t */\n\tasync muteUser(targetID, userID = null) {\n\t\treturn await this.post(this.baseURL + '/moderation/mute', {\n\t\t\ttarget_id: targetID,\n\t\t\t...(userID ? { user_id: userID } : {}),\n\t\t});\n\t}\n\n\t/** unmuteUser - unmutes a user\n\t *\n\t * @param targetID\n\t * @param [currentUserID] Only used with serverside auth\n\t * @returns {Promise<*>}\n\t */\n\tasync unmuteUser(targetID, currentUserID = null) {\n\t\treturn await this.post(this.baseURL + '/moderation/unmute', {\n\t\t\ttarget_id: targetID,\n\t\t\t...(currentUserID ? { user_id: currentUserID } : {}),\n\t\t});\n\t}\n\n\tasync flagMessage(messageID) {\n\t\treturn await this.post(this.baseURL + '/moderation/flag', {\n\t\t\ttarget_message_id: messageID,\n\t\t});\n\t}\n\n\tasync flagUser(userID) {\n\t\treturn await this.post(this.baseURL + '/moderation/flag', {\n\t\t\ttarget_user_id: userID,\n\t\t});\n\t}\n\n\tasync unflagMessage(messageID) {\n\t\treturn await this.post(this.baseURL + '/moderation/unflag', {\n\t\t\ttarget_message_id: messageID,\n\t\t});\n\t}\n\n\tasync unflagUser(userID) {\n\t\treturn await this.post(this.baseURL + '/moderation/unflag', {\n\t\t\ttarget_user_id: userID,\n\t\t});\n\t}\n\n\t/**\n\t * markAllRead - marks all channels for this user as read\n\t *\n\t * @return {Promise} Description\n\t */\n\tasync markAllRead(data = {}) {\n\t\tconst response = await this.post(this.baseURL + '/channels/read', {\n\t\t\t...data,\n\t\t});\n\t}\n\n\tcreateChannelType(data) {\n\t\tconst channelData = Object.assign({}, { commands: ['all'] }, data);\n\t\treturn this.post(this.baseURL + '/channeltypes', channelData);\n\t}\n\n\tgetChannelType(channelType) {\n\t\treturn this.get(this.baseURL + `/channeltypes/${channelType}`);\n\t}\n\n\tupdateChannelType(channelType, data) {\n\t\treturn this.put(this.baseURL + `/channeltypes/${channelType}`, data);\n\t}\n\n\tdeleteChannelType(channelType) {\n\t\treturn this.delete(this.baseURL + `/channeltypes/${channelType}`);\n\t}\n\n\tlistChannelTypes() {\n\t\treturn this.get(this.baseURL + `/channeltypes`);\n\t}\n\n\t/**\n\t * updateMessage - Update the given message\n\t *\n\t * @param {object} message object, id needs to be specified\n\t *\n\t * @return {object} Response that includes the message\n\t */\n\tasync updateMessage(message, userId) {\n\t\tif (!message.id) {\n\t\t\tthrow Error('Please specify the message id when calling updateMesssage');\n\t\t}\n\n\t\tconst clonedMessage = Object.assign({}, message);\n\t\tdelete clonedMessage.id;\n\n\t\tconst reservedMessageFields = [\n\t\t\t'latest_reactions',\n\t\t\t'own_reactions',\n\t\t\t'reply_count',\n\t\t\t'reaction_counts',\n\t\t\t'created_at',\n\t\t\t'updated_at',\n\t\t\t'html',\n\t\t\t'command',\n\t\t\t'type',\n\t\t\t'user',\n\t\t];\n\n\t\treservedMessageFields.forEach(function(item) {\n\t\t\tif (clonedMessage[item] != null) {\n\t\t\t\tdelete clonedMessage[item];\n\t\t\t}\n\t\t});\n\n\t\tif (userId != null) {\n\t\t\tif (typeof userId == 'string' || userId instanceof String) {\n\t\t\t\tclonedMessage.user_id = userId;\n\t\t\t} else {\n\t\t\t\tclonedMessage.user = { id: userId.id };\n\t\t\t}\n\t\t}\n\t\treturn await this.post(this.baseURL + `/messages/${message.id}`, {\n\t\t\tmessage: clonedMessage,\n\t\t});\n\t}\n\n\tasync deleteMessage(messageID, hardDelete) {\n\t\tlet params = {};\n\t\tif (hardDelete) {\n\t\t\tparams = { hard: true };\n\t\t}\n\t\treturn await this.delete(this.baseURL + `/messages/${messageID}`, params);\n\t}\n\n\tasync getMessage(messageID) {\n\t\treturn await this.get(this.baseURL + `/messages/${messageID}`);\n\t}\n\n\t_userAgent() {\n\t\treturn `stream-chat-javascript-client-${this.node ? 'node' : 'browser'}-${\n\t\t\tpkg.version\n\t\t}`;\n\t}\n\n\t/**\n\t * _isUsingServerAuth - Returns true if we're using server side auth\n\t */\n\t_isUsingServerAuth = () => !!this.secret;\n\n\t_addClientParams(params = {}) {\n\t\tconst token = this._getToken();\n\n\t\treturn {\n\t\t\t...this.options,\n\t\t\tparams: {\n\t\t\t\tuser_id: this.userID,\n\t\t\t\t...params,\n\t\t\t\tapi_key: this.key,\n\t\t\t\tconnection_id: this.connectionID,\n\t\t\t},\n\t\t\theaders: {\n\t\t\t\tAuthorization: token,\n\t\t\t\t'stream-auth-type': this.getAuthType(),\n\t\t\t\t'x-stream-client': this._userAgent(),\n\t\t\t},\n\t\t};\n\t}\n\n\t_getToken() {\n\t\tif (this.secret == null && this.userToken == null && !this.anonymous) {\n\t\t\tthrow new Error(\n\t\t\t\t`Both secret and user tokens are not set. Either client.setUser wasn't called or client.disconnect was called`,\n\t\t\t);\n\t\t}\n\t\tlet token = '';\n\t\tif (!this.anonymous) {\n\t\t\ttoken = this.userToken != null ? this.userToken : JWTServerToken(this.secret);\n\t\t}\n\t\treturn token;\n\t}\n\n\t_startCleaning() {\n\t\tconst that = this;\n\t\tif (this.cleaningIntervalRef != null) {\n\t\t\treturn;\n\t\t}\n\t\tthis.cleaningIntervalRef = setInterval(() => {\n\t\t\t// call clean on the channel, used for calling the stop.typing event etc.\n\t\t\tfor (const channel of Object.values(that.activeChannels)) {\n\t\t\t\tchannel.clean();\n\t\t\t}\n\t\t}, 500);\n\t}\n\n\tverifyWebhook(requestBody, xSignature) {\n\t\treturn CheckSignature(requestBody, this.secret, xSignature);\n\t}\n}\n","export const Allow = 'Allow';\nexport const Deny = 'Deny';\nexport const AnyResource = ['*'];\nexport const AnyRole = ['*'];\nexport const MaxPriority = 999;\nexport const MinPriority = 1;\n\nexport class Permission {\n\tconstructor(\n\t\tname,\n\t\tpriority,\n\t\tresources = AnyResource,\n\t\troles = AnyRole,\n\t\towner = false,\n\t\taction = Allow,\n\t) {\n\t\tthis.name = name;\n\t\tthis.action = action;\n\t\tthis.owner = owner;\n\t\tthis.priority = priority;\n\t\tthis.resources = resources;\n\t\tthis.roles = roles;\n\t}\n}\n\nexport const AllowAll = new Permission(\n\t'Allow all',\n\tMaxPriority,\n\tAnyResource,\n\tAnyRole,\n\tfalse,\n\tAllow,\n);\nexport const DenyAll = new Permission(\n\t'Deny all',\n\tMinPriority,\n\tAnyResource,\n\tAnyRole,\n\tfalse,\n\tDeny,\n);\n"]},"metadata":{},"sourceType":"module"}