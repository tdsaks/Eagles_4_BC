{"ast":null,"code":"'use strict';\n\nconst BYTE_UNITS = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\nconst BIT_UNITS = ['b', 'kbit', 'Mbit', 'Gbit', 'Tbit', 'Pbit', 'Ebit', 'Zbit', 'Ybit'];\n/*\nFormats the given number using `Number#toLocaleString`.\n- If locale is a string, the value is expected to be a locale-key (for example: `de`).\n- If locale is true, the system default locale is used for translation.\n- If no value for locale is specified, the number is returned unmodified.\n*/\n\nconst toLocaleString = (number, locale) => {\n  let result = number;\n\n  if (typeof locale === 'string') {\n    result = number.toLocaleString(locale);\n  } else if (locale === true) {\n    result = number.toLocaleString();\n  }\n\n  return result;\n};\n\nmodule.exports = (number, options) => {\n  if (!Number.isFinite(number)) {\n    throw new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);\n  }\n\n  options = Object.assign({\n    bits: false\n  }, options);\n  const UNITS = options.bits ? BIT_UNITS : BYTE_UNITS;\n\n  if (options.signed && number === 0) {\n    return ' 0 ' + UNITS[0];\n  }\n\n  const isNegative = number < 0;\n  const prefix = isNegative ? '-' : options.signed ? '+' : '';\n\n  if (isNegative) {\n    number = -number;\n  }\n\n  if (number < 1) {\n    const numberString = toLocaleString(number, options.locale);\n    return prefix + numberString + ' ' + UNITS[0];\n  }\n\n  const exponent = Math.min(Math.floor(Math.log10(number) / 3), UNITS.length - 1); // eslint-disable-next-line unicorn/prefer-exponentiation-operator\n\n  number = Number((number / Math.pow(1000, exponent)).toPrecision(3));\n  const numberString = toLocaleString(number, options.locale);\n  const unit = UNITS[exponent];\n  return prefix + numberString + ' ' + unit;\n};","map":{"version":3,"sources":["/Users/tommysuh/Desktop/WebDeisgn/creative-project-adam-esther-tommy/node_modules/pretty-bytes/index.js"],"names":["BYTE_UNITS","BIT_UNITS","toLocaleString","number","locale","result","module","exports","options","Number","isFinite","TypeError","Object","assign","bits","UNITS","signed","isNegative","prefix","numberString","exponent","Math","min","floor","log10","length","pow","toPrecision","unit"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAG,CAClB,GADkB,EAElB,IAFkB,EAGlB,IAHkB,EAIlB,IAJkB,EAKlB,IALkB,EAMlB,IANkB,EAOlB,IAPkB,EAQlB,IARkB,EASlB,IATkB,CAAnB;AAYA,MAAMC,SAAS,GAAG,CACjB,GADiB,EAEjB,MAFiB,EAGjB,MAHiB,EAIjB,MAJiB,EAKjB,MALiB,EAMjB,MANiB,EAOjB,MAPiB,EAQjB,MARiB,EASjB,MATiB,CAAlB;AAYA;;;;;;;AAMA,MAAMC,cAAc,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB;AAC1C,MAAIC,MAAM,GAAGF,MAAb;;AACA,MAAI,OAAOC,MAAP,KAAkB,QAAtB,EAAgC;AAC/BC,IAAAA,MAAM,GAAGF,MAAM,CAACD,cAAP,CAAsBE,MAAtB,CAAT;AACA,GAFD,MAEO,IAAIA,MAAM,KAAK,IAAf,EAAqB;AAC3BC,IAAAA,MAAM,GAAGF,MAAM,CAACD,cAAP,EAAT;AACA;;AAED,SAAOG,MAAP;AACA,CATD;;AAWAC,MAAM,CAACC,OAAP,GAAiB,CAACJ,MAAD,EAASK,OAAT,KAAqB;AACrC,MAAI,CAACC,MAAM,CAACC,QAAP,CAAgBP,MAAhB,CAAL,EAA8B;AAC7B,UAAM,IAAIQ,SAAJ,CAAe,iCAAgC,OAAOR,MAAO,KAAIA,MAAO,EAAxE,CAAN;AACA;;AAEDK,EAAAA,OAAO,GAAGI,MAAM,CAACC,MAAP,CAAc;AAACC,IAAAA,IAAI,EAAE;AAAP,GAAd,EAA6BN,OAA7B,CAAV;AACA,QAAMO,KAAK,GAAGP,OAAO,CAACM,IAAR,GAAeb,SAAf,GAA2BD,UAAzC;;AAEA,MAAIQ,OAAO,CAACQ,MAAR,IAAkBb,MAAM,KAAK,CAAjC,EAAoC;AACnC,WAAO,QAAQY,KAAK,CAAC,CAAD,CAApB;AACA;;AAED,QAAME,UAAU,GAAGd,MAAM,GAAG,CAA5B;AACA,QAAMe,MAAM,GAAGD,UAAU,GAAG,GAAH,GAAUT,OAAO,CAACQ,MAAR,GAAiB,GAAjB,GAAuB,EAA1D;;AAEA,MAAIC,UAAJ,EAAgB;AACfd,IAAAA,MAAM,GAAG,CAACA,MAAV;AACA;;AAED,MAAIA,MAAM,GAAG,CAAb,EAAgB;AACf,UAAMgB,YAAY,GAAGjB,cAAc,CAACC,MAAD,EAASK,OAAO,CAACJ,MAAjB,CAAnC;AACA,WAAOc,MAAM,GAAGC,YAAT,GAAwB,GAAxB,GAA8BJ,KAAK,CAAC,CAAD,CAA1C;AACA;;AAED,QAAMK,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,KAAL,CAAWrB,MAAX,IAAqB,CAAhC,CAAT,EAA6CY,KAAK,CAACU,MAAN,GAAe,CAA5D,CAAjB,CAxBqC,CAyBrC;;AACAtB,EAAAA,MAAM,GAAGM,MAAM,CAAC,CAACN,MAAM,GAAGkB,IAAI,CAACK,GAAL,CAAS,IAAT,EAAeN,QAAf,CAAV,EAAoCO,WAApC,CAAgD,CAAhD,CAAD,CAAf;AACA,QAAMR,YAAY,GAAGjB,cAAc,CAACC,MAAD,EAASK,OAAO,CAACJ,MAAjB,CAAnC;AAEA,QAAMwB,IAAI,GAAGb,KAAK,CAACK,QAAD,CAAlB;AAEA,SAAOF,MAAM,GAAGC,YAAT,GAAwB,GAAxB,GAA8BS,IAArC;AACA,CAhCD","sourcesContent":["'use strict';\n\nconst BYTE_UNITS = [\n\t'B',\n\t'kB',\n\t'MB',\n\t'GB',\n\t'TB',\n\t'PB',\n\t'EB',\n\t'ZB',\n\t'YB'\n];\n\nconst BIT_UNITS = [\n\t'b',\n\t'kbit',\n\t'Mbit',\n\t'Gbit',\n\t'Tbit',\n\t'Pbit',\n\t'Ebit',\n\t'Zbit',\n\t'Ybit'\n];\n\n/*\nFormats the given number using `Number#toLocaleString`.\n- If locale is a string, the value is expected to be a locale-key (for example: `de`).\n- If locale is true, the system default locale is used for translation.\n- If no value for locale is specified, the number is returned unmodified.\n*/\nconst toLocaleString = (number, locale) => {\n\tlet result = number;\n\tif (typeof locale === 'string') {\n\t\tresult = number.toLocaleString(locale);\n\t} else if (locale === true) {\n\t\tresult = number.toLocaleString();\n\t}\n\n\treturn result;\n};\n\nmodule.exports = (number, options) => {\n\tif (!Number.isFinite(number)) {\n\t\tthrow new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);\n\t}\n\n\toptions = Object.assign({bits: false}, options);\n\tconst UNITS = options.bits ? BIT_UNITS : BYTE_UNITS;\n\n\tif (options.signed && number === 0) {\n\t\treturn ' 0 ' + UNITS[0];\n\t}\n\n\tconst isNegative = number < 0;\n\tconst prefix = isNegative ? '-' : (options.signed ? '+' : '');\n\n\tif (isNegative) {\n\t\tnumber = -number;\n\t}\n\n\tif (number < 1) {\n\t\tconst numberString = toLocaleString(number, options.locale);\n\t\treturn prefix + numberString + ' ' + UNITS[0];\n\t}\n\n\tconst exponent = Math.min(Math.floor(Math.log10(number) / 3), UNITS.length - 1);\n\t// eslint-disable-next-line unicorn/prefer-exponentiation-operator\n\tnumber = Number((number / Math.pow(1000, exponent)).toPrecision(3));\n\tconst numberString = toLocaleString(number, options.locale);\n\n\tconst unit = UNITS[exponent];\n\n\treturn prefix + numberString + ' ' + unit;\n};\n"]},"metadata":{},"sourceType":"script"}