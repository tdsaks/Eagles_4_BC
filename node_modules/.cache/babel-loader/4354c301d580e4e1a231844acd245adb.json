{"ast":null,"code":";\n\n(function (window) {\n  var lastTimer = -1;\n\n  var install = function (Visibility) {\n    // Run callback every `interval` milliseconds if page is visible and\n    // every `hiddenInterval` milliseconds if page is hidden.\n    //\n    //   Visibility.every(60 * 1000, 5 * 60 * 1000, function () {\n    //       checkNewMails();\n    //   });\n    //\n    // You can skip `hiddenInterval` and callback will be called only if\n    // page is visible.\n    //\n    //   Visibility.every(1000, function () {\n    //       updateCountdown();\n    //   });\n    //\n    // It is analog of `setInterval(callback, interval)` but use visibility\n    // state.\n    //\n    // It return timer ID, that you can use in `Visibility.stop(id)` to stop\n    // timer (`clearInterval` analog).\n    // Warning: timer ID is different from interval ID from `setInterval`,\n    // so don’t use it in `clearInterval`.\n    //\n    // On change state from hidden to visible timers will be execute.\n    Visibility.every = function (interval, hiddenInterval, callback) {\n      Visibility._time();\n\n      if (!callback) {\n        callback = hiddenInterval;\n        hiddenInterval = null;\n      }\n\n      lastTimer += 1;\n      var number = lastTimer;\n      Visibility._timers[number] = {\n        visible: interval,\n        hidden: hiddenInterval,\n        callback: callback\n      };\n\n      Visibility._run(number, false);\n\n      if (Visibility.isSupported()) {\n        Visibility._listen();\n      }\n\n      return number;\n    }; // Stop timer from `every` method by it ID (`every` method return it).\n    //\n    //   slideshow = Visibility.every(5 * 1000, function () {\n    //       changeSlide();\n    //   });\n    //   $('.stopSlideshow').click(function () {\n    //       Visibility.stop(slideshow);\n    //   });\n\n\n    Visibility.stop = function (id) {\n      if (!Visibility._timers[id]) {\n        return false;\n      }\n\n      Visibility._stop(id);\n\n      delete Visibility._timers[id];\n      return true;\n    }; // Callbacks and intervals added by `every` method.\n\n\n    Visibility._timers = {}; // Initialize variables on page loading.\n\n    Visibility._time = function () {\n      if (Visibility._timed) {\n        return;\n      }\n\n      Visibility._timed = true;\n      Visibility._wasHidden = Visibility.hidden();\n      Visibility.change(function () {\n        Visibility._stopRun();\n\n        Visibility._wasHidden = Visibility.hidden();\n      });\n    }; // Try to run timer from every method by it’s ID. It will be use\n    // `interval` or `hiddenInterval` depending on visibility state.\n    // If page is hidden and `hiddenInterval` is null,\n    // it will not run timer.\n    //\n    // Argument `runNow` say, that timers must be execute now too.\n\n\n    Visibility._run = function (id, runNow) {\n      var interval,\n          timer = Visibility._timers[id];\n\n      if (Visibility.hidden()) {\n        if (null === timer.hidden) {\n          return;\n        }\n\n        interval = timer.hidden;\n      } else {\n        interval = timer.visible;\n      }\n\n      var runner = function () {\n        timer.last = new Date();\n        timer.callback.call(window);\n      };\n\n      if (runNow) {\n        var now = new Date();\n        var last = now - timer.last;\n\n        if (interval > last) {\n          timer.delay = setTimeout(function () {\n            timer.id = setInterval(runner, interval);\n            runner();\n          }, interval - last);\n        } else {\n          timer.id = setInterval(runner, interval);\n          runner();\n        }\n      } else {\n        timer.id = setInterval(runner, interval);\n      }\n    }; // Stop timer from `every` method by it’s ID.\n\n\n    Visibility._stop = function (id) {\n      var timer = Visibility._timers[id];\n      clearInterval(timer.id);\n      clearTimeout(timer.delay);\n      delete timer.id;\n      delete timer.delay;\n    }; // Listener for `visibilitychange` event.\n\n\n    Visibility._stopRun = function (event) {\n      var isHidden = Visibility.hidden(),\n          wasHidden = Visibility._wasHidden;\n\n      if (isHidden && !wasHidden || !isHidden && wasHidden) {\n        for (var i in Visibility._timers) {\n          Visibility._stop(i);\n\n          Visibility._run(i, !isHidden);\n        }\n      }\n    };\n\n    return Visibility;\n  };\n\n  if (typeof module != 'undefined' && module.exports) {\n    module.exports = install(require('./visibility.core'));\n  } else {\n    install(window.Visibility || require('./visibility.core'));\n  }\n})(window);","map":{"version":3,"sources":["/Users/tommysuh/Desktop/WebDeisgn/creative-project-adam-esther-tommy/node_modules/visibilityjs/lib/visibility.timers.js"],"names":["window","lastTimer","install","Visibility","every","interval","hiddenInterval","callback","_time","number","_timers","visible","hidden","_run","isSupported","_listen","stop","id","_stop","_timed","_wasHidden","change","_stopRun","runNow","timer","runner","last","Date","call","now","delay","setTimeout","setInterval","clearInterval","clearTimeout","event","isHidden","wasHidden","i","module","exports","require"],"mappings":"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","sourcesContent":[";(function (window) {\n    var lastTimer = -1;\n\n    var install = function (Visibility) {\n\n        // Run callback every `interval` milliseconds if page is visible and\n        // every `hiddenInterval` milliseconds if page is hidden.\n        //\n        //   Visibility.every(60 * 1000, 5 * 60 * 1000, function () {\n        //       checkNewMails();\n        //   });\n        //\n        // You can skip `hiddenInterval` and callback will be called only if\n        // page is visible.\n        //\n        //   Visibility.every(1000, function () {\n        //       updateCountdown();\n        //   });\n        //\n        // It is analog of `setInterval(callback, interval)` but use visibility\n        // state.\n        //\n        // It return timer ID, that you can use in `Visibility.stop(id)` to stop\n        // timer (`clearInterval` analog).\n        // Warning: timer ID is different from interval ID from `setInterval`,\n        // so don’t use it in `clearInterval`.\n        //\n        // On change state from hidden to visible timers will be execute.\n        Visibility.every = function (interval, hiddenInterval, callback) {\n            Visibility._time();\n\n            if ( !callback ) {\n                callback = hiddenInterval;\n                hiddenInterval = null;\n            }\n\n            lastTimer += 1;\n            var number = lastTimer;\n\n            Visibility._timers[number] = {\n                visible:  interval,\n                hidden:   hiddenInterval,\n                callback: callback\n            };\n            Visibility._run(number, false);\n\n            if ( Visibility.isSupported() ) {\n                Visibility._listen();\n            }\n            return number;\n        };\n\n        // Stop timer from `every` method by it ID (`every` method return it).\n        //\n        //   slideshow = Visibility.every(5 * 1000, function () {\n        //       changeSlide();\n        //   });\n        //   $('.stopSlideshow').click(function () {\n        //       Visibility.stop(slideshow);\n        //   });\n        Visibility.stop = function(id) {\n            if ( !Visibility._timers[id] ) {\n                return false;\n            }\n            Visibility._stop(id);\n            delete Visibility._timers[id];\n            return true;\n        };\n\n        // Callbacks and intervals added by `every` method.\n        Visibility._timers = { };\n\n        // Initialize variables on page loading.\n        Visibility._time = function () {\n            if ( Visibility._timed ) {\n                return;\n            }\n            Visibility._timed     = true;\n            Visibility._wasHidden = Visibility.hidden();\n\n            Visibility.change(function () {\n                Visibility._stopRun();\n                Visibility._wasHidden = Visibility.hidden();\n            });\n        };\n\n        // Try to run timer from every method by it’s ID. It will be use\n        // `interval` or `hiddenInterval` depending on visibility state.\n        // If page is hidden and `hiddenInterval` is null,\n        // it will not run timer.\n        //\n        // Argument `runNow` say, that timers must be execute now too.\n        Visibility._run = function (id, runNow) {\n            var interval,\n                timer = Visibility._timers[id];\n\n            if ( Visibility.hidden() ) {\n                if ( null === timer.hidden ) {\n                    return;\n                }\n                interval = timer.hidden;\n            } else {\n                interval = timer.visible;\n            }\n\n            var runner = function () {\n                timer.last = new Date();\n                timer.callback.call(window);\n            }\n\n            if ( runNow ) {\n                var now  = new Date();\n                var last = now - timer.last ;\n\n                if ( interval > last ) {\n                    timer.delay = setTimeout(function () {\n                        timer.id = setInterval(runner, interval);\n                        runner();\n                    }, interval - last);\n                } else {\n                    timer.id = setInterval(runner, interval);\n                    runner();\n                }\n\n            } else {\n              timer.id = setInterval(runner, interval);\n            }\n        };\n\n        // Stop timer from `every` method by it’s ID.\n        Visibility._stop = function (id) {\n            var timer = Visibility._timers[id];\n            clearInterval(timer.id);\n            clearTimeout(timer.delay);\n            delete timer.id;\n            delete timer.delay;\n        };\n\n        // Listener for `visibilitychange` event.\n        Visibility._stopRun = function (event) {\n            var isHidden  = Visibility.hidden(),\n                wasHidden = Visibility._wasHidden;\n\n            if ( (isHidden && !wasHidden) || (!isHidden && wasHidden) ) {\n                for ( var i in Visibility._timers ) {\n                    Visibility._stop(i);\n                    Visibility._run(i, !isHidden);\n                }\n            }\n        };\n\n        return Visibility;\n    }\n\n    if ( typeof(module) != 'undefined' && module.exports ) {\n        module.exports = install(require('./visibility.core'));\n    } else {\n        install(window.Visibility || require('./visibility.core'))\n    }\n\n})(window);\n"]},"metadata":{},"sourceType":"script"}