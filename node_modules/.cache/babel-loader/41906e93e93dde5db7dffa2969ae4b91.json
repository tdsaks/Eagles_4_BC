{"ast":null,"code":"/*\n * JavaScript Load Image Fetch\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2017, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require */\n;\n\n(function (factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image', './load-image-meta'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'), require('./load-image-meta'));\n  } else {\n    // Browser globals:\n    factory(window.loadImage);\n  }\n})(function (loadImage) {\n  'use strict';\n\n  if (typeof fetch !== 'undefined' && typeof Request !== 'undefined') {\n    loadImage.fetchBlob = function (url, callback, options) {\n      if (loadImage.hasMetaOption(options)) {\n        fetch(new Request(url, options)).then(function (response) {\n          return response.blob();\n        }).then(callback).catch(function (err) {\n          console.log(err); // eslint-disable-line no-console\n\n          callback();\n        });\n      } else {\n        callback();\n      }\n    };\n  } else if ( // Check for XHR2 support:\n  typeof XMLHttpRequest !== 'undefined' && typeof ProgressEvent !== 'undefined') {\n    loadImage.fetchBlob = function (url, callback, options) {\n      if (loadImage.hasMetaOption(options)) {\n        // eslint-disable-next-line no-param-reassign\n        options = options || {};\n        var req = new XMLHttpRequest();\n        req.open(options.method || 'GET', url);\n\n        if (options.headers) {\n          Object.keys(options.headers).forEach(function (key) {\n            req.setRequestHeader(key, options.headers[key]);\n          });\n        }\n\n        req.withCredentials = options.credentials === 'include';\n        req.responseType = 'blob';\n\n        req.onload = function () {\n          callback(req.response);\n        };\n\n        req.onerror = req.onabort = req.ontimeout = function (e) {\n          console.log(e); // eslint-disable-line no-console\n\n          callback();\n        };\n\n        req.send(options.body);\n      } else {\n        callback();\n      }\n    };\n  }\n});","map":{"version":3,"sources":["/Users/tommysuh/Desktop/WebDeisgn/creative-project-adam-esther-tommy/node_modules/blueimp-load-image/js/load-image-fetch.js"],"names":["factory","define","amd","module","exports","require","window","loadImage","fetch","Request","fetchBlob","url","callback","options","hasMetaOption","then","response","blob","catch","err","console","log","XMLHttpRequest","ProgressEvent","req","open","method","headers","Object","keys","forEach","key","setRequestHeader","withCredentials","credentials","responseType","onload","onerror","onabort","ontimeout","e","send","body"],"mappings":"AAAA;;;;;;;;;;;AAWA;AAEA;;AAAC,CAAC,UAAUA,OAAV,EAAmB;AACnB;;AACA,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AAC9C;AACAD,IAAAA,MAAM,CAAC,CAAC,cAAD,EAAiB,mBAAjB,CAAD,EAAwCD,OAAxC,CAAN;AACD,GAHD,MAGO,IAAI,OAAOG,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACC,OAAzC,EAAkD;AACvDJ,IAAAA,OAAO,CAACK,OAAO,CAAC,cAAD,CAAR,EAA0BA,OAAO,CAAC,mBAAD,CAAjC,CAAP;AACD,GAFM,MAEA;AACL;AACAL,IAAAA,OAAO,CAACM,MAAM,CAACC,SAAR,CAAP;AACD;AACF,CAXA,EAWE,UAAUA,SAAV,EAAqB;AACtB;;AAEA,MAAI,OAAOC,KAAP,KAAiB,WAAjB,IAAgC,OAAOC,OAAP,KAAmB,WAAvD,EAAoE;AAClEF,IAAAA,SAAS,CAACG,SAAV,GAAsB,UAAUC,GAAV,EAAeC,QAAf,EAAyBC,OAAzB,EAAkC;AACtD,UAAIN,SAAS,CAACO,aAAV,CAAwBD,OAAxB,CAAJ,EAAsC;AACpCL,QAAAA,KAAK,CAAC,IAAIC,OAAJ,CAAYE,GAAZ,EAAiBE,OAAjB,CAAD,CAAL,CACGE,IADH,CACQ,UAAUC,QAAV,EAAoB;AACxB,iBAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,SAHH,EAIGF,IAJH,CAIQH,QAJR,EAKGM,KALH,CAKS,UAAUC,GAAV,EAAe;AACpBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EADoB,CACH;;AACjBP,UAAAA,QAAQ;AACT,SARH;AASD,OAVD,MAUO;AACLA,QAAAA,QAAQ;AACT;AACF,KAdD;AAeD,GAhBD,MAgBO,KACL;AACA,SAAOU,cAAP,KAA0B,WAA1B,IACA,OAAOC,aAAP,KAAyB,WAHpB,EAIL;AACAhB,IAAAA,SAAS,CAACG,SAAV,GAAsB,UAAUC,GAAV,EAAeC,QAAf,EAAyBC,OAAzB,EAAkC;AACtD,UAAIN,SAAS,CAACO,aAAV,CAAwBD,OAAxB,CAAJ,EAAsC;AACpC;AACAA,QAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,YAAIW,GAAG,GAAG,IAAIF,cAAJ,EAAV;AACAE,QAAAA,GAAG,CAACC,IAAJ,CAASZ,OAAO,CAACa,MAAR,IAAkB,KAA3B,EAAkCf,GAAlC;;AACA,YAAIE,OAAO,CAACc,OAAZ,EAAqB;AACnBC,UAAAA,MAAM,CAACC,IAAP,CAAYhB,OAAO,CAACc,OAApB,EAA6BG,OAA7B,CAAqC,UAAUC,GAAV,EAAe;AAClDP,YAAAA,GAAG,CAACQ,gBAAJ,CAAqBD,GAArB,EAA0BlB,OAAO,CAACc,OAAR,CAAgBI,GAAhB,CAA1B;AACD,WAFD;AAGD;;AACDP,QAAAA,GAAG,CAACS,eAAJ,GAAsBpB,OAAO,CAACqB,WAAR,KAAwB,SAA9C;AACAV,QAAAA,GAAG,CAACW,YAAJ,GAAmB,MAAnB;;AACAX,QAAAA,GAAG,CAACY,MAAJ,GAAa,YAAY;AACvBxB,UAAAA,QAAQ,CAACY,GAAG,CAACR,QAAL,CAAR;AACD,SAFD;;AAGAQ,QAAAA,GAAG,CAACa,OAAJ,GAAcb,GAAG,CAACc,OAAJ,GAAcd,GAAG,CAACe,SAAJ,GAAgB,UAAUC,CAAV,EAAa;AACvDpB,UAAAA,OAAO,CAACC,GAAR,CAAYmB,CAAZ,EADuD,CACxC;;AACf5B,UAAAA,QAAQ;AACT,SAHD;;AAIAY,QAAAA,GAAG,CAACiB,IAAJ,CAAS5B,OAAO,CAAC6B,IAAjB;AACD,OApBD,MAoBO;AACL9B,QAAAA,QAAQ;AACT;AACF,KAxBD;AAyBD;AACF,CA7DA","sourcesContent":["/*\n * JavaScript Load Image Fetch\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2017, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require */\n\n;(function (factory) {\n  'use strict'\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image', './load-image-meta'], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'), require('./load-image-meta'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n})(function (loadImage) {\n  'use strict'\n\n  if (typeof fetch !== 'undefined' && typeof Request !== 'undefined') {\n    loadImage.fetchBlob = function (url, callback, options) {\n      if (loadImage.hasMetaOption(options)) {\n        fetch(new Request(url, options))\n          .then(function (response) {\n            return response.blob()\n          })\n          .then(callback)\n          .catch(function (err) {\n            console.log(err) // eslint-disable-line no-console\n            callback()\n          })\n      } else {\n        callback()\n      }\n    }\n  } else if (\n    // Check for XHR2 support:\n    typeof XMLHttpRequest !== 'undefined' &&\n    typeof ProgressEvent !== 'undefined'\n  ) {\n    loadImage.fetchBlob = function (url, callback, options) {\n      if (loadImage.hasMetaOption(options)) {\n        // eslint-disable-next-line no-param-reassign\n        options = options || {}\n        var req = new XMLHttpRequest()\n        req.open(options.method || 'GET', url)\n        if (options.headers) {\n          Object.keys(options.headers).forEach(function (key) {\n            req.setRequestHeader(key, options.headers[key])\n          })\n        }\n        req.withCredentials = options.credentials === 'include'\n        req.responseType = 'blob'\n        req.onload = function () {\n          callback(req.response)\n        }\n        req.onerror = req.onabort = req.ontimeout = function (e) {\n          console.log(e) // eslint-disable-line no-console\n          callback()\n        }\n        req.send(options.body)\n      } else {\n        callback()\n      }\n    }\n  }\n})\n"]},"metadata":{},"sourceType":"script"}